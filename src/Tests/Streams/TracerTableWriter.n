using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using Tao;
using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

namespace Tests
{
    public class TracerTableWriter: ITableWriter
    {
        private _writer : ITableWriter;
        private _expectedStream : Stream;
        public this(writer : ITableWriter, expectedStream : Stream)
        {
            _writer = writer;
            _expectedStream = expectedStream;
        }
        public Write(table : IMetadataTable, heapSizeFlags : IEnumerable[HeapSizeFlags], rowCounts : IDictionary.[TableId, uint], 
            outputStream : Stream) : void
            requires table is IMetadataTableInfo
        {
            def info = table :> IMetadataTableInfo;
            def tableId = info.TableId;
            def startPosition = outputStream.Position;

            Console.Write("Writing Table {0}...", tableId);
            _writer.Write(table, heapSizeFlags, rowCounts, outputStream);

            def endPosition = outputStream.Position;

            // Determine the expected bytes
            def length = endPosition - startPosition;
            when(length > 0)
            {                
                def expectedBytes = _expectedStream.ReadBytes(length :> int, startPosition);
                def actualBytes = outputStream.ReadBytes(length :> int, startPosition);
                if (expectedBytes.GetHash() != actualBytes.GetHash())
                {
                    Console.WriteLine("The written table doesn't match the original table bytes", tableId);                    
                    expectedBytes.ShouldMatch(actualBytes);
                }
                else
                {
                    Console.WriteLine("Success");
                }                
            }
        }
    }
}
