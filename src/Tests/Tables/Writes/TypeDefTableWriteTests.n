using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using Tao;
using Tao.Interfaces;
using Tao.Metadata;
using Tao.Metadata.Tables;
using Tao.Metadata.Tables.Rows;
using System;
using System.Collections.Generic;
using System.Linq;

namespace Tests
{
    public class TypeDefTableWriteTests : TableWriterTest[TypeDefRow, TypeDefTable]
    {
        public this()
        {
            base(TableId.TypeDef);
        }
        public ShouldWriteFlags() : void
        {
            def rowIndex = 0;
            TestWrite.[uint](rowIndex, 0, r => r.Flags, "Wrong Flags");
        }
        public ShouldWriteName() : void
        {
            def rowIndex = 0;
            TestWrite(rowIndex,Index.Narrow(1), r => r.TypeName, "Wrong TypeName");
        }
        public ShouldWriteNamespace() : void
        {
            def rowIndex = 0;
            TestWrite(rowIndex,Index.Narrow(0), r => r.TypeNamespace, "Wrong TypeNamespace");
        }
        public ShouldWriteExtends() : void
        {
            def rowIndex = 0;
            TestWrite(rowIndex,Index.Narrow(0), r => r.Extends, "Wrong Extends");
        }
        public ShouldWriteFieldList() : void
        {
            def rowIndex = 0;
            TestWrite(rowIndex,Index.Narrow(1), r => r.FieldList, "Wrong FieldList");
        }
        public ShouldWriteMethodList() : void
        {
            def rowIndex = 0;
            TestWrite(rowIndex,Index.Narrow(1), r => r.MethodList, "Wrong MethodList");
        }

        protected override TargetAssemblyFileName : string
        {
            get
            {
                @"..\..\SampleBinaries\Skeleton.exe";
            }
        } 
    }
}
