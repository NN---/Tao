using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using Tao;
using Tao.Interfaces;

using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

namespace Tests
{
    public abstract class BaseTableWriterTest : FileBasedTableTest
    {
        private _tableId : TableId;
        protected this(targetTableId : TableId)
        {
            _tableId = targetTableId;
        }

        protected TestWrite[TRow, TTable](rowIndex : int, value : Index, getValue : TRow -> Index, failureMessage : string, params args : array[object]) : void
        {
            TestWrite(rowIndex, value, getValue, (actual, expected) => actual.IsEqualTo(expected), failureMessage, args);
        }
        protected TestWrite[T, TRow, TTable](rowIndex : int, value : T, getValue : TRow -> T, failureMessage : string, params args : array[object]) : void
        {
            TestWrite(rowIndex, value, getValue, (actual, expected) => object.Equals(actual, expected), failureMessage, args);
        }    
        protected TestWrite[T, TRow, TTable](rowIndex : int, value : T, getValue : TRow -> T, compareValue: T * T-> bool,
        failureMessage : string, params args : array[object]) : void
        where TTable : IMetadataTable[TRow], class
        {
            def compareRows(actualRow : TRow, expectedRow : TRow, getValue : TRow -> T, failureMessage : string) : void
            {
                def currentValue = getValue(actualRow);
                def readValue = getValue(expectedRow);
                def givenValue = value;
                
                _ = givenValue.ToString();
                
                // If the read value does not match the given value, that means the read failed        
                compareValue(readValue, givenValue).ShouldBeTrue("Metadata Table Read Failed for '{0}' row type\r\nReadValue: {0}\r\nActual:{1}", typeof(TRow).Name, readValue.ToString(), givenValue.ToString());                
            
                compareValue(readValue, currentValue).ShouldBeTrue(failureMessage, args);
            };
            TestWrite.[TRow, TTable](compareRows(_, _, getValue, failureMessage), rowIndex);
        }    
        protected TestWrite[TRow, TTable](compareRows : TRow * TRow -> void, rowIndex : int = 0) : void
        where TTable : IMetadataTable[TRow], class
        { 
            def heapSizeFlags = List.[HeapSizeFlags]();

            def aggregateTable = AggregateTable();            
            // Read the expected data
            def inputStream = MemoryStream(GetTableStreamData());
            def headerReader = MetadataTablesHeaderReader();
            def header = headerReader.Read(inputStream); 

            // Convert the header heap size flags to a list of heap size flags
            foreach(flag in typeof(HeapSizeFlags).GetEnumValues())
            {
                def currentFlag = flag :> byte;
                when ((header.HeapSizes & currentFlag) != 0)
                {
                    heapSizeFlags.Add(flag :> HeapSizeFlags);
                }
            }

            def expectedRow = ReadRow(MemoryStream(base.GetTableStreamData()), aggregateTable, rowIndex);

            // Write the target table (this assumes that the target table is part of the aggregate)
            def outputStream = MemoryStream();
            def headerWriter = MetadataTablesHeaderWriter();
            headerWriter.Write(header, outputStream);
            aggregateTable.Write(heapSizeFlags, header.Rows, outputStream);

            def tables : IEnumerable.[IMetadataTable] = aggregateTable.Tables;
            mutable targetTable : TTable = null;

            foreach(table in tables)
            {
                when (typeof(TTable).IsAssignableFrom(table.GetType()))
                {
                    targetTable = table :> TTable;
                }
            }

            targetTable.ShouldBeNotNull("Unable to find the target table type '{0}'", typeof(TTable));

            def actualRow = targetTable.Rows[rowIndex];

            compareRows(actualRow, expectedRow);
        }

        private ReadRow[TRow, TTable](stream : Stream, aggregateTable : AggregateTable, rowIndex : int = 0) : TRow
            where TTable : IMetadataTable[TRow], class
        {

            // Skip past the header stream
            def headerReader = MetadataTablesHeaderReader();
            def header = headerReader.Read(stream);            

            def sortedTables = array(0) : array[TableId];
            def heapSizes = header.HeapSizes;

            def rowCounts = header.Rows;

            // Make sure that the reader only reads every table up to
            // the target table ID
            def targetIdsForRemoval = rowCounts.Keys.Where(k => (k :> uint) > (_tableId :> uint)).ToArray();
            foreach(key in targetIdsForRemoval)
            {
                rowCounts[key] = 0;
            }

            aggregateTable.Read(heapSizes, rowCounts, sortedTables, Dictionary(), stream);

            def tables : IEnumerable.[IMetadataTable] = aggregateTable.Tables;
            mutable targetTable : TTable = null;

            foreach(table in tables)
            {
                when (typeof(TTable).IsAssignableFrom(table.GetType()))
                {
                    targetTable = table :> TTable;
                }
            }

            targetTable.ShouldBeNotNull("Unable to find the target table type '{0}'", typeof(TTable));
            def row = targetTable.Rows[rowIndex];

            row;
        }    
    }
}
