using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using Tao;
using Tao.Interfaces;
using Tao.Metadata;
using Tao.Metadata.Tables;
using Tao.Metadata.Tables.Rows;
using System;
using System.Collections.Generic;
using System.Linq;

namespace Tests
{
    public class MethodDefTableWriteTests : TableWriterTest[MethodDefRow, MethodDefTable]
    {
        public this()
        {
            base(TableId.MethodDef);
        }
        public ShouldWriteRva() : void
        {
            TestWrite.[uint](0, 0x00002050 : uint, r => r.Rva, "Invalid Rva");
        }
        public ShouldWriteImplFlags() : void
        {
            TestWrite.[ushort](0, 0 : ushort, r => r.ImplFlags, "Invalid ImplFlags");
        }
        public ShouldWriteFlags() : void
        {
            TestWrite.[ushort](0, 0x16 : ushort, r => r.Flags, "Invalid Flags");
        }
        public ShouldWriteName() : void
        {
            TestWrite(0, Index.Narrow(0x17), r => r.Name, "Invalid Name");
        }
        public ShouldWriteSignature() : void
        {
            TestWrite(0, Index.Narrow(1), r => r.Signature, "Invalid Signature");
        }
        public ShouldWriteParamList() : void
        {
            TestWrite(0, Index.Narrow(1), r => r.ParamList, "Invalid ParamList");
        }
        protected override TargetAssemblyFileName : string
        {
            get
            {
                @"..\..\SampleBinaries\Skeleton.exe";
            }
        } 
    }
}
