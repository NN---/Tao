using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using Tao;
using Tests.Macros;
using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

namespace Tests
{
    public class TableHeapTests : FileBasedTableTest
    {
        public ShouldHaveCorrectMajorVersion() : void
        {
            def heap = TablesHeap();
            def tableData = MemoryStream(base.GetTableStreamData());
            heap.ReadFrom(tableData);

            heap.MajorVersion.ShouldBeEqualTo(2, "Invalid MajorVersion");            
        }
        public ShouldHaveCorrectMinorVersion() : void
        {
            def heap = TablesHeap();
            def tableData = MemoryStream(base.GetTableStreamData());
            heap.ReadFrom(tableData);

            heap.MinorVersion.ShouldBeEqualTo(0, "Invalid MinorVersion");            
        }
        public ShouldBeAbleToRoundTripTableHeapAndTableHeapMustBeAlignedToNext4ByteBoundary() : void
        {
            def heap = TablesHeap();
            def tableData = MemoryStream(base.GetTableStreamData());
            heap.ReadFrom(tableData);

            def outputStream = MemoryStream();
            heap.WriteTo(outputStream);

            //The written stream should be an exact copy of
            //the original stream after the tables have been
            //roundtripped

            tableData.WriteAllBytesTo("ExpectedTableData");
            outputStream.WriteAllBytesTo("ActualTableData");

            // The two heaps should have exactly the same table headers
            _ = outputStream.Seek(0, SeekOrigin.Begin);
            _ = tableData.Seek(0, SeekOrigin.Begin);

            def writer = MetadataTablesHeaderWriter();
            def writeHeader(header : MetadataTablesHeader, targetStream : Stream) : void
            {
                writer.Write(header, targetStream);                
            }
            
            def reader = MetadataTablesHeaderReader();
            def expectedHeader = reader.Read(tableData);
            def actualHeader = reader.Read(outputStream);

            def expectedHeaderStream = MemoryStream();
            def actualHeaderStream = MemoryStream();
            
            writeHeader(expectedHeader, expectedHeaderStream);
            writeHeader(actualHeader, actualHeaderStream);

            expectedHeaderStream.ShouldMatch(actualHeaderStream);
            
            // Skip the header bytes
            _ = outputStream.Seek(actualHeaderStream.Length, SeekOrigin.Begin);
            
            def header = actualHeader;
            def heapSizes = header.HeapSizes;
            def sortedVector = header.Sorted;
            def sortedTables = sortedVector.GetSortedTables();
            def rowCounts = header.Rows;
            
            // Use the heap itself to verify the written data
            def tables = AggregateTable();
            tables.Read(heapSizes, rowCounts, sortedTables, Dictionary(), outputStream);
            
            def align = 4;
            def actualLength = outputStream.Length :> int;
            
            // Verify that the size of the actual table data matches the stream length in the CLR header
            def image = Image.ReadFrom(TargetAssemblyFileName);
            def root = image.GetMetadataRoot();
            def tableHeapHeader = root.StreamHeaders.Where(s=>s.Name == "#~").First();
            tableHeapHeader.Size.ShouldBeEqualTo(outputStream.Length :> uint, "The actual stream length must match the length specified in the TablesHeap stream header position");
            
            tableData.Length.ShouldBeEqualTo(outputStream.Length, "The streams must have exactly the same length, which should be {0} bytes. The actual length of the stream is {1} bytes", tableData.Length, outputStream.Length);
            outputStream.ShouldMatch(tableData);            
        }       
        
        protected override TargetAssemblyFileName : string
        {
            get
            {
                @"..\..\SampleBinaries\Skeleton.exe";
            }
        }
    }
}
