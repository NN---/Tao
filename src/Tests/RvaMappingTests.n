using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using NUnit;
using NUnit.Core;
using Tao;
using Tao.Interfaces;
using Tao.Metadata;
using Tests.Macros;

using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

namespace Tests
{
  public class RvaMappingTests
  {
    public ShouldBeAbleToDetermineCorrectSectionBasedOnRVA() : void
    {      
      def createSectionHeader(sectionName : string, pointerToRawData : uint, virtualAddress : uint, sizeOfRawData : uint) : ISectionHeader
      {
        def header = SectionHeader();
        header.PointerToRawData = pointerToRawData;
        header.VirtualAddress = virtualAddress;
        header.SizeOfRawData = sizeOfRawData;
        header.Name = sectionName;
        
        header;
      };
     
      // Input: a list of sections and an RVA
      def sections = List.[ISectionHeader]();
      sections.Add(createSectionHeader(".text", 0x200, 0x2000, 0x200));
      sections.Add(createSectionHeader(".reloc", 0x400, 0x4000, 0x200));
      
      def inputSections : IEnumerable.[ISectionHeader] = sections;    
      def sectionResolver = SectionResolver();
                  
      def testHeader(name : string, rva : uint) : void
      {
        def actualSection : ISectionHeader = sectionResolver.Resolve(inputSections, rva);
        def sectionName = actualSection.Name;
        sectionName.ShouldBeEqualTo(name, string.Format("The section resolver should have returned the {0} section", name));
      }                  
      
      // This call should return the .text section
      testHeader(".text", 0x217C);
      testHeader(".reloc", 0x4000);
    }
    
    [NUnit.Framework.ExpectedException(typeof(ArgumentException))]
    public ShouldThrowArgumentExceptionIfRvaDoesNotMatchAnyExistingSections() : void 
    {
      def sectionResolver = SectionResolver();
      def header = SectionHeader();
      def headers = List.[ISectionHeader]();
      headers.Add(header);
      
      _ = sectionResolver.Resolve(headers, 0xFEED);
    }
    
    public ShouldBeAbleToResolveMetadataRootRva() : void
    {
      def imageFile = @"..\..\SampleBinaries\Skeleton.exe";
      def image : IImage = Image.ReadFrom(imageFile);
      
      def resolver = MetadataRootRvaResolver();
      def rva = resolver.ResolveFrom(image).Rva;
      
      rva.ShouldBeEqualTo(0x2060, "Invalid Metadata Rva");
    }        
  }
}
