using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Tao;
using Tao.Interfaces;
using Tests.Macros;

using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

namespace Tests
{
  public class CLIHeaderTests
  {
    public ShouldReadCb() : void
    {
      TestRead("Cb", 0x48 :> uint);
    }           
    public ShouldReadMajorRuntimeVersion() : void
    {
      TestRead("MajorRuntimeVersion", 2 :> ushort);
    }    
    public ShouldReadMinorRuntimeVersion() : void
    {      
      TestRead("MinorRuntimeVersion", 5 :> ushort);
    }    
    public ShouldReadMetadataRva() : void
    {
      TestRead("MetadataRva", 0x00004248 :> uint);
    }    
    public ShouldReadMetadataSize() : void
    {
      TestRead("MetadataSize", 0x0000A68C :> uint);
    }    
    public ShouldReadFlags() : void
    {
      TestRead("Flags", 0 :> RuntimeFlags);
    }
    public ShouldReadResourcesRva() : void
    {
      TestRead("ResourcesRva", 0 :> uint);
    }
    public ShouldReadResourcesSize() : void
    {
      TestRead("ResourcesSize", 0 :> uint);
    }
    public ShouldReadStrongNameSignatureRva() : void
    {
      TestRead("StrongNameSignatureRva", 0 :> uint);
    }
    public ShouldReadStrongNameSignatureSize() : void
    {
      TestRead("StrongNameSignatureSize", 0 :> uint);
    }
    public ShouldReadCodeManagerTableRvaAsZero() : void
    {
      TestRead("CodeManagerTableRva", 0 :> uint);
    }
    public ShouldReadCodeManagerTableSizeAsZero() : void
    {
      TestRead("CodeManagerTableSize", 0 :> uint);
    }
    public ShouldReadVTableFixupsRva() : void
    {
      TestRead("VTableFixupsRva", 0x0000E930 :> uint);
    }    
    public ShouldReadVTableFixupsSize() : void
    {
      TestRead("VTableFixupsSize", 0x000004E8 :> uint);
    }
    public ShouldReadExportAddressTableJumpsRvaAsZero() : void
    {
      TestRead("ExportAddressTableJumpsRva", 0 :> uint);
    }
    public ShouldReadExportAddressTableJumpsSizeAsZero() : void
    {
      TestRead("ExportAddressTableJumpsSize", 0 :> uint);
    }    
    public ShouldReadManagedNativeHeaderRvaAsZero() : void
    {
      TestRead("ManagedNativeHeaderRva", 0 :> uint);
    }   
    public ShouldReadManagedNativeHeaderSizeAsZero() : void
    {
      TestRead("ManagedNativeHeaderSize", 0 :> uint);
    }   
    public ShouldWriteCb() : void
    {
      TestDwordWrite("Cb");
    }        
    public ShouldWriteMajorRuntimeVersion() : void
    {
      TestWordWrite("MajorRuntimeVersion");
    }
    public ShouldWriteMinorRuntimeVersion() : void
    {
      TestWordWrite("MinorRuntimeVersion");
    }    
    public ShouldWriteMetadataRva() : void
    {
      TestDwordWrite("MetadataRva");  
    }
    public ShouldWriteMetadataSize() : void
    {
      TestDwordWrite("MetadataSize"); 
    }
    public ShouldWriteFlags() : void
    {
      TestWrite("Flags", RuntimeFlags.ILOnly);
    }    
    public ShouldWriteResourcesRva() : void
    {
      TestDwordWrite("ResourcesRva");
    }
    public ShouldWriteResourcesSize() : void
    {
      TestDwordWrite("ResourcesSize");
    }
    public ShouldWriteStrongNameSignatureRva() : void
    {
      TestDwordWrite("StrongNameSignatureRva");
    }
    public ShouldWriteStrongNameSignatureSize() : void
    {
      TestDwordWrite("StrongNameSignatureSize");
    }
    public ShouldWriteCodeManagerTableRvaAsZero() : void
    {
      TestDwordWrite("CodeManagerTableRva");
    }
    public ShouldWriteCodeManagerTableSizeAsZero() : void
    {
      TestDwordWrite("CodeManagerTableSize");
    }
    public ShouldWriteVTableFixupsRva() : void
    {
      TestDwordWrite("VTableFixupsRva");
    }
    public ShouldWriteVTableFixupsSize() : void
    {
      TestDwordWrite("VTableFixupsSize");
    }    
    public ShouldWriteExportAddressTableJumpsRvaAsZero() : void
    {
      TestDwordWrite("ExportAddressTableJumpsRva");
    }
    public ShouldWriteExportAddressTableJumpsSizeAsZero() : void
    {
      TestDwordWrite("ExportAddressTableJumpsSize");
    }
    public ShouldWriteManagedNativeHeaderSizeAsZero() : void
    {
      TestDwordWrite("ManagedNativeHeaderSize");
    }    
    public ShouldWriteManagedNativeHeaderRvaAsZero() : void
    {
      TestDwordWrite("ManagedNativeHeaderRva");
    }    
    public ShouldWriteVTableFixupsInAReadWriteSectionOfTheFile() : void
    {
      throw NotImplementedException();  
    }
    public ShouldAlwaysHaveEitherAMethodDefTokenOrAFileTokenAsTheEntryPointForTheAssembly() : void
    {
      throw NotImplementedException();    
    }
    
    public ShouldRaiseErrorIfEntryPointTokenIsInvalid() : void
        expects InvalidOperationException
    {
      throw NotImplementedException();
    }
    private TestDwordWrite(propertyName : string) : void
    {
      TestWrite(propertyName, 0x42 :> uint);
    }
    private TestWordWrite(propertyName : string) : void
    {
      TestWrite(propertyName, 0x42 :> ushort);
    }
    private TestWrite(propertyName: string, expectedValue : RuntimeFlags) : void
    {
      def readValue = fun(targetOffset : uint, reader: BinaryReader) : RuntimeFlags
        {
            def stream = reader.BaseStream;
            _ = stream.Seek(targetOffset :> int, SeekOrigin.Begin);
            reader.ReadUInt32() :> RuntimeFlags
        }
        
      TestWrite(propertyName, expectedValue, readValue);
    } 
    
    private TestWrite(propertyName: string, expectedValue : uint) : void
    {
      def readValue = fun(targetOffset : uint, reader: BinaryReader) : uint
        {
            def stream = reader.BaseStream;
            _ = stream.Seek(targetOffset :> int, SeekOrigin.Begin);
            reader.ReadUInt32();
        }
        
      TestWrite(propertyName, expectedValue, readValue);
    }    
    private TestWrite(propertyName: string, expectedValue : ushort) : void
    {
      def readValue = fun(targetOffset : uint, reader: BinaryReader) : ushort
        {
            def stream = reader.BaseStream;
            _ = stream.Seek(targetOffset :> int, SeekOrigin.Begin);
            reader.ReadUInt16();
        }
        
      TestWrite(propertyName, expectedValue, readValue);
    }    
       
    private TestWrite[TValue](propertyName : string, expectedValue : TValue, readValue: uint * BinaryReader->TValue) : void
    {
      def offsetMap = Dictionary.[string, uint]();
      offsetMap["Cb"] = 0;
      offsetMap["MajorRuntimeVersion"] = 4;
      offsetMap["MinorRuntimeVersion"] = 6;
      offsetMap["MetadataRva"] = 8;
      offsetMap["MetadataSize"] = 12;
      offsetMap["Flags"] = 16;
      offsetMap["EntryPointToken"] = 20;
      offsetMap["ResourcesRva"] = 24;
      offsetMap["ResourcesSize"] = 28;
      offsetMap["StrongNameSignatureRva"] = 32;
      offsetMap["StrongNameSignatureSize"] = 36;
      offsetMap["CodeManagerTableRva"] = 40;
      offsetMap["CodeManagerTableSize"] = 44;
      offsetMap["VTableFixupsRva"] = 48;
      offsetMap["VTableFixupsSize"] = 52;
      offsetMap["ExportAddressTableJumpsRva"] = 56;
      offsetMap["ExportAddressTableJumpsSize"] = 60;
      offsetMap["ManagedNativeHeaderRva"] = 64;
      offsetMap["ManagedNativeHeaderSize"] = 68;
      
      def targetOffset = offsetMap[propertyName];
      def readActualValue = fun(reader: BinaryReader) : TValue
      {
          readValue(targetOffset, reader);
      }     
      def createHeader = fun() : ICLIHeader
      {
          CLIHeader();
      }
        
      def writeValue = fun(header : ICLIHeader, outputStream : Stream) : void
      {
          def writer = CLIHeaderWriter();
          writer.Write(header, outputStream);  
      }
        
      Tester.TestWrite(propertyName, expectedValue, createHeader, readActualValue, writeValue);
    }
    
    private TestRead[TValue](propertyName : string, expectedValue : TValue) : void
    {
      Tester.TestRead.[TValue, ICLIHeader, CLIHeaderReader](propertyName, expectedValue, GetSampleHeader);
    }
              
    private GetSampleHeader() : array[byte]
    {
      def data = array[
        // Cb (count of bytes) = 0x48
	    0x48 : byte, 0x00, 0x00, 0x00, 
	    // MajorRuntimeVersion = 2
	    0x02, 0x00, 
	    // MinorRuntimeVersion = 5
	    0x05, 0x00, 
	    // Metadata RVA = 0x00004248
	    0x48, 0x42, 0x00, 0x00, 
	    // Metadata Size = 0xA68C
	    0x8C, 0xA6, 0x00, 0x00,
	    // Flags = 0
	    0x00, 0x00, 0x00, 0x00, 
	    // EntryPointToken = 0x06000031
	    0x31, 0x00, 0x00, 0x06, 
	    // Resources RVA = 0
	    0x00, 0x00, 0x00, 0x00, 
	    // Resources Size = 0
	    0x00, 0x00, 0x00, 0x00,
	    // StrongNameSignature RVA = 0
	    0x00, 0x00, 0x00, 0x00, 
	    // StrongNameSignature Size = 0
	    0x00, 0x00, 0x00, 0x00, 
	    // CodeManagerTable Rva = 0
	    0x00, 0x00, 0x00, 0x00, 
	    // CodeManagerTable Size = 0
	    0x00, 0x00, 0x00, 0x00,
	    // VTableFixups RVA = 0x0000E930
	    0x30, 0xE9, 0x00, 0x00, 
	    // VTableFixups Size = 0000004E8
	    0xE8, 0x04, 0x00, 0x00, 
	    // ExportAddressTableJumps RVA = 0
	    0x00, 0x00, 0x00, 0x00, 
	    // ExportAddressTableJumps Size = 0  
	    0x00, 0x00, 0x00, 0x00,
	    // ManagedNativeHeader RVA = 0
	    0x00, 0x00, 0x00, 0x00, 
	    // ManagedNativeHeader Size = 0
	    0x00, 0x00, 0x00, 0x00
        ];
        
      data;
    }
  }
}
