using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Tao;
using Tao.Interfaces;
using Tests.Macros;

using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

namespace Tests
{
  public class CompressedIntegerTests
  {
    public ShouldBeAbleToDecodeCompressedSingleByteValue() : void
    {      
      def value : byte = 0x3;
      def expectedStreamPosition = 1;
      
      def bytes = array[value];
      TestCompressedIntegerRead(value, expectedStreamPosition, bytes);
    }            
    public ShouldBeAbleToDecodeCompressedWordValue() : void
    {        
      def expectedValue : uint = 0x2E57;
      def expectedStreamPosition = 2;
      def bytes = array[0xAE : byte, 0x57];
      
      TestCompressedIntegerRead(expectedValue, expectedStreamPosition, bytes);
    }   
    public ShouldBeAbleToDecodeCompressedDoubleWordValue() : void
    {         
      def compressedValue : uint = 0xC0004000;
      def expectedValue : uint = 0x4000;
      def expectedStreamPosition = 4;
      
      // Construct the byte array that represents the compressed integer value
      mutable stream = MemoryStream();
      def writer = BinaryWriter(stream);
      writer.Write(compressedValue);
               
      def bigEndianContents = List.[byte](stream.ToArray());
      bigEndianContents.Reverse();
      
      stream = MemoryStream(bigEndianContents.ToArray());
      
      // Reset the stream pointer to point to the beginning of the stream
      _ = stream.Seek(0, SeekOrigin.Begin);            
      def bytes = stream.ToArray();
      
      TestCompressedIntegerRead(expectedValue, expectedStreamPosition, bytes);
    }    
    public ShouldBeAbleToEncodeCompressedSingleByteValue() : void
    {      
      def value : uint = 0x3;
      def expectedStreamPosition = 1;      
      def expectedBytes = array[value :> byte];
      
      TestCompressedIntegerEncoding(value, expectedStreamPosition, expectedBytes);
    }        
    public ShouldBeAbleToEncodeCompressedWordValue() : void
    {
      def value : uint = 0x2E57;
      def expectedStreamPosition = 2;
      def expectedBytes = array[0xAE : byte, 0x57];
      
      TestCompressedIntegerEncoding(value, expectedStreamPosition, expectedBytes);
    }        
    public ShouldBeAbleToEncodeCompressedDoubleWordValue() : void
    {
      def compressedValue : uint = 0xC0004000;
      def value : uint = 0x4000;
      def expectedStreamPosition = 4;
      
      // Construct the byte array that represents the compressed integer value
      mutable stream = MemoryStream();
      def writer = BinaryWriter(stream);
      writer.Write(compressedValue);
               
      def bigEndianContents = List.[byte](stream.ToArray());
      bigEndianContents.Reverse();
      
      stream = MemoryStream(bigEndianContents.ToArray());
      
      // Reset the stream pointer to point to the beginning of the stream
      _ = stream.Seek(0, SeekOrigin.Begin);            
      def expectedBytes = stream.ToArray();
      
      TestCompressedIntegerEncoding(value, expectedStreamPosition, expectedBytes);
    }    
    public ShouldBeAbleToDecodeCompressedSignedByteValue() : void
    {
      def expectedValue : sbyte = -3;
      def expectedStreamPosition = 1;
      
      def signBit : byte = 1;
      def absoluteValue = 3;
      def encodedValue : byte = ((absoluteValue << 1) | signBit) :> byte;
      def bytes = array[encodedValue];
      
      TestCompressedSignedIntegerRead(expectedValue, expectedStreamPosition, bytes);
    }
    public ShouldBeAbleToDecodeCompressedSignedWordValue() : void
    {
      def expectedValue : short = -8000;
      def expectedStreamPosition = 2;
        
      def bytes = array[0xBE : byte, 0x81];
      TestCompressedSignedIntegerRead(expectedValue, expectedStreamPosition, bytes);
    }
    public ShouldBeAbleToDecodeCompressedSignedDWordValue() : void
    {
      def expectedValue = 268435455;
      def expectedStreamPosition = 4;
      def bytes = array[0xDF : byte, 0xFF, 0xFF, 0xFE];
        
      TestCompressedSignedIntegerRead(expectedValue, expectedStreamPosition, bytes);
    }
    public ShouldThrowArgumentExceptionIfValueExceedsMaximumIntegerValue() : void
        expects ArgumentOutOfRangeException
    {
      def maximumValue : uint = 0x1FFFFFFF;
      def value : uint = maximumValue + 1;
      def outputStream = MemoryStream();
      def writer = CompressedIntegerWriter();
      writer.WriteInteger(value, outputStream);
    }     
    public ShouldThrowArgumentExceptionIfSignedValueIsBelowExpectedValues() : void
        expects ArgumentOutOfRangeException
    {
      def lowValue = -268435460;
      def value = lowValue - 1;
      def outputStream = MemoryStream();
      def writer = CompressedIntegerWriter();
      writer.WriteSignedInteger(value, outputStream);      
    }
    public ShouldThrowArgumentExceptionIfSignedValueIsAboveExpectedValues() : void
        expects ArgumentOutOfRangeException
    {
      def highValue = 268435457;
      def value = highValue + 1;
      def outputStream = MemoryStream();
      def writer = CompressedIntegerWriter();
      writer.WriteSignedInteger(value, outputStream);      
    }
    
    public ShouldBeAbleToEncodeCompressedSignedByteValue() : void
    {
      def value : sbyte = -3;
      def expectedStreamPosition = 1;
      
      def signBit : byte = 1;
      def absoluteValue = 3;
      def encodedValue : byte = ((absoluteValue << 1) | signBit) :> byte;
      def expectedBytes = array[encodedValue];
      
      TestCompressedSignedIntegerEncoding(value, expectedStreamPosition, expectedBytes);
    }
    public ShouldBeAbleToEncodeCompressedSignedWordValue() : void
    {
      def value = -8000;
      def expectedStreamPosition = 2;        
      def expectedBytes = array[0xBE : byte, 0x81];
      
      TestCompressedSignedIntegerEncoding(value, expectedStreamPosition, expectedBytes);
    }
    public ShouldBeAbleToEncodeCompressedSignedDWordValue() : void
    {        
      def value = 268435455;
      def expectedStreamPosition = 4;
      def expectedBytes = array[0xDF : byte, 0xFF, 0xFF, 0xFE];
      TestCompressedSignedIntegerEncoding(value, expectedStreamPosition, expectedBytes);
    }
    
    private TestCompressedIntegerRead[TValue](expectedValue : TValue, expectedStreamPosition : int, bytes : array[byte], 
    readValue: CompressedIntegerReader * Stream -> TValue) : void
        where TValue : struct
    {
      def stream = MemoryStream(bytes);      
      def reader = CompressedIntegerReader();
      def actualValue : TValue = readValue(reader, stream);
      
      assert actualValue equals expectedValue otherwiseprint "Invalid Integer Value";
      assert stream.Position equals expectedStreamPosition otherwiseprint "Invalid Position";    
    }
    private TestCompressedSignedIntegerEncoding(value : int, expectedStreamPosition : int, expectedBytes : array[byte]) : void
    {
      def writeStream(outputStream : Stream) : void
      {
        def writer = CompressedIntegerWriter();
        writer.WriteSignedInteger(value, outputStream);    
      }
      
      TestCompressedIntegerEncoding(expectedStreamPosition, expectedBytes, writeStream);      
    }
    private TestCompressedIntegerEncoding(value : uint, expectedStreamPosition : int, expectedBytes : array[byte]) : void
    {
      def writeStream(outputStream : Stream) : void
      {
        def writer = CompressedIntegerWriter();
        writer.WriteInteger(value, outputStream);    
      }
      TestCompressedIntegerEncoding(expectedStreamPosition, expectedBytes, writeStream);
    }
    
    private TestCompressedIntegerEncoding(expectedStreamPosition : int, expectedBytes : array[byte], writeStream : Stream -> void) : void
    {
      def outputStream = MemoryStream();
      writeStream(outputStream);      
      outputStream.ShouldMatch(expectedBytes);
      
      assert outputStream.Position equals expectedStreamPosition otherwiseprint "Invalid Position";   
    }
    
    private TestCompressedSignedIntegerRead(expectedValue : int, expectedStreamPosition : int, bytes : array[byte]) : void
    {      
      def readValue(reader: CompressedIntegerReader, stream: Stream) : int
      {
        reader.ReadSignedInteger(stream);
      }
      TestCompressedIntegerRead.[int](expectedValue, expectedStreamPosition, bytes, readValue);
    }
    
    private TestCompressedIntegerRead(expectedValue : uint, expectedStreamPosition : int, bytes : array[byte]) : void
    {      
      def readValue(reader: CompressedIntegerReader, stream: Stream) : uint
      {
        reader.ReadInteger(stream);
      }
      TestCompressedIntegerRead.[uint](expectedValue, expectedStreamPosition, bytes, readValue);
    }
  }
}
