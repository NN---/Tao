using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Tao;
using Tests.Macros;

using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

namespace Tests
{
  public class CompressedIntegerTests
  {
    public ShouldBeAbleToDecodeCompressedSingleByteValue() : void
    {      
      def value : byte = 0x3;
      def expectedStreamPosition = 1;
      
      def bytes = array[value];
      TestCompressedIntegerRead(value, expectedStreamPosition, bytes);
    }            
    public ShouldBeAbleToDecodeCompressedWordValue() : void
    {        
      def expectedValue : uint = 0x2E57;
      def expectedStreamPosition = 2;
      def bytes = array[0xAE : byte, 0x57];
      
      TestCompressedIntegerRead(expectedValue, expectedStreamPosition, bytes);
    }
   
    public ShouldBeAbleToDecodeCompressedDoubleWordValue() : void
    {         
      def compressedValue : uint = 0xC0004000;
      def expectedValue : uint = 0x4000;
      def expectedStreamPosition = 4;
      
      // Construct the byte array that represents the compressed integer value
      mutable stream = MemoryStream();
      def writer = BinaryWriter(stream);
      writer.Write(compressedValue);
         
      
      def bigEndianContents = List.[byte](stream.ToArray());
      bigEndianContents.Reverse();
      
      stream = MemoryStream(bigEndianContents.ToArray());
      
      // Reset the stream pointer to point to the beginning of the stream
      _ = stream.Seek(0, SeekOrigin.Begin);            
      def bytes = stream.ToArray();
      
      TestCompressedIntegerRead(expectedValue, expectedStreamPosition, bytes);
    }    
    public ShouldBeAbleToEncodeCompressedSingleByteValue() : void
    {      
      throw NotImplementedException();
    }    
    public ShouldBeAbleToEncodeCompressedWordValue() : void
    {
      throw NotImplementedException();
    }        
    public ShouldBeAbleToEncodeCompressedDoubleWordValue() : void
    {
      throw NotImplementedException();
    }    
    public ShouldBeAbleToDecodeCompressedSignedByteValue() : void
    {
      throw NotImplementedException();
    }
    public ShouldBeAbleToDecodeCompressedSignedWordValue() : void
    {
      throw NotImplementedException();
    }
    public ShouldBeAbleToDecodeCompressedSignedDWordValue() : void
    {
      throw NotImplementedException();
    }
    public ShouldBeAbleToEncodeCompressedSignedByteValue() : void
    {
      throw NotImplementedException();
    }
    public ShouldBeAbleToEncodeCompressedSignedWordValue() : void
    {
      throw NotImplementedException();
    }
    public ShouldBeAbleToEncodeCompressedSignedDWordValue() : void
    {
      throw NotImplementedException();
    }
        
    private TestCompressedIntegerRead[TValue](expectedValue : TValue, expectedStreamPosition : int, bytes : array[byte]) : void
        where TValue : struct
    {
      def stream = MemoryStream(bytes);
      
      def reader = CompressedIntegerReader();
      def actualValue : uint = reader.Read(stream);
      
      assert actualValue equals expectedValue otherwiseprint "Invalid Integer Value";
      assert stream.Position equals expectedStreamPosition otherwiseprint "Invalid Position";  
    }
  }
}
