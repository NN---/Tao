using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Linq;
using Nemerle.Text;
using Nemerle.Utility;
using Tao;
using Tests.Macros;

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
namespace Tests
{
  public class DataDirectoryTests
  {
    public ShouldReadRva() : void
    {
      def data = GetSampleDataDirectoryBytes();
      def reader = DataDirectoryReader();
      
      def stream = MemoryStream(data);
      def directories = reader.Read(1, stream);
      
      def directory = directories.First();
      
      assert directory.Rva equals 0x2008 otherwiseprint "Invalid RVA";
    }
    
    public ShouldReadSize() : void
    {
      def data = GetSampleDataDirectoryBytes();
      def reader = DataDirectoryReader();
      
      def stream = MemoryStream(data);
      def directories = reader.Read(1, stream);
      
      def directory = directories.First();
      assert directory.Size equals 0x48 otherwiseprint "Invalid Size";
    }

    public ShouldWriteRva() : void
    {
      def expectedData = GetSampleDataDirectoryBytes();
      expectedData[0] = 0x09;
      
      def directories = List.[DataDirectory]();
      def directory = DataDirectory();
      directory.Rva = 0x2009;
      directory.Size = 0x48;
      
      directories.Add(directory);
      
      def stream = MemoryStream();
      def writer = DataDirectoryWriter();
      
      writer.Write(directories, stream);
      
      def expectedHash = expectedData.GetHash();
      def actualHash = stream.GetHash();
      
      assert expectedHash equals actualHash otherwiseprint "Invalid Rva";
    }
    
    public ShouldWriteSize() : void
    {
      def expectedData = GetSampleDataDirectoryBytes();
      expectedData[4] = 0x42;
      
      def directories = List.[DataDirectory]();
      def directory = DataDirectory();
      directory.Rva = 0x2008;
      directory.Size = 0x42;
      
      directories.Add(directory);
      
      def stream = MemoryStream();
      def writer = DataDirectoryWriter();
      
      writer.Write(directories, stream);
      
      def expectedHash = expectedData.GetHash();
      def actualHash = stream.GetHash();
      
      assert expectedHash equals actualHash otherwiseprint "Invalid Size";
    }                
    
    public ShouldReadExportDirectory() : void
    {            
      def targetIndex : uint = 0;
      TestDataDirectoryRead(targetIndex);
    }
        
    public ShouldReadImportDirectory() : void
    {
      def directory = GetSampleDirectory(1);
      
      assert directory.Rva equals 0x217C otherwiseprint "Invalid Import Directory RVA";
      assert directory.Size equals 0x4F otherwiseprint "Invalid Import Directory size";
    }
      
    public ShouldReadResourceDirectory() : void
    {
      def targetIndex : uint = 2;
      TestDataDirectoryRead(targetIndex);
    }
      
    public ShouldReadExceptionDirectory() : void
    {
      def targetIndex : uint = 3;
      TestDataDirectoryRead(targetIndex);
    }
      
    public ShouldReadSecurityDirectory() : void
    {
      def targetIndex : uint = 4;
      TestDataDirectoryRead(targetIndex);
    }
      
    public ShouldReadRelocationDirectory() : void
    {
      def directory = GetSampleDirectory(5);
      assert directory.Rva equals 0x4000 otherwiseprint "Invalid RVA";
      assert directory.Size equals 0xC otherwiseprint "Invalid size";
    }
      
    public ShouldReadDebugDirectory() : void
    {
      def targetIndex : uint = 6;
      TestDataDirectoryRead(targetIndex);
    }
      
    public ShouldReadArchitectureDirectory() : void
    {
      def targetIndex : uint = 7;
      TestDataDirectoryRead(targetIndex);
    }
      
    public ShouldReadTLSDirectory() : void
    {
      def targetIndex : uint = 9;
      TestDataDirectoryRead(targetIndex);
    }
      
    public ShouldReadConfigurationDirectory() : void
    {
      def targetIndex : uint = 10;
      TestDataDirectoryRead(targetIndex);
    }
    public ShouldReadBoundImportDirectory() : void
    {
      def targetIndex : uint = 11;
      TestDataDirectoryRead(targetIndex);
    }
    public ShouldReadIATDirectory() : void
    {
      def directory = GetSampleDirectory(12);
      assert directory.Rva equals 0x2000 otherwiseprint "Invalid RVA";
      assert directory.Size equals 8 otherwiseprint "Invalid Size";
    }
      
    public ShouldReadDelayImportDirectory() : void
    {
      def targetIndex : uint = 13;
      TestDataDirectoryRead(targetIndex);
    }
      
    public ShouldReadCLRDirectory() : void      
    {
      def directory = GetSampleDirectory(14);
      
      assert directory.Rva equals 0x2008 otherwiseprint "Invalid Import Directory RVA";
      assert directory.Size equals 0x48 otherwiseprint "Invalid Import Directory size";
    }
        
    public ShouldWriteExportDirectory() : void
    {
      def targetIndex : uint = 0;      
      TestWrite(targetIndex);
    }
    
    public ShouldWriteImportDirectory() : void
    {
      def targetIndex : uint = 1;      
      TestWrite(targetIndex);
    }
      
    public ShouldWriteResourceDirectory() : void
    {
      def targetIndex : uint = 2;      
      TestWrite(targetIndex);
    }
      
    public ShouldWriteExceptionDirectory() : void
    {
      def targetIndex : uint = 3;      
      TestWrite(targetIndex);
    }
      
    public ShouldWriteSecurityDirectory() : void
    {
      def targetIndex : uint = 4;      
      TestWrite(targetIndex);
    }
      
    public ShouldWriteRelocationDirectory() : void
    {
      def targetIndex : uint = 5;      
      TestWrite(targetIndex);
    }
      
    public ShouldWriteDebugDirectory() : void
    {
      def targetIndex : uint = 6;      
      TestWrite(targetIndex);
    }
      
    public ShouldWriteArchitectureDirectory() : void
    {
      def targetIndex : uint = 7;      
      TestWrite(targetIndex);
    }
      
    public ShouldWriteTLSDirectory() : void
    {
      def targetIndex : uint = 9;      
      TestWrite(targetIndex);
    }
      
    public ShouldWriteConfigurationDirectory() : void
    {
      def targetIndex : uint = 10;      
      TestWrite(targetIndex);
    }
      
    public ShouldWriteIATDirectory() : void
    {
      def targetIndex : uint = 11;      
      TestWrite(targetIndex);
    }
      
    public ShouldWriteBoundImportDirectory() : void
    {
      def targetIndex : uint = 12;      
      TestWrite(targetIndex);  
    }
    
    public ShouldWriteDelayImportDirectory() : void
    {
      def targetIndex : uint = 13;      
      TestWrite(targetIndex);
    }
      
    public ShouldWriteCLRDirectory() : void      
    {
      def targetIndex : uint = 14;      
      TestWrite(targetIndex);
    }
    
    private TestWrite(targetIndex : uint) : void
    {
      def data = GetSampleDataDirectoryHeaderBytes();
      def expectedOutputStream = MemoryStream(data);            
      
      def expectedRva : uint = 0xFEED;
      def expectedSize : uint = 0x42;
      
      SetDirectoryValues(targetIndex, expectedRva, expectedSize, expectedOutputStream); 
      
      def dataDirectory = DataDirectory();
      dataDirectory.Rva = expectedRva;
      dataDirectory.Size = expectedSize;
            
      def inputDirectories = GetSampleDataDirectories();
      def outputStream = MemoryStream();
      def writer = DataDirectoryWriter();
      
      // Insert the expected header into the set of input data directories
      inputDirectories[targetIndex :> int] = dataDirectory;
      
      writer.Write(inputDirectories, outputStream);
      
      def expectedHash = expectedOutputStream.GetHash();
      def actualHash = outputStream.GetHash();
      
      assert expectedHash equals actualHash otherwiseprint "Invalid DataDirectory header write operation";
    }
    
    private GetSampleDirectory(index : int) : DataDirectory
    {
      def data = GetSampleDataDirectoryHeaderBytes();
      def reader = DataDirectoryReader();
      
      def numberOfDirectories : ushort = 15;
      def stream = MemoryStream(data);
      def directories = reader.Read(numberOfDirectories, stream).ToArray();
      
      directories[index];
    }
    
    private SetDirectoryValues(targetIndex : uint, expectedRva : uint, expectedSize : uint, inputStream : Stream) : void
    {
      def targetPosition = targetIndex * 8;
      
      _ = inputStream.Seek(targetPosition, SeekOrigin.Begin);
      
      // Set the RVA and Size at the target index
      def inputStreamWriter = BinaryWriter(inputStream);
      inputStreamWriter.Write(expectedRva);
      inputStreamWriter.Write(expectedSize);
      
      // Reset the stream position
      _ = inputStream.Seek(0, SeekOrigin.Begin);
    }
    
    private GetSampleDataDirectories() : array[DataDirectory]
    {
      def data = GetSampleDataDirectoryHeaderBytes();
      def inputStream = MemoryStream(data); 
      def reader = DataDirectoryReader();
      def directories = reader.Read(15, inputStream).ToArray();
      
      directories;
    }
    
    private TestDataDirectoryRead(targetIndex : uint, expectedRva : uint, expectedSize : uint) : void
    {
      def data = GetSampleDataDirectoryHeaderBytes();
      def inputStream = MemoryStream(data);      
      
      SetDirectoryValues(targetIndex, expectedRva, expectedSize, inputStream);
      
      def reader = DataDirectoryReader();
      def directories = reader.Read(15, inputStream).ToArray();
      def directory = directories[targetIndex :> int];
      
      assert directory.Rva equals expectedRva otherwiseprint "Invalid Rva";
      assert directory.Size equals expectedSize otherwiseprint "Invalid Size";
    }
    
    private TestDataDirectoryRead(targetIndex : uint) : void
    {
      def expectedRva : uint = 0xFEED;
      def expectedSize : uint = 0x42;
            
      TestDataDirectoryRead(targetIndex, expectedRva, expectedSize);
    }
    
    private GetSampleDataDirectoryHeaderBytes() : array[byte]
    {
      array[
        // Export Directory 
        //    RVA = 0
	    0x00 : byte, 0x00, 0x00, 0x00, 	    
	    //    Size = 0
	    0x00, 0x00, 0x00, 0x00, 	 
	    
	    // Import Directory
	    //    RVA = 0x217C	    
	    0x7C, 0x21, 0x00, 0x00, 
	    //    Size = 0x4F
	    0x4F, 0x00, 0x00, 0x00,
	    
	    // Resource Directory
	    //    RVA = 0
	    0x00, 0x00, 0x00, 0x00, 
	    //    Size = 0
	    0x00, 0x00, 0x00, 0x00, 
	    
	    // Exception Directory
	    //    RVA = 0
	    0x00, 0x00, 0x00, 0x00, 
	    //    Size = 0
	    0x00, 0x00, 0x00, 0x00,
	    
	    // Security Directory
	    //    RVA = 0
	    0x00, 0x00, 0x00, 0x00, 
	    //    Size = 0
	    0x00, 0x00, 0x00, 0x00, 
	    
	    // Relocation Directory
	    //    RVA = 0x4000
	    0x00, 0x40, 0x00, 0x00, 
	    //    Size = 0xC
	    0x0C, 0x00, 0x00, 0x00,
	    
	    // Debug Directory
	    //    RVA = 0
	    0x00, 0x00, 0x00, 0x00, 
	    //    Size = 0
	    0x00, 0x00, 0x00, 0x00, 
	    
	    // Architecture Directory
	    //    RVA = 0
	    0x00, 0x00, 0x00, 0x00, 
	    //    Size = 0
	    0x00, 0x00, 0x00, 0x00,
	    
	    // Reserved
	    0x00, 0x00, 0x00, 0x00, 
	    0x00, 0x00, 0x00, 0x00, 
	    
	    // TLS Directory
	    //    RVA = 0
	    0x00, 0x00, 0x00, 0x00, 
	    //    Size = 0
	    0x00, 0x00, 0x00, 0x00,
	    
	    // Configuration Directory
	    //    RVA = 0
	    0x00, 0x00, 0x00, 0x00, 
	    //    Size = 0
	    0x00, 0x00, 0x00, 0x00, 
	    
	    // Bound Import Directory
	    //    RVA = 0
	    0x00, 0x00, 0x00, 0x00,
	    //    Size = 0
	    0x00, 0x00, 0x00, 0x00,
	    
	    // IAT Directory
	    //    RVA = 0x2000
	    0x00, 0x20, 0x00, 0x00, 
	    //    Size = 8
	    0x08, 0x00, 0x00, 0x00, 
	    
	    // Delay Import Directory
	    //    RVA = 0
	    0x00, 0x00, 0x00, 0x00, 
	    //    Size = 0
	    0x00, 0x00, 0x00, 0x00,
	    
	    // CLR Directory
	    //    RVA = 0x2008
	    0x08, 0x20, 0x00, 0x00, 
	    
	    //    Size = 0x48
	    0x48, 0x00, 0x00, 0x00
      ];
    }       
    
    private GetSampleDataDirectoryBytes() : array[byte]
    {
      array[
            // RVA = 0x2008
            0x08 : byte, 0x20, 0x00, 0x00, 
            // Size = 0x48
            0x48, 0x00, 0x00, 0x00
           ];
    } 
  }
}
