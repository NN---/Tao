using Nemerle;
using Nemerle.Collections;
using Nemerle.Extensions;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

using Tao;
using Tao.Interfaces;
using Tao.Metadata;

using Tao.Metadata.Tables;
using Tao.Metadata.Tables.Rows;
using Tao.Metadata.Instructions;
using Tao.Metadata.Instructions.Operands;

using Tests.Macros;
namespace Tests
{
    public class OperandConversionTests
    {
        public ShouldConvertBranchInstructionTargetsIntoStreamOffsets() : void
        {
            def mapper = InstructionMapper();
            def branchTarget = Instruction(0, OpCodes.Nop, null);
            def branchInstruction = Instruction(1 : uint, OpCodes.Br, branchTarget);
            
            // Map the instructions in order to generate the expected offset
            def instructionMap = mapper.CreateMap(array[branchTarget, branchInstruction]);            
            def expectedOffset = branchInstruction.GetRelativeOffsetTo(branchTarget, instructionMap);
            
            def converter = BranchInstructionOperandConverter(instructionMap, branchInstruction);
            converter.ConvertOperand(branchInstruction.Operand).ShouldBeEqualTo(expectedOffset, "Wrong operand value");
        }
        public ShouldConvertStringOperandsIntoUserStringOffsets() : void
        {
            def userStringMap = MockStringMap(12345 : uint, "Foo");
            
            def converter = UserStringOperandConverter(userStringMap);
            converter.ConvertOperand("Foo").ShouldBeEqualTo(12345 : uint, "Wrong Operand Value");
        }
        public ShouldConvertSwitchTargetInstructionsIntoAnArrayOfSwitchTargetOffsets() : void
        {
            def mapper = InstructionMapper();
            def branchTargets = List.[IInstruction]();
            
            // Build the list of jump targets
            def instructions = List.[IInstruction]();
            for(mutable i = 0; i < 100; i++)
            {
                def instruction = Instruction(0, OpCodes.Nop, null);
                branchTargets.Add(instruction);
                instructions.Add(instruction);
            }
            
            // Pass the jump targets to the switch instruction
            def switchInstruction = Instruction(0, OpCodes.Switch, branchTargets.ToArray());
            instructions.Add(switchInstruction);
            
            // Generate the map
            def map = mapper.CreateMap(instructions.ToArray());
            
            def converter = SwitchInstructionOperandConverter(map, switchInstruction);
            def offsets = converter.ConvertOperand(branchTargets.ToArray()) :> array[int];
            
            for(mutable i = 0; i < branchTargets.Count; i++)
            {
                def target = branchTargets[i];
                def expectedOffset = switchInstruction.GetRelativeOffsetTo(target, map);
                offsets[i].ShouldBeEqualTo(expectedOffset, "Wrong operand value");
            }
        }
    }
}
