using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

using Tao;
using Tao.Interfaces;
using Tao.Metadata;

using Tao.Metadata.Tables;
using Tao.Metadata.Tables.Rows;
using Tao.Metadata.Instructions;
using Tao.Metadata.Instructions.Operands;

using Tests.Macros;
namespace Tests
{
    public class OperandConversionTests
    {
        public ShouldConvertBranchInstructionTargetsIntoStreamOffsets() : void
        {
            def mapper = InstructionMapper();
            def branchTarget = Instruction(0, OpCodes.Nop, null);
            def branchInstruction = Instruction(1 : uint, OpCodes.Br, branchTarget);
            
            // Map the instructions in order to generate the expected offset
            def instructionMap = mapper.CreateMap(array[branchTarget, branchInstruction]);            
            def expectedOffset = branchInstruction.GetRelativeOffsetTo(branchTarget, instructionMap);
            
            def converter = BranchInstructionOperandConverter(instructionMap, branchInstruction);
            converter.ConvertOperand(branchInstruction.Operand).ShouldBeEqualTo(expectedOffset, "Wrong operand value");
        }
        public stub ShouldConvertStringOperandsIntoUserStringOffsets() : void
        {
        }
        public stub ShouldConvertSwitchTargetInstructionsIntoAnArrayOfSwitchTargetOffsets() : void
        {
        }
    }
}
