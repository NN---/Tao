using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

using Tao;
using Tao.Interfaces;
using Tao.Metadata;

using Tao.Metadata.Tables;
using Tao.Metadata.Tables.Rows;
using Tao.Metadata.Instructions;
using Tao.Metadata.Instructions.Operands;

using Tests.Macros;

namespace Tests
{
    public class InstructionReadTests
    {
        public ShouldReadInstructionOffset() : void
        {
            TestRead(instruction => instruction.Offset.ShouldBeEqualTo(0x1 : uint, "Wrong Instruction Offset"), 1);
        }        

        public ShouldReadCorrectOpCode() : void 
        {
            TestRead(instruction => instruction.OpCode.ShouldBeEqualTo(OpCodes.Ldstr, "Wrong Instruction OpCode"), 1);
        }

        public ShouldReadCorrectOperand() : void 
        {
            TestRead(instruction => instruction.Operand.ShouldBeEqualTo("Hello, World!", "Wrong Instruction Operand"), 1);
        }

        public ShouldResolveBranchInstructionTargets() : void
        {
            def testInstructions(instructions : array[IInstruction]) : void
            {
                def expectedOperand = instructions[13];

                def targetIndex = 3;
                def targetInstruction = instructions[targetIndex];
                (targetInstruction.Operand is IInstruction).ShouldBeTrue("The target operand must be an instruction since the instruction itself is a branch instruction");
                targetInstruction.Operand.ShouldBeEqualTo(expectedOperand, "Incorrect branch target operand");
            }
            TestInstructionRead("Program", "Main", @"..\..\SampleBinaries\SampleForLoop.exe", testInstructions);
        }      
        public ShouldResolveTargetBranchInstructionsFromSwitchInstruction() : void
        {
            def testInstructions(instructions : array[IInstruction]) : void
            {
                // Find the switch instruction
                def switchInstruction = instructions[1];
                switchInstruction.OpCode.ShouldBeEqualTo(OpCodes.Switch, "There should be a switch OpCode here");
                (switchInstruction.Operand is IEnumerable[IInstruction]).ShouldBeTrue("Wrong Operand Type");
                
                def targets = switchInstruction.Operand :> IEnumerable[IInstruction];
                def jumpTargets = targets.ToArray();
                
                // Match the jump targets
                jumpTargets[0].Operand.ShouldBeEqualTo("are no bananas", "Wrong Operand Value");
                jumpTargets[1].Operand.ShouldBeEqualTo("is one banana", "Wrong Operand Value");
                jumpTargets[2].Operand.ShouldBeEqualTo("are two bananas", "Wrong Operand Value");
                jumpTargets[3].Operand.ShouldBeEqualTo("are three bananas", "Wrong Operand Value");
                jumpTargets[4].Operand.ShouldBeEqualTo("are four bananas", "Wrong Operand Value");
            }
            
            def targetTypeName = "SampleClassWithSwitchInstruction";
            def targetMethodName = "SwitchMethod";
            def imageFile = @"..\..\SampleBinaries\SampleSwitchAssembly.dll";
            TestInstructionRead(targetTypeName, targetMethodName, imageFile, testInstructions);
        }
        private TestRead(testInstruction : IInstruction -> void, index : int) : void        
        {
            def doTest(instruction : IInstruction) : void
            {
                testInstruction(instruction);
            }

            TestRead(doTest, instructions => instructions[index]);
        }
        private TestRead(testInstruction : IInstruction-> void, selector : array[IInstruction] -> IInstruction, ) : void
        {
            def testInstructions(instructions : array[IInstruction]) : void
            {
                def firstInstruction = selector(instructions);
                testInstruction(firstInstruction);
            }

            TestRead(testInstructions);
        }
        private TestRead(testInstructions : array[IInstruction] -> void) : void
        {
            def targetTypeName = "Program";
            def targetMethodName = "Main";

            def imageFile = @"..\..\SampleBinaries\HelloWorld.exe";

            TestInstructionRead(targetTypeName, targetMethodName, imageFile, testInstructions);
        }

        private TestInstructionRead(targetTypeName : string, targetMethodName : string, imageFile : string, testInstructions : array[IInstruction] -> void) : void
        {
            def image = Image.ReadFrom(imageFile);
            def root = image.GetMetadataRoot();

            def tableStream = root.GetTablesHeap();
            def tableHeap = TablesHeap();
            tableHeap.ReadFrom(tableStream);

            // Find the target type
            def stringHeap = root.GetStringHeap();
            def userStringHeap = root.Heaps["#US"];

            def targetTypeRow = tableHeap.GetTypeRow(targetTypeName, stringHeap) : TypeDefRow;
            targetTypeRow.ShouldBeNotNull("Unable to find the target type");

            // Find the target method
            def methodRows = targetTypeRow.GetMethodDefRows(tableHeap);
            def targetRow = methodRows.Where(m => m.Name.ToString(stringHeap) == targetMethodName).First();

            def body = targetRow.ReadMethodBodyFrom(image);            

            // Execute the reader and check the results
            def boundReader = BoundStringReader(UserStringHeapReader(), userStringHeap);
            def instructionStream = MemoryStream(body.Bytes);
            def reader = InstructionReader(IndividualInstructionReader(boundReader));
            def instructions = reader.Read(instructionStream);
            testInstructions(instructions);
        }
    }
}
