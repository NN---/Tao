using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

using Tao;
using Tao.Interfaces;
using Tao.Metadata;

using Tao.Metadata.Tables;
using Tao.Metadata.Tables.Rows;
using Tao.Metadata.Instructions;
using Tao.Metadata.Instructions.Operands;

using Tests.Macros;
namespace Tests
{
	public class InstructionWriteTests
	{
		public stub ShouldBeAbleToWriteSingleInstruction() : void
		{			
		}
		public ShouldBeAbleToWriteMultipleInstructions() : void
		{
		    def image = Image.ReadFrom("FizzBuzz.dll");
            def root = image.GetMetadataRoot();
            def tableStream = root.GetTablesHeap();

            def tableHeap = TablesHeap();
            tableHeap.ReadFrom(tableStream);

            // Find the main method
            def stringHeap = root.GetStringHeap();
            def methodTable = tableHeap.GetTable.[MethodDefTable]();
            def rows = methodTable.Rows;

            def methodRow = rows.First(r => r.Name.ToString(stringHeap) == "Main");
            def rva = methodRow.Rva;

            // Read the instructions from the method body
            def methodStream = image.GetDataAt(rva);
            def reader = MethodBodyReader();
            def body = reader.Read(methodStream);
            def userStringHeap = root.GetUserStringHeap();
            
            // Hook the StringMapBuilder into the reader
            def map : IDictionary[string, uint] = Dictionary();
            def builder = StringMapBuilder(InstructionInterpreter(), map);
            def instructionReader = InstructionReader(IndividualInstructionReader(builder));
            def methodBytes = MemoryStream(body.Bytes);
            def instructions = instructionReader.Read(methodBytes, userStringHeap);
            
            def endPosition = methodBytes.Position :> uint;
            
            // Use the instruction map to map the stream
            // and compare the individual instruction blobs
            // to the actual output
            def instructionMapper = InstructionMapper();
            def instructionMap = instructionMapper.CreateMap(instructions);
            
            def instructionCount = instructionMap.Count;
            mutable index = 0;
            
            def keys = instructionMap.Keys.ToArray();
            foreach(instruction in keys)
            {
                def startPosition = instructionMap[instruction];
                mutable instructionEndPosition : uint = endPosition;
                when(index < instructionCount)
                {
                    def nextInstruction = keys[index];
                    instructionEndPosition = instructionMap[nextInstruction];
                }
                
                // Determine the expected instruction bytes
                def byteCount = (instructionEndPosition - startPosition) :> int;
                def expectedBytes = methodStream.ReadBytes(byteCount, startPosition :> int);
                
                // Write the actual bytes
                def actualBytes = MemoryStream();
                def stringMap = StringMap(UserStringHeapWriter(), map);
                
                throw NotImplementedException("TODO: Finish this test by inserting the writer call here");
                            
                // The two streams should be the same
                expectedBytes.ShouldMatch(actualBytes.ToArray());
                index++;
            }           
		}
	}
}
