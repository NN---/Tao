using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

using Tao;
using Tao.Interfaces;
using Tao.Metadata;
using Tao.Metadata.Tables;
using Tao.Metadata.Instructions;
using Tao.Metadata.Instructions.Operands;

using Tests.Macros;
namespace Tests
{
    public class OperandDecodingTests
    {
        public ShouldReadShortInlineVarOperand() : void
        {
            TestRead.[ShortInlineVarOperandReader, byte](42 : byte, (value, writer) => writer.Write(value));
        }
        public ShouldReadShortInlineIOperand() : void 
        {
            TestRead.[ShortInlineIOperandReader, sbyte](-42 : sbyte, (value, writer) => writer.Write(value));
        }               

        public ShouldReadInlineIOperand() : void
        {
            TestRead.[InlineIOperandReader, int](int.MaxValue : int, (value, writer) => writer.Write(value));
        }

        public ShouldReadInline8Operand() : void
        {
            TestRead.[InlineI8OperandReader, long](long.MaxValue : long, (value, writer) => writer.Write(value));
        }

        public ShouldReadShortInlineROperand() : void 
        {   
            TestRead.[InlineROperandReader, System.Single](3.14 :> float, (value, writer) => writer.Write(value));
        }

        public ShouldReadInlineR8Operand() : void
        {
            TestRead.[InlineR8OperandReader, System.Double](3.14, (value, writer) => writer.Write(value));
        }
        
        public ShouldReadInlineMethodOperand() : void
        {
            TestRead.[InlineMethodOperandReader](42, TableId.MethodDef, TableId.MemberRef, TableId.MethodSpec);
        }
        public ShouldReadInlineSigOperand() : void
        {
            TestRead.[InlineSigOperandReader](42, TableId.StandAloneSig);
        }
        public ShouldReadShortInlineBrTargetOperand() : void
        {
            TestRead.[ShortInlineBrOperandReader, sbyte](42, (value, writer) => writer.Write(value));
        }
        public ShouldReadInlineBrTargetOperand() : void
        {
            TestRead.[InlineBrOperandReader, int](42, (value, writer) => writer.Write(value));
        }
        public ShouldReadInlineSwitchOperand() : void
        {
            // Create the operand bytes
            def inputStream = MemoryStream();            
            def writer = BinaryWriter(inputStream);
            
            // Write the number of elements
            writer.Write(3 : uint);
            
            // Write the three offsets
            writer.Write(-3 : int);
            writer.Write(-2 : int);
            writer.Write(-1 : int);
            
            inputStream.Seek(0);
            def reader = InlineSwitchOperandReader();
            def results = reader.ReadOperandFrom(inputStream).ToArray();
            
            results[0].ShouldBeEqualTo(-3, "Wrong Element Value");
            results[1].ShouldBeEqualTo(-2, "Wrong Element Value");
            results[2].ShouldBeEqualTo(-1, "Wrong Element Value");
        }
        public ShouldReadInlineTypeOperand() : void
        {
            TestRead.[InlineTypeOperandReader](42, TableId.TypeDef, TableId.TypeRef, TableId.TypeSpec);
        }
        public ShouldReadInlineStringOperand() : void
        {
            TestRead.[InlineStringOperandReader, uint](0x99 : uint, (value, writer) => writer.Write(0x70000099 : uint));
        }
        public ShouldReadInlineFieldOperand() : void
        {
            TestRead.[InlineFieldOperandReader](42, TableId.Field, TableId.MemberRef);
        }
        public ShouldReadInlineTokenOperand() : void
        {
            TestRead.[InlineTokenOperandReader](42, TableId.MethodDef, TableId.MemberRef, TableId.MethodSpec, TableId.Field, TableId.TypeDef, TableId.TypeRef, TableId.TypeSpec);
        }
        public ShouldReadInlineVarOperand() : void 
        {
            TestRead.[InlineVarOperandReader, ushort](ushort.MaxValue, (value, writer) => writer.Write(value));
        }

        private TestRead[TReader](row : uint, params tableIds : array[TableId]) : void
            where TReader : new(), class, IOperandReader
        {
            foreach(tableId in tableIds)
            {
                TestRead.[TReader](tableId, row);
            }
        }
        
        private TestRead[TReader](tableId : TableId, row : uint) : void
            where TReader : new(), class, IOperandReader
        {
            TestRead.[TReader](RowReference(tableId, row));
        }
        private TestRead[TReader](rowRef : RowReference) : void
            where TReader : new(), class, IOperandReader
        {
            TestRead.[TReader, RowReference](rowRef, WriteRowRef);
        }
        
        private WriteRowRef(rowRef : RowReference, writer: BinaryWriter) : void
        {
            def encoder = SimpleTokenEncoder();     
            def token = encoder.Encode(rowRef.TableId, rowRef.Row);
            writer.Write(token);
        }
        
        private TestRead[TReader, TValue](value : TValue, writeValue : TValue * BinaryWriter -> void) : void
            where TReader : new(), class, IOperandReader
        {            
            def inputStream = MemoryStream();            
            def writer = BinaryWriter(inputStream);
            writeValue(value, writer);

            // Reset the stream pointer 
            _ = inputStream.Seek(0, SeekOrigin.Begin);
            TestRead.[TReader](value, inputStream);
        }

        private TestRead[TReader](expectedValue : object, inputStream : Stream) : void
            where TReader : new(), class, IOperandReader
        {                       
            def reader = TReader();
            def result = reader.ReadOperandFrom(inputStream);

            result.ShouldBeEqualTo(expectedValue, "Wrong operand value");            
        }
    }
}
