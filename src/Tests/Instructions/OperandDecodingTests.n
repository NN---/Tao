using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

using Tao;
using Tao.Interfaces;
using Tao.Metadata;
using Tao.Metadata.Instructions;
using Tao.Metadata.Instructions.Operands;

using Tests.Macros;
namespace Tests
{
    public class OperandDecodingTests
    {
        public ShouldReadShortInlineVarOperand() : void
        {
            TestRead.[ShortInlineVarOperandReader, byte](42 : byte, (value, writer) => writer.Write(value));
        }
        public ShouldReadShortInlineIOperand() : void 
        {
            TestRead.[ShortInlineIOperandReader, sbyte](-42 : sbyte, (value, writer) => writer.Write(value));
        }               

        public ShouldReadInlineIOperand() : void
        {
            TestRead.[InlineIOperandReader, int](int.MaxValue : int, (value, writer) => writer.Write(value));
        }

        public ShouldReadInline8Operand() : void
        {
            TestRead.[InlineI8OperandReader, long](long.MaxValue : long, (value, writer) => writer.Write(value));
        }

        public ShouldReadShortInlineROperand() : void 
        {   
            TestRead.[InlineROperandReader, System.Single](3.14 :> float, (value, writer) => writer.Write(value));
        }

        public stub ShouldReadInlineR8Operand() : void
        {
            TestRead.[InlineR8OperandReader, System.Double](3.14, (value, writer) => writer.Write(value));
        }
        
        public stub ShouldReadInlineMethodOperand() : void
        {
        }
        public stub ShouldReadInlineSigOperand() : void
        {
        }
        public stub ShouldReadShortInlineBrTargetOperand() : void
        {
        }
        public stub ShouldReadInlineBrTargetOperand() : void
        {
        }
        public stub ShouldreadInlineSwitchOperand() : void
        {
        }
        public stub ShouldReadInlineTypeOperand() : void
        {
        }
        public stub ShouldReadInlineStringOperand() : void
        {
        }
        public stub ShouldReadInlineFieldOperand() : void
        {
        }
        public stub ShouldReadInlineTokenOperand() : void
        {
        }
        public stub ShouldReadInlineVarOperand() : void 
        {
        }

        private TestRead[TReader, TValue](value : TValue, writeValue : TValue * BinaryWriter -> void) : void
            where TReader : new(), class, IOperandReader
        {            
            def inputStream = MemoryStream();            
            def writer = BinaryWriter(inputStream);
            writeValue(value, writer);

            // Reset the stream pointer 
            _ = inputStream.Seek(0, SeekOrigin.Begin);
            TestRead.[TReader](value, inputStream);
        }

        private TestRead[TReader](expectedValue : object, inputStream : Stream) : void
            where TReader : new(), class, IOperandReader
        {                       
            def reader = TReader();
            def result = reader.ReadOperandFrom(inputStream);

            result.ShouldBeEqualTo(expectedValue, "Wrong operand value");            
        }
    }
}
