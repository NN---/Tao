using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

using Tao;
using Tao.Interfaces;
using Tao.Metadata;
using Tao.Metadata.Instructions;

using Tests.Macros;
namespace Tests
{
    public class OpCodeDecodingTests
    {
        public ShouldDecodeNopInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Nop, "Nop", array[0x0 : byte]);
        }
        public ShouldDecodeBreakInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Break, "Break", array[0x1 : byte]);
        }
        public ShouldDecodeLdarg_0Instruction() : void 
        {
            TestOpCodeRead(OpCodes.Ldarg_0, "Ldarg_0", array[0x2 : byte]);
        }
        public ShouldDecodeLdarg_1Instruction() : void 
        {
            TestOpCodeRead(OpCodes.Ldarg_1, "Ldarg_1", array[0x3 : byte]);
        }
        public ShouldDecodeLdarg_2Instruction() : void 
        {
            TestOpCodeRead(OpCodes.Ldarg_2, "Ldarg_2", array[0x4 : byte]);
        }
        public ShouldDecodeLdarg_3Instruction() : void 
        {
            TestOpCodeRead(OpCodes.Ldarg_3, "Ldarg_3", array[0x5 : byte]);
        }
        public ShouldDecodeLdloc_0Instruction() : void 
        {
            TestOpCodeRead(OpCodes.Ldloc_0, "Ldloc_0", array[0x6 : byte]);
        }
        public ShouldDecodeLdloc_1Instruction() : void 
        {
            TestOpCodeRead(OpCodes.Ldloc_1, "Ldloc_1", array[0x7 : byte]);
        }
        public ShouldDecodeLdloc_2Instruction() : void 
        {
            TestOpCodeRead(OpCodes.Ldloc_2, "Ldloc_2", array[0x8 : byte]);
        }
        public ShouldDecodeLdloc_3Instruction() : void 
        {
            TestOpCodeRead(OpCodes.Ldloc_3, "Ldloc_3", array[0x9 : byte]);
        }
        public ShouldDecodeStloc_0Instruction() : void 
        {
            TestOpCodeRead(OpCodes.Stloc_0, "Stloc_0", array[0xa : byte]);
        }
        public ShouldDecodeStloc_1Instruction() : void 
        {
            TestOpCodeRead(OpCodes.Stloc_1, "Stloc_1", array[0xb : byte]);
        }
        public ShouldDecodeStloc_2Instruction() : void 
        {
            TestOpCodeRead(OpCodes.Stloc_2, "Stloc_2", array[0xc : byte]);
        }
        public ShouldDecodeStloc_3Instruction() : void 
        {
            TestOpCodeRead(OpCodes.Stloc_3, "Stloc_3", array[0xd : byte]);
        }
        public ShouldDecodeLdarg_SInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Ldarg_S, "Ldarg_S", array[0xe : byte]);
        }
        public ShouldDecodeLdarga_SInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Ldarga_S, "Ldarga_S", array[0xf : byte]);
        }
        public ShouldDecodeStarg_SInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Starg_S, "Starg_S", array[0x10 : byte]);
        }
        public ShouldDecodeLdloc_SInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Ldloc_S, "Ldloc_S", array[0x11 : byte]);
        }
        public ShouldDecodeLdloca_SInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Ldloca_S, "Ldloca_S", array[0x12 : byte]);
        }
        public ShouldDecodeStloc_SInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Stloc_S, "Stloc_S", array[0x13 : byte]);
        }
        public ShouldDecodeLdnullInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Ldnull, "Ldnull", array[0x14 : byte]);
        }
        public ShouldDecodeLdc_I4_M1Instruction() : void 
        {
            TestOpCodeRead(OpCodes.Ldc_I4_M1, "Ldc_I4_M1", array[0x15 : byte]);
        }
        public ShouldDecodeLdc_I4_0Instruction() : void 
        {
            TestOpCodeRead(OpCodes.Ldc_I4_0, "Ldc_I4_0", array[0x16 : byte]);
        }
        public ShouldDecodeLdc_I4_1Instruction() : void 
        {
            TestOpCodeRead(OpCodes.Ldc_I4_1, "Ldc_I4_1", array[0x17 : byte]);
        }
        public ShouldDecodeLdc_I4_2Instruction() : void 
        {
            TestOpCodeRead(OpCodes.Ldc_I4_2, "Ldc_I4_2", array[0x18 : byte]);
        }
        public ShouldDecodeLdc_I4_3Instruction() : void 
        {
            TestOpCodeRead(OpCodes.Ldc_I4_3, "Ldc_I4_3", array[0x19 : byte]);
        }
        public ShouldDecodeLdc_I4_4Instruction() : void 
        {
            TestOpCodeRead(OpCodes.Ldc_I4_4, "Ldc_I4_4", array[0x1a : byte]);
        }
        public ShouldDecodeLdc_I4_5Instruction() : void 
        {
            TestOpCodeRead(OpCodes.Ldc_I4_5, "Ldc_I4_5", array[0x1b : byte]);
        }
        public ShouldDecodeLdc_I4_6Instruction() : void 
        {
            TestOpCodeRead(OpCodes.Ldc_I4_6, "Ldc_I4_6", array[0x1c : byte]);
        }
        public ShouldDecodeLdc_I4_7Instruction() : void 
        {
            TestOpCodeRead(OpCodes.Ldc_I4_7, "Ldc_I4_7", array[0x1d : byte]);
        }
        public ShouldDecodeLdc_I4_8Instruction() : void 
        {
            TestOpCodeRead(OpCodes.Ldc_I4_8, "Ldc_I4_8", array[0x1e : byte]);
        }
        public ShouldDecodeLdc_I4_SInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Ldc_I4_S, "Ldc_I4_S", array[0x1f : byte]);
        }
        public ShouldDecodeLdc_I4Instruction() : void 
        {
            TestOpCodeRead(OpCodes.Ldc_I4, "Ldc_I4", array[0x20 : byte]);
        }
        public ShouldDecodeLdc_I8Instruction() : void 
        {
            TestOpCodeRead(OpCodes.Ldc_I8, "Ldc_I8", array[0x21 : byte]);
        }
        public ShouldDecodeLdc_R4Instruction() : void 
        {
            TestOpCodeRead(OpCodes.Ldc_R4, "Ldc_R4", array[0x22 : byte]);
        }
        public ShouldDecodeLdc_R8Instruction() : void 
        {
            TestOpCodeRead(OpCodes.Ldc_R8, "Ldc_R8", array[0x23 : byte]);
        }
        public ShouldDecodeDupInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Dup, "Dup", array[0x25 : byte]);
        }
        public ShouldDecodePopInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Pop, "Pop", array[0x26 : byte]);
        }
        public ShouldDecodeJmpInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Jmp, "Jmp", array[0x27 : byte]);
        }
        public ShouldDecodeCallInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Call, "Call", array[0x28 : byte]);
        }
        public ShouldDecodeCalliInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Calli, "Calli", array[0x29 : byte]);
        }
        public ShouldDecodeRetInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Ret, "Ret", array[0x2a : byte]);
        }
        public ShouldDecodeBr_SInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Br_S, "Br_S", array[0x2b : byte]);
        }
        public ShouldDecodeBrfalse_SInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Brfalse_S, "Brfalse_S", array[0x2c : byte]);
        }
        public ShouldDecodeBrtrue_SInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Brtrue_S, "Brtrue_S", array[0x2d : byte]);
        }
        public ShouldDecodeBeq_SInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Beq_S, "Beq_S", array[0x2e : byte]);
        }
        public ShouldDecodeBge_SInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Bge_S, "Bge_S", array[0x2f : byte]);
        }
        public ShouldDecodeBgt_SInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Bgt_S, "Bgt_S", array[0x30 : byte]);
        }
        public ShouldDecodeBle_SInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Ble_S, "Ble_S", array[0x31 : byte]);
        }
        public ShouldDecodeBlt_SInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Blt_S, "Blt_S", array[0x32 : byte]);
        }
        public ShouldDecodeBne_Un_SInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Bne_Un_S, "Bne_Un_S", array[0x33 : byte]);
        }
        public ShouldDecodeBge_Un_SInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Bge_Un_S, "Bge_Un_S", array[0x34 : byte]);
        }
        public ShouldDecodeBgt_Un_SInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Bgt_Un_S, "Bgt_Un_S", array[0x35 : byte]);
        }
        public ShouldDecodeBle_Un_SInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Ble_Un_S, "Ble_Un_S", array[0x36 : byte]);
        }
        public ShouldDecodeBlt_Un_SInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Blt_Un_S, "Blt_Un_S", array[0x37 : byte]);
        }
        public ShouldDecodeBrInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Br, "Br", array[0x38 : byte]);
        }
        public ShouldDecodeBrfalseInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Brfalse, "Brfalse", array[0x39 : byte]);
        }
        public ShouldDecodeBrtrueInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Brtrue, "Brtrue", array[0x3a : byte]);
        }
        public ShouldDecodeBeqInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Beq, "Beq", array[0x3b : byte]);
        }
        public ShouldDecodeBgeInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Bge, "Bge", array[0x3c : byte]);
        }
        public ShouldDecodeBgtInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Bgt, "Bgt", array[0x3d : byte]);
        }
        public ShouldDecodeBleInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Ble, "Ble", array[0x3e : byte]);
        }
        public ShouldDecodeBltInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Blt, "Blt", array[0x3f : byte]);
        }
        public ShouldDecodeBne_UnInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Bne_Un, "Bne_Un", array[0x40 : byte]);
        }
        public ShouldDecodeBge_UnInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Bge_Un, "Bge_Un", array[0x41 : byte]);
        }
        public ShouldDecodeBgt_UnInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Bgt_Un, "Bgt_Un", array[0x42 : byte]);
        }
        public ShouldDecodeBle_UnInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Ble_Un, "Ble_Un", array[0x43 : byte]);
        }
        public ShouldDecodeBlt_UnInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Blt_Un, "Blt_Un", array[0x44 : byte]);
        }
        public ShouldDecodeSwitchInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Switch, "Switch", array[0x45 : byte]);
        }
        public ShouldDecodeLdind_I1Instruction() : void 
        {
            TestOpCodeRead(OpCodes.Ldind_I1, "Ldind_I1", array[0x46 : byte]);
        }
        public ShouldDecodeLdind_U1Instruction() : void 
        {
            TestOpCodeRead(OpCodes.Ldind_U1, "Ldind_U1", array[0x47 : byte]);
        }
        public ShouldDecodeLdind_I2Instruction() : void 
        {
            TestOpCodeRead(OpCodes.Ldind_I2, "Ldind_I2", array[0x48 : byte]);
        }
        public ShouldDecodeLdind_U2Instruction() : void 
        {
            TestOpCodeRead(OpCodes.Ldind_U2, "Ldind_U2", array[0x49 : byte]);
        }
        public ShouldDecodeLdind_I4Instruction() : void 
        {
            TestOpCodeRead(OpCodes.Ldind_I4, "Ldind_I4", array[0x4a : byte]);
        }
        public ShouldDecodeLdind_U4Instruction() : void 
        {
            TestOpCodeRead(OpCodes.Ldind_U4, "Ldind_U4", array[0x4b : byte]);
        }
        public ShouldDecodeLdind_I8Instruction() : void 
        {
            TestOpCodeRead(OpCodes.Ldind_I8, "Ldind_I8", array[0x4c : byte]);
        }
        public ShouldDecodeLdind_IInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Ldind_I, "Ldind_I", array[0x4d : byte]);
        }
        public ShouldDecodeLdind_R4Instruction() : void 
        {
            TestOpCodeRead(OpCodes.Ldind_R4, "Ldind_R4", array[0x4e : byte]);
        }
        public ShouldDecodeLdind_R8Instruction() : void 
        {
            TestOpCodeRead(OpCodes.Ldind_R8, "Ldind_R8", array[0x4f : byte]);
        }
        public ShouldDecodeLdind_RefInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Ldind_Ref, "Ldind_Ref", array[0x50 : byte]);
        }
        public ShouldDecodeStind_RefInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Stind_Ref, "Stind_Ref", array[0x51 : byte]);
        }
        public ShouldDecodeStind_I1Instruction() : void 
        {
            TestOpCodeRead(OpCodes.Stind_I1, "Stind_I1", array[0x52 : byte]);
        }
        public ShouldDecodeStind_I2Instruction() : void 
        {
            TestOpCodeRead(OpCodes.Stind_I2, "Stind_I2", array[0x53 : byte]);
        }
        public ShouldDecodeStind_I4Instruction() : void 
        {
            TestOpCodeRead(OpCodes.Stind_I4, "Stind_I4", array[0x54 : byte]);
        }
        public ShouldDecodeStind_I8Instruction() : void 
        {
            TestOpCodeRead(OpCodes.Stind_I8, "Stind_I8", array[0x55 : byte]);
        }
        public ShouldDecodeStind_R4Instruction() : void 
        {
            TestOpCodeRead(OpCodes.Stind_R4, "Stind_R4", array[0x56 : byte]);
        }
        public ShouldDecodeStind_R8Instruction() : void 
        {
            TestOpCodeRead(OpCodes.Stind_R8, "Stind_R8", array[0x57 : byte]);
        }
        public ShouldDecodeAddInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Add, "Add", array[0x58 : byte]);
        }
        public ShouldDecodeSubInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Sub, "Sub", array[0x59 : byte]);
        }
        public ShouldDecodeMulInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Mul, "Mul", array[0x5a : byte]);
        }
        public ShouldDecodeDivInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Div, "Div", array[0x5b : byte]);
        }
        public ShouldDecodeDiv_UnInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Div_Un, "Div_Un", array[0x5c : byte]);
        }
        public ShouldDecodeRemInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Rem, "Rem", array[0x5d : byte]);
        }
        public ShouldDecodeRem_UnInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Rem_Un, "Rem_Un", array[0x5e : byte]);
        }
        public ShouldDecodeAndInstruction() : void 
        {
            TestOpCodeRead(OpCodes.And, "And", array[0x5f : byte]);
        }
        public ShouldDecodeOrInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Or, "Or", array[0x60 : byte]);
        }
        public ShouldDecodeXorInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Xor, "Xor", array[0x61 : byte]);
        }
        public ShouldDecodeShlInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Shl, "Shl", array[0x62 : byte]);
        }
        public ShouldDecodeShrInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Shr, "Shr", array[0x63 : byte]);
        }
        public ShouldDecodeShr_UnInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Shr_Un, "Shr_Un", array[0x64 : byte]);
        }
        public ShouldDecodeNegInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Neg, "Neg", array[0x65 : byte]);
        }
        public ShouldDecodeNotInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Not, "Not", array[0x66 : byte]);
        }
        public ShouldDecodeConv_I1Instruction() : void 
        {
            TestOpCodeRead(OpCodes.Conv_I1, "Conv_I1", array[0x67 : byte]);
        }
        public ShouldDecodeConv_I2Instruction() : void 
        {
            TestOpCodeRead(OpCodes.Conv_I2, "Conv_I2", array[0x68 : byte]);
        }
        public ShouldDecodeConv_I4Instruction() : void 
        {
            TestOpCodeRead(OpCodes.Conv_I4, "Conv_I4", array[0x69 : byte]);
        }
        public ShouldDecodeConv_I8Instruction() : void 
        {
            TestOpCodeRead(OpCodes.Conv_I8, "Conv_I8", array[0x6a : byte]);
        }
        public ShouldDecodeConv_R4Instruction() : void 
        {
            TestOpCodeRead(OpCodes.Conv_R4, "Conv_R4", array[0x6b : byte]);
        }
        public ShouldDecodeConv_R8Instruction() : void 
        {
            TestOpCodeRead(OpCodes.Conv_R8, "Conv_R8", array[0x6c : byte]);
        }
        public ShouldDecodeConv_U4Instruction() : void 
        {
            TestOpCodeRead(OpCodes.Conv_U4, "Conv_U4", array[0x6d : byte]);
        }
        public ShouldDecodeConv_U8Instruction() : void 
        {
            TestOpCodeRead(OpCodes.Conv_U8, "Conv_U8", array[0x6e : byte]);
        }
        public ShouldDecodeCallvirtInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Callvirt, "Callvirt", array[0x6f : byte]);
        }
        public ShouldDecodeCpobjInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Cpobj, "Cpobj", array[0x70 : byte]);
        }
        public ShouldDecodeLdobjInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Ldobj, "Ldobj", array[0x71 : byte]);
        }
        public ShouldDecodeLdstrInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Ldstr, "Ldstr", array[0x72 : byte]);
        }
        public ShouldDecodeNewobjInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Newobj, "Newobj", array[0x73 : byte]);
        }
        public ShouldDecodeCastclassInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Castclass, "Castclass", array[0x74 : byte]);
        }
        public ShouldDecodeIsinstInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Isinst, "Isinst", array[0x75 : byte]);
        }
        public ShouldDecodeConv_R_UnInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Conv_R_Un, "Conv_R_Un", array[0x76 : byte]);
        }
        public ShouldDecodeUnboxInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Unbox, "Unbox", array[0x79 : byte]);
        }
        public ShouldDecodeThrowInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Throw, "Throw", array[0x7a : byte]);
        }
        public ShouldDecodeLdfldInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Ldfld, "Ldfld", array[0x7b : byte]);
        }
        public ShouldDecodeLdfldaInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Ldflda, "Ldflda", array[0x7c : byte]);
        }
        public ShouldDecodeStfldInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Stfld, "Stfld", array[0x7d : byte]);
        }
        public ShouldDecodeLdsfldInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Ldsfld, "Ldsfld", array[0x7e : byte]);
        }
        public ShouldDecodeLdsfldaInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Ldsflda, "Ldsflda", array[0x7f : byte]);
        }
        public ShouldDecodeStsfldInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Stsfld, "Stsfld", array[0x80 : byte]);
        }
        public ShouldDecodeStobjInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Stobj, "Stobj", array[0x81 : byte]);
        }
        public ShouldDecodeConv_Ovf_I1_UnInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Conv_Ovf_I1_Un, "Conv_Ovf_I1_Un", array[0x82 : byte]);
        }
        public ShouldDecodeConv_Ovf_I2_UnInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Conv_Ovf_I2_Un, "Conv_Ovf_I2_Un", array[0x83 : byte]);
        }
        public ShouldDecodeConv_Ovf_I4_UnInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Conv_Ovf_I4_Un, "Conv_Ovf_I4_Un", array[0x84 : byte]);
        }
        public ShouldDecodeConv_Ovf_I8_UnInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Conv_Ovf_I8_Un, "Conv_Ovf_I8_Un", array[0x85 : byte]);
        }
        public ShouldDecodeConv_Ovf_U1_UnInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Conv_Ovf_U1_Un, "Conv_Ovf_U1_Un", array[0x86 : byte]);
        }
        public ShouldDecodeConv_Ovf_U2_UnInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Conv_Ovf_U2_Un, "Conv_Ovf_U2_Un", array[0x87 : byte]);
        }
        public ShouldDecodeConv_Ovf_U4_UnInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Conv_Ovf_U4_Un, "Conv_Ovf_U4_Un", array[0x88 : byte]);
        }
        public ShouldDecodeConv_Ovf_U8_UnInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Conv_Ovf_U8_Un, "Conv_Ovf_U8_Un", array[0x89 : byte]);
        }
        public ShouldDecodeConv_Ovf_I_UnInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Conv_Ovf_I_Un, "Conv_Ovf_I_Un", array[0x8a : byte]);
        }
        public ShouldDecodeConv_Ovf_U_UnInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Conv_Ovf_U_Un, "Conv_Ovf_U_Un", array[0x8b : byte]);
        }
        public ShouldDecodeBoxInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Box, "Box", array[0x8c : byte]);
        }
        public ShouldDecodeNewarrInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Newarr, "Newarr", array[0x8d : byte]);
        }
        public ShouldDecodeLdlenInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Ldlen, "Ldlen", array[0x8e : byte]);
        }
        public ShouldDecodeLdelemaInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Ldelema, "Ldelema", array[0x8f : byte]);
        }
        public ShouldDecodeLdelem_I1Instruction() : void 
        {
            TestOpCodeRead(OpCodes.Ldelem_I1, "Ldelem_I1", array[0x90 : byte]);
        }
        public ShouldDecodeLdelem_U1Instruction() : void 
        {
            TestOpCodeRead(OpCodes.Ldelem_U1, "Ldelem_U1", array[0x91 : byte]);
        }
        public ShouldDecodeLdelem_I2Instruction() : void 
        {
            TestOpCodeRead(OpCodes.Ldelem_I2, "Ldelem_I2", array[0x92 : byte]);
        }
        public ShouldDecodeLdelem_U2Instruction() : void 
        {
            TestOpCodeRead(OpCodes.Ldelem_U2, "Ldelem_U2", array[0x93 : byte]);
        }
        public ShouldDecodeLdelem_I4Instruction() : void 
        {
            TestOpCodeRead(OpCodes.Ldelem_I4, "Ldelem_I4", array[0x94 : byte]);
        }
        public ShouldDecodeLdelem_U4Instruction() : void 
        {
            TestOpCodeRead(OpCodes.Ldelem_U4, "Ldelem_U4", array[0x95 : byte]);
        }
        public ShouldDecodeLdelem_I8Instruction() : void 
        {
            TestOpCodeRead(OpCodes.Ldelem_I8, "Ldelem_I8", array[0x96 : byte]);
        }
        public ShouldDecodeLdelem_IInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Ldelem_I, "Ldelem_I", array[0x97 : byte]);
        }
        public ShouldDecodeLdelem_R4Instruction() : void 
        {
            TestOpCodeRead(OpCodes.Ldelem_R4, "Ldelem_R4", array[0x98 : byte]);
        }
        public ShouldDecodeLdelem_R8Instruction() : void 
        {
            TestOpCodeRead(OpCodes.Ldelem_R8, "Ldelem_R8", array[0x99 : byte]);
        }
        public ShouldDecodeLdelem_RefInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Ldelem_Ref, "Ldelem_Ref", array[0x9a : byte]);
        }
        public ShouldDecodeStelem_IInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Stelem_I, "Stelem_I", array[0x9b : byte]);
        }
        public ShouldDecodeStelem_I1Instruction() : void 
        {
            TestOpCodeRead(OpCodes.Stelem_I1, "Stelem_I1", array[0x9c : byte]);
        }
        public ShouldDecodeStelem_I2Instruction() : void 
        {
            TestOpCodeRead(OpCodes.Stelem_I2, "Stelem_I2", array[0x9d : byte]);
        }
        public ShouldDecodeStelem_I4Instruction() : void 
        {
            TestOpCodeRead(OpCodes.Stelem_I4, "Stelem_I4", array[0x9e : byte]);
        }
        public ShouldDecodeStelem_I8Instruction() : void 
        {
            TestOpCodeRead(OpCodes.Stelem_I8, "Stelem_I8", array[0x9f : byte]);
        }
        public ShouldDecodeStelem_R4Instruction() : void 
        {
            TestOpCodeRead(OpCodes.Stelem_R4, "Stelem_R4", array[0xa0 : byte]);
        }
        public ShouldDecodeStelem_R8Instruction() : void 
        {
            TestOpCodeRead(OpCodes.Stelem_R8, "Stelem_R8", array[0xa1 : byte]);
        }
        public ShouldDecodeStelem_RefInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Stelem_Ref, "Stelem_Ref", array[0xa2 : byte]);
        }
        public ShouldDecodeLdelemInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Ldelem, "Ldelem", array[0xa3 : byte]);
        }
        public ShouldDecodeStelemInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Stelem, "Stelem", array[0xa4 : byte]);
        }
        public ShouldDecodeUnbox_AnyInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Unbox_Any, "Unbox_Any", array[0xa5 : byte]);
        }
        public ShouldDecodeConv_Ovf_I1Instruction() : void 
        {
            TestOpCodeRead(OpCodes.Conv_Ovf_I1, "Conv_Ovf_I1", array[0xb3 : byte]);
        }
        public ShouldDecodeConv_Ovf_U1Instruction() : void 
        {
            TestOpCodeRead(OpCodes.Conv_Ovf_U1, "Conv_Ovf_U1", array[0xb4 : byte]);
        }
        public ShouldDecodeConv_Ovf_I2Instruction() : void 
        {
            TestOpCodeRead(OpCodes.Conv_Ovf_I2, "Conv_Ovf_I2", array[0xb5 : byte]);
        }
        public ShouldDecodeConv_Ovf_U2Instruction() : void 
        {
            TestOpCodeRead(OpCodes.Conv_Ovf_U2, "Conv_Ovf_U2", array[0xb6 : byte]);
        }
        public ShouldDecodeConv_Ovf_I4Instruction() : void 
        {
            TestOpCodeRead(OpCodes.Conv_Ovf_I4, "Conv_Ovf_I4", array[0xb7 : byte]);
        }
        public ShouldDecodeConv_Ovf_U4Instruction() : void 
        {
            TestOpCodeRead(OpCodes.Conv_Ovf_U4, "Conv_Ovf_U4", array[0xb8 : byte]);
        }
        public ShouldDecodeConv_Ovf_I8Instruction() : void 
        {
            TestOpCodeRead(OpCodes.Conv_Ovf_I8, "Conv_Ovf_I8", array[0xb9 : byte]);
        }
        public ShouldDecodeConv_Ovf_U8Instruction() : void 
        {
            TestOpCodeRead(OpCodes.Conv_Ovf_U8, "Conv_Ovf_U8", array[0xba : byte]);
        }
        public ShouldDecodeRefanyvalInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Refanyval, "Refanyval", array[0xc2 : byte]);
        }
        public ShouldDecodeCkfiniteInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Ckfinite, "Ckfinite", array[0xc3 : byte]);
        }
        public ShouldDecodeMkrefanyInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Mkrefany, "Mkrefany", array[0xc6 : byte]);
        }
        public ShouldDecodeLdtokenInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Ldtoken, "Ldtoken", array[0xd0 : byte]);
        }
        public ShouldDecodeConv_U2Instruction() : void 
        {
            TestOpCodeRead(OpCodes.Conv_U2, "Conv_U2", array[0xd1 : byte]);
        }
        public ShouldDecodeConv_U1Instruction() : void 
        {
            TestOpCodeRead(OpCodes.Conv_U1, "Conv_U1", array[0xd2 : byte]);
        }
        public ShouldDecodeConv_IInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Conv_I, "Conv_I", array[0xd3 : byte]);
        }
        public ShouldDecodeConv_Ovf_IInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Conv_Ovf_I, "Conv_Ovf_I", array[0xd4 : byte]);
        }
        public ShouldDecodeConv_Ovf_UInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Conv_Ovf_U, "Conv_Ovf_U", array[0xd5 : byte]);
        }
        public ShouldDecodeAdd_OvfInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Add_Ovf, "Add_Ovf", array[0xd6 : byte]);
        }
        public ShouldDecodeAdd_Ovf_UnInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Add_Ovf_Un, "Add_Ovf_Un", array[0xd7 : byte]);
        }
        public ShouldDecodeMul_OvfInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Mul_Ovf, "Mul_Ovf", array[0xd8 : byte]);
        }
        public ShouldDecodeMul_Ovf_UnInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Mul_Ovf_Un, "Mul_Ovf_Un", array[0xd9 : byte]);
        }
        public ShouldDecodeSub_OvfInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Sub_Ovf, "Sub_Ovf", array[0xda : byte]);
        }
        public ShouldDecodeSub_Ovf_UnInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Sub_Ovf_Un, "Sub_Ovf_Un", array[0xdb : byte]);
        }
        public ShouldDecodeEndfinallyInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Endfinally, "Endfinally", array[0xdc : byte]);
        }
        public ShouldDecodeLeaveInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Leave, "Leave", array[0xdd : byte]);
        }
        public ShouldDecodeLeave_SInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Leave_S, "Leave_S", array[0xde : byte]);
        }
        public ShouldDecodeStind_IInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Stind_I, "Stind_I", array[0xdf : byte]);
        }
        public ShouldDecodeConv_UInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Conv_U, "Conv_U", array[0xe0 : byte]);
        }
        public ShouldDecodeArglistInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Arglist, "Arglist", array[0xFE : byte, 0x0]);
        }
        public ShouldDecodeCeqInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Ceq, "Ceq", array[0xFE : byte, 0x1]);
        }
        public ShouldDecodeCgtInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Cgt, "Cgt", array[0xFE : byte, 0x2]);
        }
        public ShouldDecodeCgt_UnInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Cgt_Un, "Cgt_Un", array[0xFE : byte, 0x3]);
        }
        public ShouldDecodeCltInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Clt, "Clt", array[0xFE : byte, 0x4]);
        }
        public ShouldDecodeClt_UnInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Clt_Un, "Clt_Un", array[0xFE : byte, 0x5]);
        }
        public ShouldDecodeLdftnInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Ldftn, "Ldftn", array[0xFE : byte, 0x6]);
        }
        public ShouldDecodeLdvirtftnInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Ldvirtftn, "Ldvirtftn", array[0xFE : byte, 0x7]);
        }
        public ShouldDecodeLdargInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Ldarg, "Ldarg", array[0xFE : byte, 0x9]);
        }
        public ShouldDecodeLdargaInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Ldarga, "Ldarga", array[0xFE : byte, 0xa]);
        }
        public ShouldDecodeStargInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Starg, "Starg", array[0xFE : byte, 0xb]);
        }
        public ShouldDecodeLdlocInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Ldloc, "Ldloc", array[0xFE : byte, 0xc]);
        }
        public ShouldDecodeLdlocaInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Ldloca, "Ldloca", array[0xFE : byte, 0xd]);
        }
        public ShouldDecodeStlocInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Stloc, "Stloc", array[0xFE : byte, 0xe]);
        }
        public ShouldDecodeLocallocInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Localloc, "Localloc", array[0xFE : byte, 0xf]);
        }
        public ShouldDecodeEndfilterInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Endfilter, "Endfilter", array[0xFE : byte, 0x11]);
        }
        public ShouldDecodeUnalignedInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Unaligned, "Unaligned", array[0xFE : byte, 0x12]);
        }
        public ShouldDecodeVolatileInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Volatile, "Volatile", array[0xFE : byte, 0x13]);
        }
        public ShouldDecodeTailInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Tail, "Tail", array[0xFE : byte, 0x14]);
        }
        public ShouldDecodeInitobjInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Initobj, "Initobj", array[0xFE : byte, 0x15]);
        }
        public ShouldDecodeConstrainedInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Constrained, "Constrained", array[0xFE : byte, 0x16]);
        }
        public ShouldDecodeCpblkInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Cpblk, "Cpblk", array[0xFE : byte, 0x17]);
        }
        public ShouldDecodeInitblkInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Initblk, "Initblk", array[0xFE : byte, 0x18]);
        }
        public ShouldDecodeNoInstruction() : void 
        {
            TestOpCodeRead(OpCodes.No, "No", array[0xFE : byte, 0x19]);
        }
        public ShouldDecodeRethrowInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Rethrow, "Rethrow", array[0xFE : byte, 0x1a]);
        }
        public ShouldDecodeSizeofInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Sizeof, "Sizeof", array[0xFE : byte, 0x1c]);
        }
        public ShouldDecodeRefanytypeInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Refanytype, "Refanytype", array[0xFE : byte, 0x1d]);
        }
        public ShouldDecodeReadonlyInstruction() : void 
        {
            TestOpCodeRead(OpCodes.Readonly, "Readonly", array[0xFE : byte, 0x1e]);
        }
        
        public ShouldThrowBadImageFormatExceptionOnUnrecognizedOpCode() : void
            expects BadImageFormatException
        {
            def bytes = array[0xff : byte, 0xff];
            def inputStream = MemoryStream(bytes);            
            def decoder = OpCodeDecoder();
            _ = decoder.Decode(inputStream);
        }
        
        private TestOpCodeRead(expectedOpCode : OpCode, opCodeName : string, bytes : array[byte]) : void
        {
            def inputStream = MemoryStream(bytes);            
            def decoder = OpCodeDecoder();
            def opCode = decoder.Decode(inputStream);
            opCode.ShouldBeEqualTo(expectedOpCode, "Wrong OpCode");
            opCode.Name.ShouldBeEqualTo(opCodeName, "Wrong OpCode Name");
        }
    }
}
