using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

using Tao;
using Tao.Interfaces;
using Tao.Metadata;
using Tao.Metadata.Instructions;
using Tao.Metadata.Instructions.Operands;
using Tao.Metadata.Tables;
using Tests.Macros;

namespace Tests
{
    public class OperandEncodingTests
    {
        public ShouldReturnCorrectOperandSizeForShortInlineVarOperand() : void
        {
            TestOperandSize.[ShortInlineVarOperandSizer](0x42 : ushort, 2);
        }
        public ShouldReturnCorrectOperandSizeForShortInlineIOperand() : void 
        {
            TestOperandSize.[ShortInlineIOperandSizer](-33 : sbyte, 1);
        }
        
        public ShouldReturnCorrectOperandSizeForInlineIOperand() : void
        {
            TestOperandSize.[InlineIOperandSizer](-42 : int, 2);
        }
        
        public ShouldReturnCorrectOperandSizeForInline8Operand() : void
        {
            TestOperandSize.[Inline8OperandSizer](long.MaxValue : long, 8);
        }
        public ShouldReturnCorrectOperandSizeForShortInlineROperand() : void 
        {      
            TestOperandSize.[ShortInlineROperandSizer](float.MaxValue : float, 4);
        }
        public ShouldReturnCorrectOperandSizeForInlineROperand() : void
        {
            TestOperandSize.[InlineROperandSizer](double.MaxValue : double, 8);
        }
        public ShouldReturnCorrectOperandSizeForInlineMethodOperand() : void
        {
            TestOperandSize.[InlineMethodOperandSizer](RowReference(TableId.MethodDef, 1), 4);
        }
        public stub ShouldReturnCorrectOperandSizeForInlineSigOperand() : void
        {
        }
        public stub ShouldReturnCorrectOperandSizeForShortInlineBrTargetOperand() : void
        {
        }
        public stub ShouldReturnCorrectOperandSizeForInlineBrTargetOperand() : void
        {
        }
        public stub ShouldReturnCorrectOperandSizeForInlineSwitchOperand() : void
        {
        }
        public stub ShouldReturnCorrectOperandSizeForInlineTypeOperand() : void
        {
        }
        public stub ShouldReturnCorrectOperandSizeForInlineStringOperand() : void
        {
        }
        public stub ShouldReturnCorrectOperandSizeForInlineFieldOperand() : void
        {
        }
        public stub ShouldReturnCorrectOperandSizeForInlineTokenOperand() : void
        {
        }
        public stub ShouldReturnCorrectOperandSizeForInlineVarOperand() : void 
        {
        }

        public ShouldWriteShortInlineVarOperand() : void
        {
            def operand : ushort = ushort.MaxValue;
            TestWrite.[ushort, ShortInlineVarOperandWriter](operand, writer => writer.Write(operand));
        }        

        public ShouldWriteShortInlineIOperand() : void 
        {
            def operand : sbyte = sbyte.MaxValue;
            TestWrite.[sbyte, ShortInlineIOperandWriter](operand, writer => writer.Write(operand : sbyte));
        }

        public ShouldWriteInlineIOperand() : void
        {
            def operand : int = int.MaxValue;
            TestWrite.[int, InlineIOperandWriter](operand, writer => writer.Write(operand));
        }

        public ShouldWriteInlineI8Operand() : void
        {
            def operand : long = long.MaxValue;
            TestWrite.[long, InlineI8OperandWriter](operand, writer => writer.Write(operand));
        }

        public ShouldWriteShortInlineROperand() : void 
        {     
            def operand : float = float.MaxValue;
            TestWrite.[float, ShortInlineROperandWriter](operand, writer => writer.Write(operand));
        }

        public ShouldWriteInlineROperand() : void
        {
            def operand : double = double.MaxValue;
            TestWrite.[double, InlineROperandWriter](operand, writer => writer.Write(operand));
        }

        public ShouldWriteInlineMethodOperand() : void
        {
            TestWrite.[InlineMethodOperandWriter](RowReference(TableId.MemberRef, 1));
            TestWrite.[InlineMethodOperandWriter](RowReference(TableId.MethodDef, 1));
            TestWrite.[InlineMethodOperandWriter](RowReference(TableId.MethodSpec, 1));
        }

        public ShouldWriteInlineSigOperand() : void
        {
            TestWrite.[InlineSigOperandWriter](RowReference(TableId.StandAloneSig, 42));
        }
        public ShouldWriteShortInlineBrTargetOperand() : void
        {
            def operand : short = 0x42;
            TestWrite.[short, ShortInlineBrOperandWriter](operand, writer => writer.Write(operand));
        }
        public ShouldWriteInlineBrTargetOperand() : void
        {
            def operand : int = 0x42;
            TestWrite.[int, InlineBrOperandWriter](operand, writer => writer.Write(operand));
        }
        public ShouldWriteInlineSwitchOperand() : void
        {
            def jumpTargets = array[3 : int, 5, 7, 9];
            def writeExpectedStream(writer : BinaryWriter) : void
            {
                writer.Write(4 : uint);
                
                foreach(target in jumpTargets)
                {
                    writer.Write(target);
                }
            }
            
            TestWrite.[array[int], InlineSwitchOperandWriter](jumpTargets, writeExpectedStream);
        }
        public ShouldWriteInlineTypeOperand() : void
        {
            TestWrite.[InlineTypeOperandWriter](RowReference(TableId.TypeDef, 1));
            TestWrite.[InlineTypeOperandWriter](RowReference(TableId.TypeRef, 2));
            TestWrite.[InlineTypeOperandWriter](RowReference(TableId.TypeSpec, 3));
        }
        
        public ShouldWriteInlineStringOperand() : void
        {
            def stringIndex : uint = 0x42;
            def tableId : uint  = 0x70;
            def token : uint = stringIndex + (tableId << 24);
            
            TestWrite.[uint, InlineStringOperandWriter](token, writer => writer.Write(token));
        }
        public ShouldWriteInlineFieldOperand() : void
        {
            TestWrite.[InlineFieldOperandWriter](RowReference(TableId.MemberRef, 1));
            TestWrite.[InlineFieldOperandWriter](RowReference(TableId.Field, 1));
        }
        public ShouldWriteInlineTokenOperand() : void
        {
            TestWrite.[InlineTokenOperandWriter](RowReference(TableId.MemberRef, 1));
        }
        public ShouldWriteInlineVarOperand() : void 
        {            
            def operand = short.MaxValue;
            TestWrite.[short, InlineVarOperandWriter](operand, writer => writer.Write(operand));
        }

        private TestOperandSize[TSizer](operand : object, expectedSize : uint) : void
            where TSizer : IOperandSizer, new()
        {
            def sizer = TSizer();
            sizer.GetOperandSize(operand).ShouldBeEqualTo(expectedSize, "Wrong Operand Size");
        }
        
        private TestWrite[TWriter](rowReference : RowReference) : void
            where TWriter : InlineTokenOperandWriter, new()
        {
            def operand = rowReference;
            def writeTokenBytes(writer : BinaryWriter) : void
            {
                def encoder = SimpleTokenEncoder();
                def token = encoder.Encode(operand.TableId, operand.Row);
                writer.Write(token);
            }

            TestWrite.[RowReference, TWriter](operand, writeTokenBytes);
        }

        private TestWrite[TOperand, TWriter](operand : TOperand, writeExpectedStream : BinaryWriter -> void) : void
            where TWriter : IOperandWriter, new()
        {
            TestWrite.[TWriter](operand, CreateSampleStream(writeExpectedStream));
        }
        private TestWrite[TWriter](operand : object, getExpectedStream : void -> Stream) : void
            where TWriter : IOperandWriter, new()
        {
            def instructionStream = MemoryStream();
            def expectedStream = getExpectedStream();
            def writer = TWriter();
            writer.WriteOperandTo(instructionStream, operand);

            instructionStream.ShouldMatch(expectedStream);
        }

        private CreateSampleStream(writeExpectedStream : BinaryWriter-> void) : void -> Stream
        {
            def expectedStream = MemoryStream();
            def writer = BinaryWriter(expectedStream);
            writeExpectedStream(writer);            

            () => expectedStream;
        }
    }
}
