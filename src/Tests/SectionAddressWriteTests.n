using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Extensions;
using Nemerle.Text;
using Nemerle.Utility;
using Tao;
using Tao.Interfaces;
using Tests.Macros;
using System;
using System.Collections.Generic;
using System.Linq;

namespace Tests
{
  public class SectionAddressWriteTests
  {
    public ShouldWriteExportTableAddress() : void
    {
      TestWrite(Location.ExportTable);
    }	
    public ShouldWriteImportTableAddress() : void
    {
      TestWrite(Location.ImportTable);
    }	
    public ShouldWriteResourceTableAddress() : void
    {
      TestWrite(Location.ResourceTable);
    }	
    public ShouldWriteExceptionTableAddress() : void
    {
      TestWrite(Location.ExceptionTable);
    }	
    public ShouldWriteCertificateTableAddress() : void
    {
      TestWrite(Location.CertificateTable);
    }		
    public ShouldWriteDebugAddress() : void
    {
      TestWrite(Location.Debug);
    }    
    public ShouldWriteCopyrightAddress() : void
    {
      TestWrite(Location.Copyright);
    }	
    public ShouldWriteGlobalPtrAddress() : void
    {
      TestWrite(Location.GlobalPtr);
    }    
    public ShouldWriteTLSAddress() : void
    {
      TestWrite(Location.TLS);
    }	
    public ShouldWriteLoadConfigAddress() : void
    {
      TestWrite(Location.LoadConfig);
    }	
    public ShouldWriteBoundImportAddress() : void
    {
      TestWrite(Location.BoundImport);
    }	
    public ShouldWriteIATAddress() : void
    {
      TestWrite(Location.ImportAddressTable);
    }	
    public ShouldWriteDelayImportDescriptorAddress() : void
    {
      TestWrite(Location.DelayImportDescriptor);
    }	
    public ShouldWriteCLIHeaderAddress() : void
    {
      TestWrite(Location.CLIHeader);
    }	
    public ShouldWriteMetadataRootAddress() : void
    {
      TestWrite(Location.MetadataRoot);
    }	
    public ShouldWriteRelocationTableAddress() : void
    {
      TestWrite(Location.Relocations);
    }	   
    private TestWrite(location : Location) : void
    {
      TestWrite(location, 0xFEED, 0x42);
    }
    private TestWrite(location : Location, expectedRva : uint, expectedSize : uint) : void
    {
      def imageFile = @"..\..\SampleBinaries\SamplePE32PlusApp.exe";
      def image = Image.ReadFrom(imageFile);
                   
      def writer = ImageAddressWriter();
      writer.WriteAddressOf(location, Address(expectedRva, expectedSize), image);
      
      // Verify that the written address matches the expected address      
      def resolver = ImageAddressReader();
      def address = resolver.ReadAddressOf(location, image);
     
      assert address.Rva equals expectedRva otherwiseprint "Invalid Rva";
      assert address.Size equals expectedSize otherwiseprint "Invalid Size";
    }
  }
}
