using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Tests.Macros;

using System;
using System.IO;
using System.Reflection;
using System.Collections.Generic;
using System.Linq;

namespace Tests
{
  public static class Tester
  {
    public TestRead[TValue, THeader](propertyName : string, expectedValue : TValue, doReadTest: (THeader->void) ->void) : void
    {
        def readValue = fun(header : THeader) : TValue
        {
            def property = typeof(THeader).GetProperty(propertyName);
            def value = property.GetValue(header, null) :> TValue;
            
            value;
        };
        
        def failureMessage = string.Format("Invalid {0}", propertyName);
        TestRead(readValue, expectedValue, failureMessage, doReadTest);
    }
    
    public TestRead[TValue, THeader](readValue: THeader->TValue, expectedValue : TValue, failureMessage : string, doReadTest: (THeader->void) ->void) : void
    {
      def doTest = fun(header: THeader) : void
        {
            def value : TValue = readValue(header);
            assert value equals expectedValue otherwiseprint failureMessage;
        };
        
      doReadTest(doTest);
    }
    
    public TestWrite[TValue, THeader](propertyName : string, expectedValue : TValue,
        createHeader: void->THeader, readValue: BinaryReader->TValue, writeValue: (THeader * Stream)->void) : void
    {                 
      def header = createHeader();            
      def property = typeof(THeader).GetProperty(propertyName);
      property.SetValue(header, expectedValue, null);
      
      def outputStream = MemoryStream();
      writeValue(header, outputStream);
      
      def reader = BinaryReader(outputStream);      
      def actualValue = readValue(reader);      
      def message = string.Format("Invalid {0} value -- expected '{1}', actual value = '{2}'", propertyName, expectedValue, actualValue);
      
      assert actualValue equals expectedValue otherwiseprint message;
    }
  }
}
