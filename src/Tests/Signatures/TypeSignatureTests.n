using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using Tao;
using Tao.Metadata;
using Tao.Metadata.Signatures;
using Tao.Metadata.Tables;
using Tests.Macros;
using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

namespace Tests
{
    public class TypeSignatureTests
    {   
        public ShouldReadObjectType() : void
        {
            def bytes = array[ElementType.Object :> byte];
            def signature = TypeSignature.ReadFrom(bytes.ToStream());
            signature.ElementType.ShouldBeEqualTo(ElementType.Object, "Expected ElementType.Object");
            object.ReferenceEquals(signature, ObjectSignature.Instance).ShouldBeTrue("The signature should be pointing to a single ObjectSignature instance");
        }
        public ShouldWriteObjectType() : void
        {
            def expectedBytes = array[ElementType.Object :> byte];
            def signature = ObjectSignature.Instance;
            
            def outputStream = MemoryStream();
            signature.Write(outputStream);
            outputStream.ShouldMatch(expectedBytes);            
        }
        
        public ShouldReadStringType() : void
        {
            def bytes = array[ElementType.String :> byte];
            def signature = TypeSignature.ReadFrom(bytes.ToStream());
            signature.ElementType.ShouldBeEqualTo(ElementType.String, "Expected ElementType.String");
            Object.ReferenceEquals(signature, StringSignature.Instance).ShouldBeTrue("The signature should be pointing to a single StringSignature instance");
        }
        public ShouldWriteStringType() : void
        {
            def expectedBytes = array[ElementType.String :> byte];
            def signature = StringSignature.Instance;
            
            def outputStream = MemoryStream();
            signature.Write(outputStream);
            outputStream.ShouldMatch(expectedBytes);            
        }
        public ShouldReadBooleanType() : void
        {
            def elementType = ElementType.Boolean;
            TestElementTypeRead(elementType);
        }

        public ShouldReadCharType() : void
        {
            def elementType = ElementType.Char;
            TestElementTypeRead(elementType);
        }

        public ShouldReadI1Type() : void
        {
            def elementType = ElementType.I1;
            TestElementTypeRead(elementType);
        }

        public ShouldReadI2Type() : void
        {
            def elementType = ElementType.I2;
            TestElementTypeRead(elementType);
        }

        public ShouldReadI4Type() : void
        {
            def elementType = ElementType.I4;
            TestElementTypeRead(elementType);
        }

        public ShouldReadI8Type() : void
        {
            def elementType = ElementType.I8;
            TestElementTypeRead(elementType);
        }

        public ShouldReadU1Type() : void
        {
            def elementType = ElementType.U1;
            TestElementTypeRead(elementType);
        }

        public ShouldReadU2Type() : void
        {
            def elementType = ElementType.U2;
            TestElementTypeRead(elementType);
        }

        public ShouldReadU4Type() : void
        {
            def elementType = ElementType.U4;
            TestElementTypeRead(elementType);
        }

        public ShouldReadU8Type() : void
        {
            def elementType = ElementType.U8;
            TestElementTypeRead(elementType);
        }

        public ShouldReadR4Type() : void
        {
            def elementType = ElementType.R4;
            TestElementTypeRead(elementType);
        }

        public ShouldReadR8Type() : void
        {
            def elementType = ElementType.R8;
            TestElementTypeRead(elementType);
        }
        
        public ShouldWriteBooleanType() : void
        {
            def elementType = ElementType.Boolean;
            TestElementTypeWrite(elementType);
        }

        public ShouldWriteCharType() : void
        {
            def elementType = ElementType.Char;
            TestElementTypeWrite(elementType);
        }

        public ShouldWriteI1Type() : void
        {
            def elementType = ElementType.I1;
            TestElementTypeWrite(elementType);
        }

        public ShouldWriteI2Type() : void
        {
            def elementType = ElementType.I2;
            TestElementTypeWrite(elementType);
        }

        public ShouldWriteI4Type() : void
        {
            def elementType = ElementType.I4;
            TestElementTypeWrite(elementType);
        }

        public ShouldWriteI8Type() : void
        {
            def elementType = ElementType.I8;
            TestElementTypeWrite(elementType);
        }

        public ShouldWriteU1Type() : void
        {
            def elementType = ElementType.U1;
            TestElementTypeWrite(elementType);
        }

        public ShouldWriteU2Type() : void
        {
            def elementType = ElementType.U2;
            TestElementTypeWrite(elementType);
        }

        public ShouldWriteU4Type() : void
        {
            def elementType = ElementType.U4;
            TestElementTypeWrite(elementType);
        }

        public ShouldWriteU8Type() : void
        {
            def elementType = ElementType.U8;
            TestElementTypeWrite(elementType);
        }

        public ShouldWriteR4Type() : void
        {
            def elementType = ElementType.R4;
            TestElementTypeWrite(elementType);
        }

        public ShouldWriteR8Type() : void
        {
            def elementType = ElementType.R8;
            TestElementTypeWrite(elementType);
        }
        
        private TestElementTypeWrite(elementType : ElementType) : void
        {
            def signature = TypeSignature();
            signature.ElementType = elementType;
            
            def expectedBytes = array[elementType :> byte];
            def outputStream = MemoryStream();
            signature.Write(outputStream);
            
            outputStream.ShouldMatch(expectedBytes);
        }
        private TestElementTypeRead(elementType : ElementType) : void
        {            
            def stream = MemoryStream(array[elementType :> byte]);            
            def result = TypeSignature.ReadFrom(stream);
            
            result.ElementType.ShouldBeEqualTo(elementType, "Wrong element type");
        }
    }
}
