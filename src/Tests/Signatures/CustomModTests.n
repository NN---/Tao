using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using Tao;
using Tao.Metadata;
using Tao.Metadata.Signatures;
using Tao.Metadata.Tables;
using Tests.Macros;
using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

namespace Tests
{
    public class CustomModTests
    {
        public ShouldReadCustomModOptSignature() : void
        {
            def expectedTableId = TableId.TypeRef;            
            def expectedRow : byte = 0x12;
            def elementType = ElementType.CMOD_OPT;            
            TestRead(elementType, expectedTableId, expectedRow, false);
        }
        public ShouldReadCustomModReqSignature() : void
        {
            def expectedTableId = TableId.TypeDef;       
            def expectedRow : byte = 0x12;
            def elementType = ElementType.CMOD_REQD;
            
            TestRead(elementType, expectedTableId, expectedRow, true);
        }
        public ShouldWriteCustomModOptSignature() : void
        {
            def elementType = ElementType.CMOD_OPT;
            TestWrite(elementType, false);
        }
        public ShouldWriteCustomModReqSignature() : void
        {
            def elementType = ElementType.CMOD_REQD;
            TestWrite(elementType, true);
        }
        public ShouldReadMultipleCustomModsAsACollection() : void
        {
            def firstModBytes = array[ElementType.CMOD_REQD :> byte, 0x49 : byte];
            def secondModBytes = array[ElementType.CMOD_OPT :> byte, 0x49 : byte];                                    
            
            // The sample stream will look like: CUSTOMMOD1 CUSTOMMOD2 
            def bytes = List.[byte]();
            
            bytes.AddRange(firstModBytes);
            bytes.AddRange(secondModBytes);
            
            def inputStream = MemoryStream();
            def writer = BinaryWriter(inputStream);
            
            writer.Write(bytes.ToArray());
            inputStream.Seek(0);
            
            def modReader = CustomModReader();
            def mods = modReader.ReadCustomMods(inputStream);
            
            def firstMod = mods[0];
            firstMod.IsRequired.ShouldBeTrue("IsRequired should be true");
            firstMod.TableId.ShouldBeEqualTo(TableId.TypeRef, "Wrong TableId");
            firstMod.Row.ShouldBeEqualTo(0x12, "Wrong Row");
            
            def secondMod = mods[1];
            secondMod.IsRequired.ShouldBeFalse("IsRequired should be false");
            secondMod.TableId.ShouldBeEqualTo(TableId.TypeRef, "Wrong TableId");
            secondMod.Row.ShouldBeEqualTo(0x12, "Wrong Row");
        }
        private TestWrite(elementType : ElementType, isRequired : bool) : void
        {
            def expectedTableId = TableId.TypeRef;
            def expectedRow : uint = 0x12;
            
            def customMod = CustomMod();
            customMod.IsRequired = isRequired;
            customMod.Row = expectedRow;
            customMod.TableId = expectedTableId;
            
            def stream = MemoryStream();
            def writer = CustomModWriter();
            writer.Write(customMod, stream);
            
            // Create the expected bytes
            def encoder = CodedTokenEncoder();
            def codedToken = encoder.Encode(CodedTokenType.TypeDefOrTypeRef, expectedTableId, expectedRow) :> byte;                       
            def expectedBytes = array[elementType :> byte, codedToken];
            
            stream.ShouldMatch(expectedBytes);
        }
        private TestRead(elementType : ElementType, expectedTableId : TableId, expectedRow : byte, isRequired : bool) : void
        {
            def encoder = CodedTokenEncoder();
            def codedToken = encoder.Encode(CodedTokenType.TypeDefOrTypeRef, expectedTableId, expectedRow) :> byte;                       

            def bytes = array[elementType :> byte, codedToken];
            def stream = MemoryStream(bytes);

            def reader = CustomModReader();          
            def result = reader.Read(stream);

            result.IsRequired.ShouldBeEqualTo(isRequired, "Invalid IsRequired value");
            result.Row.ShouldBeEqualTo(expectedRow, "Wrong row");
            result.TableId.ShouldBeEqualTo(expectedTableId, "Wrong TableId");
        }
    }
}
