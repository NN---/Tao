using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using Tests.Macros;
using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

using Tao;
using Tao.Metadata;
using Tao.Metadata.Signatures;
using Tao.Metadata.Tables;
using Tao.Metadata.Tables.Rows;

namespace Tests
{
    public partial class CustomAttributeSignatureTests
    {
        public stub ShouldReadValueTypeOrCustomEnum() : void
        {
        }
        public ShouldReadBoolean() : void
        {
            TestCustomAttributeRead("SampleClassWithBooleanAttributeUsage", true, typeof(bool));
        }

        public ShouldReadByte() : void
        {
            TestCustomAttributeRead("SampleClassWithByteAttributeUsage", 32, typeof(byte));
        }
        public stub ShouldReadSignedByte() : void
        {
        }
        public stub ShouldReadChar() : void
        {
        }
        public stub ShouldReadUInt16() : void
        {
        }
        public stub ShouldReadInt16() : void
        {
        }
        public ShouldReadInt32() : void
        {
            def expectedValue = 42;
            def targetClassName = "SampleClass";

            TestCustomAttributeRead(targetClassName, expectedValue, typeof(Int32));                      
        }

        public ShouldReadUInt32() : void
        {
            def expectedValue = 101;
            def targetClassName = "SampleClassWithUInt32AttributeUsage";

            TestCustomAttributeRead(targetClassName, expectedValue, typeof(UInt32));                      
        }
        public stub ShouldReadInt64() : void
        {
        }
        public ShouldReadUInt64() : void
        {          
            def expectedValue = 4242;
            def targetClassName = "SampleClassWithUInt64AttributeUsage";

            TestCustomAttributeRead(targetClassName, expectedValue, typeof(UInt64));
        }
        public stub ShouldReadSingle() : void
        {
        }
        public stub ShouldReadDouble() : void
        {
        }
        public stub ShouldReadSerString() : void
        {
        }
        public stub ShouldReadTypeSerString() : void
        {
        }
        public stub ShouldReadFieldOrPropType() : void
        {
        }
        public stub ShouldFailIfPrologNotEncountered() : void
        {
        }
        private TestCustomAttributeRead(targetClassName : string, expectedValue : object, expectedType : Type) : void
        {
            def root = base.GetMetadataRoot();            
            def tableStream = root.Heaps["#~"];

            def heap = TablesHeap();
            heap.ReadFrom(tableStream);

            def stringHeap = root.Heaps["#Strings"];

            // Get the CustomAttributeRow associated with 
            // the SampleClass
            def targetRow = GetTargetRow(targetClassName, heap, stringHeap);

            // Ensure that we have the correct type owner
            def parentRowRef = targetRow.Parent.ToRowRef(CodedTokenType.HasCustomAttribute);
            def parentRow = heap.GetRow.[TypeDefRow](parentRowRef.Row);            
            parentRow.TypeName.ToString(stringHeap).ShouldBeEqualTo(targetClassName, "Wrong Parent Type");

            // Read the CustomAttribute blob
            def blobStream = root.Heaps["#Blob"];
            def blobReader = BlobReader();

            def blobIndex = targetRow.Value.ToUInt32();
            def customAttributeBlob = blobReader.Read(blobIndex, blobStream);

            blobStream.Seek(0);
            def parameters = targetRow.GetParameters(heap, blobStream);

            def customAttributeReader = CustomAttributeSignatureReader();
            def customAttributeSignature = customAttributeReader.Read(parameters, customAttributeBlob);

            customAttributeSignature.FixedArguments.Count().ShouldBeEqualTo(1, "Wrong Number of FixedArgs");

            def arguments = customAttributeSignature.FixedArguments;
            arguments[0].Value.ShouldBeEqualTo(expectedValue, "Wrong FixedArg value");              
            arguments[0].Value.GetType().ShouldBeEqualTo(expectedType, "The actual type and the expected types don't match");
        }
        private GetTargetRow(targetClassName : string, heap : TablesHeap, stringHeap : Stream) : CustomAttributeRow
            ensures value != null
        {
            mutable result : CustomAttributeRow = null;
            def customAttributeRows = heap.GetRows.[CustomAttributeRow]();
            foreach(row in customAttributeRows)
            {
                def parentRowRef = row.Parent.ToRowRef(CodedTokenType.HasCustomAttribute);
                def parentRow = heap.GetRow.[TypeDefRow](parentRowRef.Row);            
                def parentName = parentRow.TypeName.ToString(stringHeap);

                when(parentName == targetClassName)
                {
                    result = row;
                }
            }

            result;

        }
    }
}
