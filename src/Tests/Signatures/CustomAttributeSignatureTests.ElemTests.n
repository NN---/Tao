using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using Tests.Macros;
using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

using Tao;
using Tao.Metadata;
using Tao.Metadata.Signatures;
using Tao.Metadata.Tables;
using Tao.Metadata.Tables.Rows;

namespace Tests
{
    public partial class CustomAttributeSignatureTests
    {
        public stub ShouldReadBoolean() : void
        {
        }
        public stub ShouldReadByte() : void
        {
        }
        public stub ShouldReadChar() : void
        {
        }
        public stub ShouldReadUInt16() : void
        {
        }
        public stub ShouldReadInt16() : void
        {
        }
        public ShouldReadInt32() : void
        {
            def root = base.GetMetadataRoot();            
            def tableStream = root.Heaps["#~"];
            
            def heap = TablesHeap();
            heap.ReadFrom(tableStream);
            
            // Get the CustomAttributeRow associated with 
            // the SampleClass
            def targetRow = heap.GetRow.[CustomAttributeRow](15);
            
            // Read the CustomAttribute blob
            def blobStream = root.Heaps["#Blob"];
            def blobReader = BlobReader();
            
            def blobIndex = targetRow.Value.ToUInt32();
            def customAttributeBlob = blobReader.Read(blobIndex, blobStream);
            
            blobStream.Seek(0);
            def parameters = targetRow.GetParameters(heap, blobStream);
            
            def customAttributeReader = CustomAttributeSignatureReader();
            def customAttributeSignature = customAttributeReader.Read(parameters, customAttributeBlob);
            
            customAttributeSignature.FixedArguments.Count().ShouldBeEqualTo(1, "Wrong Number of FixedArgs");
            
            def arguments = customAttributeSignature.FixedArguments;
            arguments[0].Value.ShouldBeEqualTo(42, "Wrong FixedArg value");            
        }
        public stub ShouldReadUInt32() : void
        {
        }
        public stub ShouldReadInt64() : void
        {
        }
        public stub ShouldReadUInt64() : void
        {          
        }
        public stub ShouldReadSingle() : void
        {
        }
        public stub ShouldReadDouble() : void
        {
        }
        public stub ShouldReadSerString() : void
        {
        }
        public stub ShouldReadTypeSerString() : void
        {
        }
        public stub ShouldReadFieldOrPropType() : void
        {
        }
        public stub ShouldFailIfPrologNotEncountered() : void
        {
        }
    }
}
