using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using Tests.Macros;
using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

using Tao;
using Tao.Metadata;
using Tao.Metadata.Signatures;
using Tao.Metadata.Tables;
using Tao.Metadata.Tables.Rows;
using SampleCustomAttributeUsage;

namespace Tests
{
    public partial class CustomAttributeSignatureTests
    {
        public ShouldReadZeroNamedArgumentsWhenNoneAreAvailable() : void
        {
            def targetClassName = "SampleClassWithInt16AttributeUsage";
            
            def testArguments(args : IList.[NamedCustomAttributeArgument]) : void
            {
                args.Count.ShouldBeEqualTo(0, "There should be zero named arguments read");
            }
            
            TestNamedArguments(targetClassName, testArguments);
        }
        
        public ShouldReadBoxedEnum() : void
        {            
            TestCustomAttributeRead("SampleClassWithBoxedEnumAttributeUsage", SampleEnum.Maybe, typeof(SampleEnum));
        }

        public ShouldReadBoxedArray() : void
        {
            TestCustomAttributeRead("SampleClassWithBoxedArrayArgumentAttributeUsage", array[1 : object, 2, 3, 4, 5, 6], typeof(array[int]), TestArray);
        }
        public ShouldReadNamedField() : void
        {
            def targetClassName = "SampleClassWithNamedFieldAttributeUsage";
            
            def testArguments(args : IList.[NamedCustomAttributeArgument]) : void
            {
                args.Count().ShouldBeEqualTo(1, "Wrong Number of NamedArgs");
                def argument = args.First();
                argument.ArgumentName.ShouldBeEqualTo("SomeField", "Wrong Argument Name");
                argument.Value.ShouldBeEqualTo(12345, "Wrong argument value");
            }
            
            TestNamedArguments(targetClassName, testArguments);
        }
        
        private TestNamedArguments(targetClassName : string, testArguments : IList.[NamedCustomAttributeArgument]->void) : void
        {
            def root = base.GetMetadataRoot();            
            def tableStream = root.Heaps["#~"];

            def heap = TablesHeap();
            heap.ReadFrom(tableStream);

            def stringHeap = root.Heaps["#Strings"];

            // Get the CustomAttributeRow associated with 
            // the SampleClass
            def targetRow = GetTargetRow(targetClassName, heap, stringHeap);

            // Ensure that we have the correct type owner
            def parentRowRef = targetRow.Parent.ToRowRef(CodedTokenType.HasCustomAttribute);
            def parentRow = heap.GetRow.[TypeDefRow](parentRowRef.Row);            
            parentRow.TypeName.ToString(stringHeap).ShouldBeEqualTo(targetClassName, "Wrong Parent Type");

            // Read the CustomAttribute blob
            def blobStream = root.Heaps["#Blob"];
            def blobReader = BlobReader();

            def blobIndex = targetRow.Value.ToUInt32();
            def customAttributeBlob = blobReader.Read(blobIndex, blobStream);

            blobStream.Seek(0);
            def parameters = targetRow.GetParameters(heap, blobStream);

            def customAttributeReader = CustomAttributeSignatureReader();
            def customAttributeSignature = customAttributeReader.Read(parameters, customAttributeBlob, stringHeap, heap);

            testArguments(customAttributeSignature.NamedArguments);
        }
        
        public ShouldReadNamedProperty() : void
        {
            def targetClassName = "SampleClassWithNamedPropertyAttributeUsage";
            
            def testArguments(args : IList.[NamedCustomAttributeArgument]) : void
            {
                args.Count().ShouldBeEqualTo(1, "Wrong Number of NamedArgs");
                
                def argument = args.First();
                argument.ArgumentName.ShouldBeEqualTo("SomeProperty", "Wrong Argument Name");
                argument.Value.ShouldBeEqualTo(54321, "Wrong argument value");
            }
            
            TestNamedArguments(targetClassName, testArguments);
        }
        public ShouldReadArray() : void
        {            
            TestCustomAttributeRead("SampleClassWithArrayAttributeUsage", array[1 : object,2,3], typeof(array[object]), TestArray);
        }
        private TestArray(value : object, expectedValue : object, expectedType : Type) : void
        {
            value.ShouldBeNotNull("The actual value cannot be null");

            def actualType = value.GetType();
            actualType.ShouldBeEqualTo(expectedType, "Wrong array type");

            def actualArray = value :> Array;
            def expectedArray = expectedValue :> Array;

            def length = actualArray.Length;                
            expectedArray.Length.ShouldBeEqualTo(length, "The two arrays should have the same length");
            for(mutable i = 0; i < length; i++)
            {
                def actual = actualArray.GetValue(i);
                def expected = expectedArray.GetValue(i);

                actual.ShouldBeEqualTo(expected, "Wrong element value at index {0}", i);
            }                
        }
        public ShouldReadCustomEnum() : void
        {
            TestCustomAttributeRead("SampleClassWithSampleEnumAttributeUsage", SampleEnum.Maybe, typeof(SampleEnum));
        }
        public ShouldReadBoolean() : void
        {
            TestCustomAttributeRead("SampleClassWithBooleanAttributeUsage", true, typeof(bool));
        }

        public ShouldReadByte() : void
        {
            TestCustomAttributeRead("SampleClassWithByteAttributeUsage", 32, typeof(byte));
        }
        public ShouldReadSignedByte() : void
        {
            TestCustomAttributeRead("SampleClassWithSignedByteAttributeUsage", -42, typeof(sbyte));
        }
        public ShouldReadChar() : void
        {
            TestCustomAttributeRead("SampleClassWithCharAttributeUsage", 'x', typeof(char));
        }
        public ShouldReadUInt16() : void
        {
            TestCustomAttributeRead("SampleClassWithUInt16AttributeUsage", 512, typeof(UInt16));
        }
        public ShouldReadInt16() : void
        {
            TestCustomAttributeRead("SampleClassWithInt16AttributeUsage", -255, typeof(Int16));
        }
        public ShouldReadInt32() : void
        {
            def expectedValue = 42;
            def targetClassName = "SampleClass";

            TestCustomAttributeRead(targetClassName, expectedValue, typeof(Int32));                      
        }

        public ShouldReadUInt32() : void
        {
            def expectedValue = 101;
            def targetClassName = "SampleClassWithUInt32AttributeUsage";

            TestCustomAttributeRead(targetClassName, expectedValue, typeof(UInt32));                      
        }
        public ShouldReadInt64() : void
        {
            TestCustomAttributeRead("SampleClassWithInt64AttributeUsage", -12345, typeof(Int64));
        }
        public ShouldReadUInt64() : void
        {          
            def expectedValue = 4242;
            def targetClassName = "SampleClassWithUInt64AttributeUsage";

            TestCustomAttributeRead(targetClassName, expectedValue, typeof(UInt64));
        }
        public ShouldReadSingle() : void
        {
            TestCustomAttributeRead("SampleClassWithFloatAttributeUsage", 3.14f, typeof(float));
        }
        public ShouldReadDouble() : void
        {
            TestCustomAttributeRead("SampleClassWithDoubleAttributeUsage", 3.14d, typeof(double));
        }
        public ShouldReadSerString() : void
        {
            TestCustomAttributeRead("SampleClassWithSerStringAttributeUsage", "abcd", typeof(string));
        }
        public ShouldReadNullSerString() : void
        {
            def testNullString(value : object, expectedValue : object, expectedType : Type) : void
            {
                value.ShouldBeNull("The string should be null");
            }

            TestCustomAttributeRead("SampleClassWithNullSerStringAttributeUsage", null, typeof(string), testNullString);
        }
        public ShouldReadEmptySerString() : void
        {
            TestCustomAttributeRead("SampleClassWithEmptySerStringAttributeUsage", string.Empty, typeof(string));
        }

        public ShouldReadTypeSerString() : void
        {            
            def testResult(value : object, expectedValue : object, expectedType : Type) : void
            {                                
                value.GetType().ShouldBeEqualTo(expectedType, "The actual type and the expected types don't match");

                def typeRef = value :> TypeReference;
                def qualifiedName = typeRef.QualifiedName;

                expectedValue.ShouldBeEqualTo(qualifiedName, "Wrong custom attribute argument value");
                qualifiedName.ShouldBeEqualTo(expectedValue, "Wrong FixedArg value");              
            }

            def expectedTypeName = "System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089";
            TestCustomAttributeRead("SampleClassWithTypeAttributeUsage", expectedTypeName, typeof(TypeReference), testResult);
        }

        public ShouldReadFieldOrPropType() : void
        {
            TestCustomAttributeRead("SampleClassWithObjectAttributeUsage", 42, typeof(Int32));
        }

        public ShouldFailIfPrologNotEncountered() : void
            expects CustomAttributeSignaturePrologNotFoundException
        {
            def targetClassName = "SampleClass";

            def root = base.GetMetadataRoot();            
            def tableStream = root.Heaps["#~"];

            def heap = TablesHeap();
            heap.ReadFrom(tableStream);

            def stringHeap = root.Heaps["#Strings"];

            // Get the CustomAttributeRow associated with 
            // the SampleClass
            def targetRow = GetTargetRow(targetClassName, heap, stringHeap);

            // Ensure that we have the correct type owner
            def parentRowRef = targetRow.Parent.ToRowRef(CodedTokenType.HasCustomAttribute);
            def parentRow = heap.GetRow.[TypeDefRow](parentRowRef.Row);            
            parentRow.TypeName.ToString(stringHeap).ShouldBeEqualTo(targetClassName, "Wrong Parent Type");

            // Read the CustomAttribute blob
            def blobStream = root.Heaps["#Blob"];
            def blobReader = BlobReader();            

            def blobIndex = targetRow.Value.ToUInt32();
            def customAttributeBlob = blobReader.Read(blobIndex, blobStream);

            def defectiveBlobBytes : array[byte] = array(customAttributeBlob.Length :> int);
            def defectiveBlob = MemoryStream(defectiveBlobBytes);
            blobStream.Seek(0);

            def parameters = targetRow.GetParameters(heap, blobStream);

            def customAttributeReader = CustomAttributeSignatureReader();

            // This call should fail
            def customAttributeSignature = customAttributeReader.Read(parameters, defectiveBlob, stringHeap, heap);                        
        }
        private TestCustomAttributeRead(targetClassName : string, expectedValue : object, expectedType : Type) : void
        {
            TestCustomAttributeRead(targetClassName, expectedValue, expectedType, TestExpectedValue);
        }
        private TestCustomAttributeRead(targetClassName : string, expectedValue : object, expectedType : Type, testExpectedValue : object * object * Type -> void) : void
        {
            def root = base.GetMetadataRoot();            
            def tableStream = root.Heaps["#~"];

            def heap = TablesHeap();
            heap.ReadFrom(tableStream);

            def stringHeap = root.Heaps["#Strings"];

            // Get the CustomAttributeRow associated with 
            // the SampleClass
            def targetRow = GetTargetRow(targetClassName, heap, stringHeap);

            // Ensure that we have the correct type owner
            def parentRowRef = targetRow.Parent.ToRowRef(CodedTokenType.HasCustomAttribute);
            def parentRow = heap.GetRow.[TypeDefRow](parentRowRef.Row);            
            parentRow.TypeName.ToString(stringHeap).ShouldBeEqualTo(targetClassName, "Wrong Parent Type");

            // Read the CustomAttribute blob
            def blobStream = root.Heaps["#Blob"];
            def blobReader = BlobReader();

            def blobIndex = targetRow.Value.ToUInt32();
            def customAttributeBlob = blobReader.Read(blobIndex, blobStream);

            blobStream.Seek(0);
            def parameters = targetRow.GetParameters(heap, blobStream);

            def customAttributeReader = CustomAttributeSignatureReader();
            def customAttributeSignature = customAttributeReader.Read(parameters, customAttributeBlob, stringHeap, heap);

            customAttributeSignature.FixedArguments.Count().ShouldBeEqualTo(1, "Wrong Number of FixedArgs");

            def arguments = customAttributeSignature.FixedArguments;
            def value = arguments[0].Value;

            testExpectedValue(value, expectedValue, expectedType);
        }
        private TestExpectedValue(value : object, expectedValue : object, expectedType : Type) : void
        {
            value.ShouldBeEqualTo(expectedValue, "Wrong FixedArg value");              
            value.GetType().ShouldBeEqualTo(expectedType, "The actual type and the expected types don't match");
        }
        private GetTargetRow(targetClassName : string, heap : TablesHeap, stringHeap : Stream) : CustomAttributeRow
            ensures value != null otherwise throw ArgumentException(string.Format("Unable to find class '{0}'", targetClassName))
        {
            mutable result : CustomAttributeRow = null;
            def customAttributeRows = heap.GetRows.[CustomAttributeRow]().ToArray();
            def length = customAttributeRows.Length;
            for(mutable i = 0; i < length && result == null; i++)
            {
                def row = customAttributeRows[i];
                def parentRowRef = row.Parent.ToRowRef(CodedTokenType.HasCustomAttribute);
                def parentRow = heap.GetRow.[TypeDefRow](parentRowRef.Row);            
                def parentName = parentRow.TypeName.ToString(stringHeap);

                when(parentName == targetClassName && parentRowRef.TableId != TableId.Field)
                {
                    result = row;
                }
            }

            result;
        }
    }
}
