using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using Tests.Macros;

using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

using Tao;
using Tao.Metadata;
using Tao.Metadata.Tables;
using Tao.Metadata.Tables.Rows;
using Tao.Metadata.Signatures;

namespace Tests
{
  public class StandAloneMethodSigTests
  {
      public ShouldBeAbleToReadSignatureWithCCallingConvention() : void
      {
          def inputStream = MemoryStream(GetSampleBytes(CallingConvention.C));
          def reader = StandAloneMethodSigReader();
          def signature = reader.Read(inputStream) :> StandAloneMethodSignature;
          signature.UsesCCallingConvention.ShouldBeTrue("This signature should be using the C calling convention");
      }
      public ShouldBeAbleToReadSignatureWithThisCallCallingConvention() : void
      {
          def inputStream = MemoryStream(GetSampleBytes(CallingConvention.ThisCall));
          def reader = StandAloneMethodSigReader();
          def signature = reader.Read(inputStream) :> StandAloneMethodSignature;
          signature.UsesThisCallCallingConvention.ShouldBeTrue("This signature should be using the ThisCall calling convention");
      }
      public ShouldBeAbleToReadSignatureWithFastCallCallingConvention() : void
      {
          def inputStream = MemoryStream(GetSampleBytes(CallingConvention.FastCall));
          def reader = StandAloneMethodSigReader();
          def signature = reader.Read(inputStream) :> StandAloneMethodSignature;
          signature.UsesFastCallCallingConvention.ShouldBeTrue("This signature should be using the FastCall calling convention");
      }
      public ShouldBeAbleToReadSignatureWithStdCallingConvention() : void
      {
          def inputStream = MemoryStream(GetSampleBytes(CallingConvention.StdCall));
          def reader = StandAloneMethodSigReader();
          def signature = reader.Read(inputStream) :> StandAloneMethodSignature;
          signature.UsesStdCallingConvention.ShouldBeTrue("This signature should be using the StdCall calling convention");
      }      
      public ShouldBeAbleToWriteSignatureWithCCallingConvention() : void
      {
          def expectedStream = MemoryStream(GetSampleBytes(CallingConvention.C));
          
          def signature = StandAloneMethodSignature();
          signature.ReturnType = RetType(VoidSignature.Instance);
          signature.UsesCCallingConvention = true;
          
          def outputStream = MemoryStream();
          def writer = StandAloneMethodSigWriter();
          writer.Write(signature, outputStream);
          
          outputStream.ShouldMatch(expectedStream);
      }
      public ShouldBeAbleToWriteSignatureWithThisCallCallingConvention() : void
      {
          def expectedStream = MemoryStream(GetSampleBytes(CallingConvention.ThisCall));
          
          def signature = StandAloneMethodSignature();
          signature.ReturnType = RetType(VoidSignature.Instance);
          signature.UsesThisCallCallingConvention = true;
          
          def outputStream = MemoryStream();
          def writer = StandAloneMethodSigWriter();
          writer.Write(signature, outputStream);
          
          outputStream.ShouldMatch(expectedStream);
      }
      public ShouldBeAbleToWriteSignatureWithFastCallCallingConvention() : void
      {
          def expectedStream = MemoryStream(GetSampleBytes(CallingConvention.FastCall));
          
          def signature = StandAloneMethodSignature();
          signature.ReturnType = RetType(VoidSignature.Instance);
          signature.UsesFastCallCallingConvention = true;
          
          def outputStream = MemoryStream();
          def writer = StandAloneMethodSigWriter();
          writer.Write(signature, outputStream);
          
          outputStream.ShouldMatch(expectedStream);
      }
      public ShouldBeAbleToWriteSignatureWithStdCallingConvention() : void
      {
          def expectedStream = MemoryStream(GetSampleBytes(CallingConvention.StdCall));
          
          def signature = StandAloneMethodSignature();
          signature.ReturnType = RetType(VoidSignature.Instance);
          signature.UsesStdCallingConvention = true;
          
          def outputStream = MemoryStream();
          def writer = StandAloneMethodSigWriter();
          writer.Write(signature, outputStream);
          
          outputStream.ShouldMatch(expectedStream);
      }
      
      private GetSampleBytes(convention : CallingConvention) : array[byte]
      {
          def firstByte = (convention :> byte);
                              
          def stream = MemoryStream();
          def writer = BinaryWriter(stream);
          
          // Write the calling convention
          writer.Write(firstByte);
                    
          // Write the number of parameters
          def paramCount : uint = 0;
          def integerWriter = CompressedIntegerWriter();
          integerWriter.WriteInteger(paramCount, stream);
          
          // Write the RetType
          def retType = RetType(VoidSignature.Instance);
          def retWriter = RetTypeWriter();
          retWriter.Write(retType, stream);
          
          stream.ToArray();
      }
  }
}
