using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using Tests.Macros;

using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

using Tao;

namespace Tests
{
  public class StandAloneMethodSigTests
  {
      public stub ShouldBeAbleToReadSignatureWithCCallingConvention() : void
      {
          
      }
      public stub ShouldBeAbleToReadSignatureWIthThisCallCallingConvention() : void
      {
      }
      public stub ShouldBeAbleToReadSignatureWithFastCallCallingConvention() : void
      {
      }
      public stub ShouldBeAbleToReadSignatureWithStdCallingConvention() : void
      {
      }      
      public stub ShouldBeAbleToWriteSignatureWithCCallingConvention() : void
      {
      }
      public stub ShouldBeAbleToWriteSignatureWIthThisCallCallingConvention() : void
      {
      }
      public stub ShouldBeAbleToWriteSignatureWithFastCallCallingConvention() : void
      {
      }
      public stub ShouldBeAbleToWriteSignatureWithStdCallingConvention() : void
      {
      }
      
      private GetSampleBytes(convention : CallingConvention) : array[byte]
      {
          def firstByte = (convention :> byte);
                              
          def stream = MemoryStream();
          def writer = BinaryWriter(stream);
          
          // Write the calling convention
          writer.Write(firstByte);
                    
          // Write the number of parameters
          def paramCount : uint = 0;
          def integerWriter = CompressedIntegerWriter();
          integerWriter.WriteInteger(paramCount, stream);
          
          // Write the RetType
          def retType = RetType(VoidSignature.Instance);
          def retWriter = RetTypeWriter();
          retWriter.Write(retType, stream);
          
          stream.ToArray();
      }
  }
}
