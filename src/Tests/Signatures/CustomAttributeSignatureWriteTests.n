using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using Tests.Macros;
using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

using Tao;
using Tao.Metadata;
using Tao.Metadata.Signatures;
using Tao.Metadata.Tables;
using Tao.Metadata.Tables.Rows;
using SampleCustomAttributeUsage;

namespace Tests
{
    public class CustomAttributeSignatureWriteTests : FileBasedTest
    {
        public stub ShouldWriteCustomAttributeParent() : void
        {
        }
        public stub ShouldWriteCustomAttributeTypeIndex() : void
        {
        }
        public stub ShouldWriteCustomAttributeBlobIndex() : void
        {
        }
        public stub ShouldWriteCustomAttributeBlob() : void
        {
        }
        public stub ShouldWriteBoxedEnum() : void
        {
        }
        public stub ShouldWriteBoxedArray() : void
        {
        }
        public stub ShouldWriteNamedField() : void
        {
        }
        public stub ShouldWriteNamedProperty() : void
        {
        }
        public stub ShouldWriteArray() : void
        {
        }
        public stub ShouldWriteCustomEnum() : void
        {
        }
        public ShouldWriteBoolean() : void
        {
            TestWrite("SampleClassWithBooleanAttributeUsage");
        }
        public ShouldWriteByte() : void
        {
            TestWrite("SampleClassWithByteAttributeUsage");
        }
        public ShouldWriteSignedByte() : void
        {
            TestWrite("SampleClassWithSignedByteAttributeUsage");
        }

        public ShouldWriteChar() : void
        {
            TestWrite("SampleClassWithCharAttributeUsage");
        }
        public ShouldWriteUInt16() : void
        {
            TestWrite("SampleClassWithUInt16AttributeUsage");
        }
        public ShouldWriteInt16() : void
        {
            TestWrite("SampleClassWithInt16AttributeUsage");
        }
        public ShouldWriteUInt32() : void
        {
            TestWrite("SampleClassWithUInt32AttributeUsage");
        }
        public ShouldWriteInt32() : void
        {
            TestWrite("SampleClass", 2);
        }
        public ShouldWriteUInt64() : void
        {
            TestWrite("SampleClassWithUInt64AttributeUsage");
        }
        public ShouldWriteInt64() : void
        {
            TestWrite("SampleClassWithInt64AttributeUsage");
        }
        public ShouldWriteSingle() : void
        {
            TestWrite("SampleClassWithFloatAttributeUsage");
        }
        public ShouldWriteDouble() : void
        {
            TestWrite("SampleClassWithDoubleAttributeUsage");
        }
        public ShouldWriteSerString() : void
        {   
            TestWrite("SampleClassWithSerStringAttributeUsage");
        }
        public ShouldWriteNullString() : void
        {
            TestWrite("SampleClassWithNullSerStringAttributeUsage");
        }
        public ShouldWriteEmptySerString() : void
        {
            TestWrite("SampleClassWithEmptySerStringAttributeUsage");
        }
        
        public stub ShouldWriteTypeSerString() : void
        {
        }
        public stub ShouldWriteFieldOrPropType() : void
        {
        }
        public stub ShouldWriteProlog() : void
        {
        }
        public stub ShouldBeAbleToWriteCustomAttributeRows() : void
        {
        }

        private TestWrite(targetClassName : string, expectedAttributeCount : int = 1, verifyOutput : array[byte] * array[byte] -> void) : void
        {
            // Read the CLR Metadata
            def root = base.GetMetadataRoot("SampleCustomAttributeUsage.dll");
            def tableStream = root.GetTablesHeap();

            def tablesHeap = TablesHeap();
            tablesHeap.ReadFrom(tableStream);

            def blobStream = root.GetBlobHeap();

            // Find the target class row
            def stringHeap = root.GetStringHeap();                                    
            def targetRow = tablesHeap.GetTypeRow.[TypeDefRow](targetClassName, stringHeap);
            targetRow.ShouldBeNotNull("Missing type '{0}'", targetClassName);

            def attributeRows = targetRow.GetCustomAttributeRows(tablesHeap);
            attributeRows.Count().ShouldBeEqualTo(expectedAttributeCount, "Wrong number of expected custom attribute rows for type '{0}'", targetClassName);

            mutable ctorSignature : IMethodSignature = null;
            mutable attributeRow : CustomAttributeRow = null;
            
            foreach(row : CustomAttributeRow in attributeRows)
            {
                when(ctorSignature == null)
                {
                    // Get the method signature for the attribute constructor
                    def typeRow = row.GetTypeRowFrom(tablesHeap);
                    def signature = typeRow.GetMethodSignature(blobStream);
                    def parameterCount = signature.Parameters.Count();
                    
                    when(parameterCount == 1)
                    {
                        ctorSignature = signature;
                        attributeRow = row;
                    }
                }
            }
            
            ctorSignature.ShouldBeNotNull("Unable to find the correct custom attribute constructor signature with the correct number of arguments");
            attributeRow.ShouldBeNotNull("There should be an attribute row at this point");
            
            def parameters = ctorSignature.Parameters;
            
            // Read the actual custom attribute blob from the given assembly
            def reader = CustomAttributeSignatureReader();
            def valueBlob = attributeRow.Value.ToBlob(blobStream).ToStream();
            def expectedSignature = reader.Read(parameters, valueBlob, stringHeap, tablesHeap);

            def expectedBlob = attributeRow.Value.ToBlob(blobStream);

            // The output stream should match the given stream
            def outputStream = MemoryStream();
            def writer = CustomAttributeSignatureWriter();
            writer.Write(expectedSignature, parameters,  outputStream, stringHeap, tablesHeap);
            
            when(!outputStream.Matches(expectedBlob.ToStream(), 0, expectedBlob.Length :> uint))
            {
                def results = outputStream.ToArray();
                verifyOutput(expectedBlob, results);
            }
        }
        private TestWrite(targetClassName : string, expectedAttributeCount : int = 1) : void
        {
            TestWrite(targetClassName, expectedAttributeCount, VerifyOutput);
        }
        private VerifyOutput(expectedStream : array[byte], outputStream : array[byte]) : void
        {                                                                          
            expectedStream.ShouldMatch(outputStream);
        }
    }
}
