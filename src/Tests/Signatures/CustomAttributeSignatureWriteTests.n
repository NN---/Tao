using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using Tests.Macros;
using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

using Tao;
using Tao.Metadata;
using Tao.Metadata.Signatures;
using Tao.Metadata.Tables;
using Tao.Metadata.Tables.Rows;
using SampleCustomAttributeUsage;

namespace Tests
{
    public class CustomAttributeSignatureWriteTests : FileBasedTest
    {
        public stub ShouldWriteCustomAttributeParent() : void
        {
        }
        public stub ShouldWriteCustomAttributeTypeIndex() : void
        {
        }
        public stub ShouldWriteCustomAttributeBlobIndex() : void
        {
        }
        public stub ShouldWriteCustomAttributeBlob() : void
        {
        }
        public stub ShouldWriteBoxedEnum() : void
        {
        }
        public stub ShouldWriteBoxedArray() : void
        {
        }
        public stub ShouldWriteNamedField() : void
        {
        }
        public stub ShouldWriteNamedProperty() : void
        {
        }
        public stub ShouldWriteArray() : void
        {
        }
        public stub ShouldWriteCustomEnum() : void
        {
        }
        public stub ShouldWriteBoolean() : void
        {
        }
        public ShouldWriteByte() : void
        {
            TestWrite("SampleClassWithByteAttributeUsage");
        }

        public stub ShouldWriteSignedByte() : void
        {
        }
        public stub ShouldWriteChar() : void
        {
        }
        public stub ShouldWriteUInt16() : void
        {
        }
        public stub ShouldWriteInt16() : void
        {
        }
        public stub ShouldWriteUInt32() : void
        {
        }
        public stub ShouldWriteInt32() : void
        {
        }
        public stub ShouldWriteUInt64() : void
        {
        }
        public stub ShouldWriteInt64() : void
        {
        }
        public stub ShouldWriteSingle() : void
        {
        }
        public stub ShouldWriteDouble() : void
        {
        }
        public stub ShouldWriteSerString() : void
        {
        }
        public stub ShouldWriteNullString() : void
        {
        }
        public stub ShouldWriteEmptySerString() : void
        {
        }
        public stub ShouldWriteTypeSerString() : void
        {
        }
        public stub ShouldWriteFieldOrPropType() : void
        {
        }
        public stub ShouldWriteProlog() : void
        {
        }
        public stub ShouldBeAbleToWriteCustomAttributeRows() : void
        {
        }

        private TestWrite(targetClassName : string, expectedAttributeCount : int = 1) : void
        {
            // Read the CLR Metadata
            def root = base.GetMetadataRoot("SampleCustomAttributeUsage.dll");
            def tableStream = root.GetTablesHeap();

            def tablesHeap = TablesHeap();
            tablesHeap.ReadFrom(tableStream);

            def blobStream = root.GetBlobHeap();

            // Find the target class row
            def stringHeap = root.GetStringHeap();                                    
            def targetRow = tablesHeap.GetTypeRow.[TypeDefRow](targetClassName, stringHeap);
            targetRow.ShouldBeNotNull("Missing type '{0}'", targetClassName);

            def attributeRows = targetRow.GetCustomAttributeRows(tablesHeap);
            attributeRows.Count().ShouldBeEqualTo(attributeRowCount, "Wrong number of expected custom attribute rows for type '{0}'", targetClassName);

            def attributeRow = attributeRows.First();

            // Get the method signature for the attribute constructor
            def typeRow = attributeRow.GetTypeRowFrom(tablesHeap);
            def ctorSignature = typeRow.GetMethodSignature(blobStream);
            def parameters = ctorSignature.Parameters;

            ctorSignature.ParameterCount.ShouldBeEqualTo(1, "Wrong parameter count");

            // Read the actual custom attribute blob from the given assembly
            def reader = CustomAttributeSignatureReader();
            def valueBlob = attributeRow.Value.ToBlob(blobStream).ToStream();
            def expectedSignature = reader.Read(parameters, valueBlob, stringHeap, tablesHeap);

            def expectedBlob = attributeRow.Value.ToBlob(blobStream);

            // The output stream should match the given stream
            def outputStream = MemoryStream();
            def writer = CustomAttributeSignatureWriter();
            writer.Write(expectedSignature, parameters,  outputStream, stringHeap, tablesHeap);

            outputStream.ShouldMatch(expectedBlob);
        }
    }
}
