using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using Tests.Macros;
using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

using Tao;
using Tao.CallingConvention;
using Tao.Metadata;
using Tao.Metadata.Signatures;
using Tao.Metadata.Tables;
using Tao.Metadata.Tables.Rows;

namespace Tests
{  
    public class MethodDefSignatureTests : FileBasedTableTest
    {
        public ShouldReadDefaultWithoutHasThisOrExplicitThis() : void
        {            
            def signatureBytes = CreateSignatureBytes(array[Default], 0, ElementType.Void);

            def stream = MemoryStream(signatureBytes);
            def reader = MethodDefSignatureReader();

            def signature = reader.Read(stream);
            signature.UsesDefaultCallingConvention.ShouldBeTrue("UsesDefaultCallingConvention should be true");
            signature.HasThis.ShouldBeFalse("HasThis should be false");
            signature.HasExplicitThis.ShouldBeFalse("HasExplicitThis should be false");
        }

        public ShouldReadHasThis() : void
        {            
            def signatureBytes = CreateSignatureBytes(array[HasThis, Default], 0, ElementType.Void);
            def stream = MemoryStream(signatureBytes);
            def reader = MethodDefSignatureReader();

            def signature = reader.Read(stream);
            signature.UsesDefaultCallingConvention.ShouldBeTrue("UsesDefaultCallingConvention should be true");
            signature.HasThis.ShouldBeTrue("HasThis should be true");
            signature.HasExplicitThis.ShouldBeFalse("HasExplicitThis should be false");
        }

        public ShouldReadHasThisAndExplicitThis() : void
        {
            def signatureBytes = CreateSignatureBytes(array[HasThis, ExplicitThis, Default], 0, ElementType.Void);            
            def stream = MemoryStream(signatureBytes);
            def reader = MethodDefSignatureReader();

            def signature = reader.Read(stream);
            signature.UsesDefaultCallingConvention.ShouldBeTrue("UsesDefaultCallingConvention should be true");
            signature.HasThis.ShouldBeTrue("HasThis should be true");
            signature.HasExplicitThis.ShouldBeTrue("HasExplicitThis should be true");
        }        
        public ShouldReadVarArg() : void
        {
            def signatureBytes = CreateSignatureBytes(array[VarArg], 0, ElementType.Void);
            def stream = MemoryStream(signatureBytes);
            def reader = MethodDefSignatureReader();

            def signature = reader.Read(stream);
            signature.UsesDefaultCallingConvention.ShouldBeFalse("UsesDefaultCallingConvention should be false");
            signature.UsesVariableArguments.ShouldBeTrue("UsesVariableArguments should be true");
            signature.HasThis.ShouldBeFalse("HasThis should be false");
            signature.HasExplicitThis.ShouldBeFalse("HasExplicitThis should be false");
        }

        public ShouldReadGenericAndGenParamCount() : void
        {            
            def signatureBytes = CreateGenericSignatureBytes(array[], 1, 0, ElementType.Void);
            def stream = MemoryStream(signatureBytes);
            def reader = MethodDefSignatureReader();

            def signature = reader.Read(stream);
            signature.UsesDefaultCallingConvention.ShouldBeFalse("UsesDefaultCallingConvention should be false");
            signature.UsesVariableArguments.ShouldBeFalse("UsesVariableArguments should be false");

            signature.IsGeneric.ShouldBeTrue("IsGeneric should be true");
            signature.GenericParameterCount.ShouldBeEqualTo(1, "Wrong generic parameter count");

            signature.HasThis.ShouldBeFalse("HasThis should be false");
            signature.HasExplicitThis.ShouldBeFalse("HasExplicitThis should be false");
        }
        public ShouldReadParamCount() : void
        {
            def signatureBytes = CreateSignatureBytes(array[Default], 2, ElementType.Void, ElementType.I4, ElementType.I2);
            def stream = MemoryStream(signatureBytes);
            def reader = MethodDefSignatureReader();

            def signature = reader.Read(stream);
            signature.UsesDefaultCallingConvention.ShouldBeTrue("UsesDefaultCallingConvention should be true");
            signature.IsGeneric.ShouldBeFalse("This method should not be generic");
            signature.HasThis.ShouldBeFalse("HasThis should be false");
            signature.HasExplicitThis.ShouldBeFalse("HasExplicitThis should be false");
            signature.ParameterCount.ShouldBeEqualTo(2, "Wrong Parameter Count");
        }
        public ShouldReadRetType() : void
        {
            def signatureBytes = CreateSignatureBytes(array[Default], 2, ElementType.Void, ElementType.I8, ElementType.R4);
            def stream = MemoryStream(signatureBytes);
            def reader = MethodDefSignatureReader();

            def signature = reader.Read(stream);
            signature.UsesDefaultCallingConvention.ShouldBeTrue("UsesDefaultCallingConvention should be true");
            signature.IsGeneric.ShouldBeFalse("This method should not be generic");
            signature.HasThis.ShouldBeFalse("HasThis should be false");
            signature.HasExplicitThis.ShouldBeFalse("HasExplicitThis should be false");
            signature.ParameterCount.ShouldBeEqualTo(2, "Wrong Parameter Count");

            def retType = signature.ReturnType;
            retType.Type.ShouldBeEqualTo(VoidSignature.Instance, "Expected void return type");
        }              

        public ShouldThrowExceptionWhenEncounteringExplicitThisWithoutHasThis() : void
            expects BadImageFormatException
        {
            def signatureBytes = CreateSignatureBytes(array[ExplicitThis, Default], 2, ElementType.Void);
            def stream = MemoryStream(signatureBytes);
            def reader = MethodDefSignatureReader();

            def signature = reader.Read(stream);
        }
        public ShouldReadMultipleParameters() : void
        {
            def signatureBytes = CreateSignatureBytes(array[Default], 2, ElementType.Void, ElementType.I4, ElementType.I2);
            def stream = MemoryStream(signatureBytes);

            def reader = MethodDefSignatureReader();
            def signature = reader.Read(stream);

            signature.ParameterCount.ShouldBeEqualTo(2, "Wrong parameter count");

            def parameters = signature.Parameters;
            parameters.Count.ShouldBeEqualTo(2, "The number of parameters read should be 2");

            parameters[0].Type.ElementType.ShouldBeEqualTo(ElementType.I4, "Expected an signed integer type");
            parameters[1].Type.ElementType.ShouldBeEqualTo(ElementType.I2, "Expected an signed word type");
        }        
        
        public ShouldWriteDefaultWithoutHasThisOrExplicitThis() : void
        {
            def expectedBytes = CreateSignatureBytes(array[Default], 0, ElementType.Void);
            def signature = MethodDefSignature();
            signature.UsesDefaultCallingConvention = true;
            
            def returnType = RetType();
            returnType.Type = VoidSignature.Instance;
            
            signature.ReturnType = returnType;
            
            def outputStream = MemoryStream();
            def writer = MethodDefSignatureWriter();
            writer.Write(signature, outputStream);
            
            outputStream.ShouldMatch(expectedBytes);
        }
        public ShouldThrowExceptionWhenTryingToWriteSignatureWithNoValidCallingConventions() : void
            expects ArgumentException
        {
            def signature = MethodDefSignature();
            def outputStream = MemoryStream();
            def writer = MethodDefSignatureWriter();
            writer.Write(signature, outputStream);            
        }
        public ShouldThrowExceptionWhenTryingToWriteSignatureWithExplicitThisSetWithoutHavingHasThisSet() : void
            expects InvalidOperationException
        {
            def signature = MethodDefSignature();            
            signature.HasExplicitThis = true;
            signature.HasThis = false;
            signature.ReturnType = RetType(VoidSignature.Instance);
            
            def outputStream = MemoryStream();
            def writer = MethodDefSignatureWriter();
            writer.Write(signature, outputStream);            
        }
        public ShouldWriteHasThis() : void
        {
            def expectedBytes = CreateSignatureBytes(array[HasThis, Default], 0, ElementType.Void);
            def signature = MethodDefSignature();
            signature.UsesDefaultCallingConvention = true;
            signature.HasThis = true;
            
            def returnType = RetType();
            returnType.Type = VoidSignature.Instance;
            
            signature.ReturnType = returnType;
            
            def outputStream = MemoryStream();
            def writer = MethodDefSignatureWriter();
            writer.Write(signature, outputStream);
            
            outputStream.ShouldMatch(expectedBytes);
        }
        public ShouldWriteHasThisAndExplicitThis() : void
        {
            def expectedBytes = CreateSignatureBytes(array[HasThis, ExplicitThis, Default], 0, ElementType.Void);
            def signature = MethodDefSignature();
            signature.UsesDefaultCallingConvention = true;
            signature.HasThis = true;
            signature.HasExplicitThis = true;
            
            def returnType = RetType();
            returnType.Type = VoidSignature.Instance;
            
            signature.ReturnType = returnType;
            
            def outputStream = MemoryStream();
            def writer = MethodDefSignatureWriter();
            writer.Write(signature, outputStream);
            
            outputStream.ShouldMatch(expectedBytes);
        }        
        public ShouldWriteVarArg() : void
        {
            def expectedBytes = CreateSignatureBytes(array[VarArg], 0, ElementType.Void);
            def signature = MethodDefSignature();
            signature.UsesVariableArguments = true;
            signature.ReturnType = RetType(VoidSignature.Instance);
            
            def outputStream = MemoryStream();
            def writer = MethodDefSignatureWriter();
            writer.Write(signature, outputStream);
            
            outputStream.ShouldMatch(expectedBytes);            
        }        
        public StubShouldWriteGenericAndGenParamCount() : void
        {
            def expectedBytes = CreateGenericSignatureBytes(array[], 1, 0, ElementType.Void);
            
            def signature = MethodDefSignature();
            signature.IsGeneric = true;
            signature.GenericParameterCount = 1;
            signature.ReturnType = RetType(VoidSignature.Instance);
            
            def outputStream = MemoryStream();
            def writer = MethodDefSignatureWriter();
            writer.Write(signature, outputStream);
            
            outputStream.ShouldMatch(expectedBytes);            
        }
        
        public ShouldWriteParameters() : void
        {
            def expectedBytes = CreateSignatureBytes(array[VarArg], 2, ElementType.Void, ElementType.I4, ElementType.I2);
            def signature = MethodDefSignature();
            
            signature.UsesVariableArguments = true;
            signature.ParameterCount = 2;
            signature.Parameters.Add(Param(TypeSignature(ElementType.I4)));
            signature.Parameters.Add(Param(TypeSignature(ElementType.I2)));
            signature.ReturnType = RetType(VoidSignature.Instance);
            
            def outputStream = MemoryStream();
            def writer = MethodDefSignatureWriter();
            writer.Write(signature, outputStream);
            
            outputStream.ShouldMatch(expectedBytes);            
            
            outputStream.Seek(0);
            def signatureReader = MethodDefSignatureReader();
            def writtenSignature = signatureReader.Read(outputStream);
            writtenSignature.ParameterCount.ShouldBeEqualTo(2, "Wrong Parameter Count");
        }
               
        public ShouldBeAbleToReadFunctionPointerSignatureAsTypeSignature() : void
        {
            def signatureBytes = CreateSignatureBytes(array[Default], 0, ElementType.Void);
            
            // The sample type signature will look like: FNPTR DEFAULT (zero parameters) VOID
            def inputStream = MemoryStream();
            def writer = BinaryWriter(inputStream);
            writer.Write(ElementType.FnPtr :> byte);
            writer.Write(signatureBytes);
            
            inputStream.Seek(0);
            
            def typeSignature = TypeSignature.ReadFrom(inputStream).As.[MethodDefFunctionPointerSignature]();
            typeSignature.ShouldBeNotNull("Invalid Type Signature");
            
            def methodSignature = typeSignature.MethodSignature;
            
            methodSignature.UsesDefaultCallingConvention.ShouldBeTrue("UsesDefaultCallingConvention should be true");
            methodSignature.HasThis.ShouldBeFalse("HasThis should be false");
            methodSignature.HasExplicitThis.ShouldBeFalse("HasExplicitThis should be false");
        }
        public ShouldBeAbleToReadFunctionPointerSignatureAsTypeSpec() : void
        {
            def signatureBytes = CreateSignatureBytes(array[Default], 0, ElementType.Void);
            
            // The sample type signature will look like: FNPTR DEFAULT (zero parameters) VOID
            def inputStream = MemoryStream();
            def writer = BinaryWriter(inputStream);
            writer.Write(ElementType.FnPtr :> byte);
            writer.Write(signatureBytes);
            
            inputStream.Seek(0);
            
            def typeSignature = TypeSpec.ReadFrom(inputStream).As.[MethodDefFunctionPointerSignature]();
            typeSignature.ShouldBeNotNull("Invalid Type Signature");
            
            def methodSignature = typeSignature.MethodSignature;
            
            methodSignature.UsesDefaultCallingConvention.ShouldBeTrue("UsesDefaultCallingConvention should be true");
            methodSignature.HasThis.ShouldBeFalse("HasThis should be false");
            methodSignature.HasExplicitThis.ShouldBeFalse("HasExplicitThis should be false");
        }
        
        public ShouldBeAbleToWriteFunctionPointerSignatureAsTypeSignature() : void
        {
            def signatureBytes = CreateSignatureBytes(array[Default], 0, ElementType.Void);
            
            // The expected type signature should look like: FNPTR DEFAULT (zero parameters) VOID
            def expectedStream = MemoryStream();
            def writer = BinaryWriter(expectedStream);
            writer.Write(ElementType.FnPtr :> byte);
            writer.Write(signatureBytes);
            
            expectedStream.Seek(0);
            
            def methodSignature = MethodDefSignature();
            methodSignature.ReturnType = RetType(VoidSignature.Instance);
            methodSignature.UsesDefaultCallingConvention = true;
            
            def typeSignature = MethodDefFunctionPointerSignature();
            typeSignature.MethodSignature = methodSignature;
            
            def outputStream = MemoryStream();
            typeSignature.Write(outputStream);
            
            outputStream.ShouldMatch(expectedStream);
        }
        
        public ShouldBeAbleToReadCorrectSignatureForValueType() : void
        {
            def targetClassName = "SampleClassWithSampleEnumAttributeUsage";
            
            def root = base.GetMetadataRoot();            
            def tableStream = root.Heaps["#~"];

            def heap = TablesHeap();
            heap.ReadFrom(tableStream);

            def stringHeap = root.Heaps["#Strings"];
            def blobStream = root.Heaps["#Blob"];
                        
            // Find the target class by name                                   
            def targetIndex = heap.GetTypeRowIndex.[TypeDefRow](targetClassName, stringHeap);            
            targetIndex.ShouldBeNotNull("There should be a valid index at this point");
                        
            // Find the attribute that points back to the target type            
            def isTargetAttribute(row : CustomAttributeRow) : bool                
            {
                def rowRef = row.Parent.ToRowRef(CodedTokenType.HasCustomAttribute);
                
                def isTargetTable = rowRef.TableId == TableId.TypeDef;
                def targetIndexValue = targetIndex.Value;
                def hasMatchingIndex = rowRef.Row == targetIndexValue;
                
                isTargetTable && hasMatchingIndex;
            }
            
            def attributeRow = heap.GetRows.[CustomAttributeRow](isTargetAttribute).First();
            def parentRef : RowReference = attributeRow.GetParentRowReference();
            
            parentRef.TableId.ShouldBeEqualTo(TableId.TypeDef, "Wrong Parent TableId");
            
            def targetRow = heap.GetRow.[TypeDefRow](parentRef.Row);
            targetRow.TypeName.ToString(stringHeap).ShouldBeEqualTo(targetClassName, "Wrong target type");
            
            def typeRef = attributeRow.GetTypeRowReference();
            typeRef.TableId.ShouldBeEqualTo(TableId.MethodDef, "Wrong Type TableId");
            
            def methodIndex = typeRef.Row;
            def methodRow = heap.GetRow.[MethodDefRow](methodIndex);
            
            def signature = methodRow.GetMethodSignature(blobStream);
            signature.ParameterCount.ShouldBeEqualTo(1, "Wrong Parameter Count");
            
            //  Check the signature parameters and make sure that the value type points to the correct row and table
            def parameterType = signature.Parameters[0].Type :> ValueTypeSignature;
            parameterType.TableId.ShouldBeEqualTo(TableId.TypeDef, "Wrong TableId for the parameter type");
            
            def expectedRow = heap.GetTypeRowIndex.[TypeDefRow]("SampleEnum", stringHeap);
            expectedRow.ShouldBeNotNull("There should be a typedef row that corresponds to the SampleEnum type.");
            
            def expectedRowValue = expectedRow.Value;
            parameterType.Row.ShouldBeEqualTo(expectedRowValue, "Wrong Row Value");
        }
        
        private CreateGenericSignatureBytes(conventions: IEnumerable.[CallingConvention], genericParameterCount : uint, parameterCount : uint, returnType : ElementType) : array[byte]
        {
            def stream = MemoryStream();
            def writer = BinaryWriter(stream);

            mutable firstByte = 0 : byte;
            foreach(convention in conventions)
            {
                firstByte |= (convention :> byte);
            }

            when(conventions.Any())
            {
                writer.Write(firstByte);
            }

            writer.Write(CallingConvention.Generic :> byte);

            def integerWriter = CompressedIntegerWriter();
            integerWriter.WriteInteger(genericParameterCount, stream);
            integerWriter.WriteInteger(parameterCount, stream);
            
            writer.Write(returnType :> byte);

            stream.ToArray();
        }

        private CreateSignatureBytes(conventions: IEnumerable.[CallingConvention], parameterCount : uint, returnType : ElementType, params parameterTypes : array[ElementType]) : array[byte]
        {
            def stream = MemoryStream();
            def writer = BinaryWriter(stream);

            mutable firstByte = 0 : byte;
            foreach(convention in conventions)
            {
                firstByte |= (convention :> byte);
            }

            writer.Write(firstByte);

            def integerWriter = CompressedIntegerWriter();
            integerWriter.WriteInteger(parameterCount, stream);

            def retWriter = RetTypeWriter();
            def retType = RetType();

            def returnTypeSignature = TypeSignature();
            returnTypeSignature.ElementType = returnType;

            retType.Type =  returnTypeSignature;
            retWriter.Write(retType, stream);

            def paramTypeWriter = ParamWriter();
            foreach(type in parameterTypes)
            {
                def paramType = Param();
                def typeSignature = TypeSignature();
                typeSignature.ElementType = type;
                paramType.Type = typeSignature;

                paramTypeWriter.Write(paramType, stream);
            }

            stream.ToArray();
        }
        protected override TargetAssemblyFileName : string 
        { 
            get
            {
                "SampleCustomAttributeUsage.dll";
            }
        }
    }
}
