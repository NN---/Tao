using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using Tests.Macros;
using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

using Tao;
using Tao.Metadata;
using Tao.Metadata.Signatures;
using Tao.Metadata.Tables;
using Tao.Metadata.Tables.Rows;
namespace Tests
{
    public class GenericInstanceTests
    {
        public ShouldOnlyAllowGenericTypeInstanceClassToBeAReferenceTypeOrValueType() : void
            expects InvalidOperationException
        {
            def signature = GenericTypeInstance();
            signature.IsValueType = true;
            signature.IsClass = true;
        }

        public ShouldReadGenericClassInstanceType() : void
        {
            TestTypeSignatureRead(ShouldReadGenericClassInstanceType);
        }
        
        public ShouldReadGenericClassInstanceTypeAsTypeSpec() : void
        {
            TestTypeSpecRead(ShouldReadGenericClassInstanceType);
        }
        public ShouldReadGenericValueType() : void
        {
            TestTypeSignatureRead(ShouldReadGenericValueType);
        }
        public ShouldReadGenericValueTypeAsTypeSpec() : void
        {
            TestTypeSpecRead(ShouldReadGenericValueType);
        }
               
        public ShouldReadGenericArgCount() : void
        {
            TestTypeSignatureRead(ShouldReadGenericArgCount);
        }
        
        public ShouldReadGenericArgCountAsTypeSpec() : void
        {
            TestTypeSpecRead(ShouldReadGenericArgCount);
        }
               
        public ShouldReadGenericArguments() : void
        {
            TestTypeSignatureRead(ShouldReadGenericArguments);
        }
        public ShouldReadGenericArgumentsAsTypeSpec() : void
        {
           TestTypeSpecRead(ShouldReadGenericArguments); 
        }                
        
        public ShouldReadTableId() : void
        {
            TestTypeSignatureRead(ShouldReadTableId);
        }
        public ShouldReadTableIdAsTypeSpec() : void
        {
            TestTypeSpecRead(ShouldReadTableId);
        }        
        public ShouldReadRow() : void
        {
            TestTypeSignatureRead(ShouldReadRow);   
        }
        public ShouldReadRowAsTypeSpec() : void
        {
            TestTypeSpecRead(ShouldReadRow);
        }
                
        public ShouldWriteGenericClassInstanceType() : void
        {
            def expectedBytes = CreateSampleBytesForGenericClassType();

            def signature = GenericTypeInstance();
            signature.TableId = TableId.TypeRef;
            signature.Row = 12;

            signature.TypeArguments.Add(TypeSignature(ElementType.I4));
            signature.IsClass = true;

            def outputStream = MemoryStream();
            signature.Write(outputStream);
            outputStream.ShouldMatch(expectedBytes);
        }

        public ShouldWriteGenericValueType() : void
        {
            def doTest(actualSignature : GenericTypeInstance) : void
            {
                actualSignature.IsClass.ShouldBeFalse("This type should not be a class type");
                actualSignature.IsValueType.ShouldBeTrue("This type should be a value type"); 
            }

            TestWrite(doTest);
        }
        public ShouldWriteGenericArgCount() : void
        {
            def doTest(actualSignature : GenericTypeInstance) : void
            {
                actualSignature.TypeArguments.Count.ShouldBeEqualTo(1, "Wrong number of type arguments");
            }

            TestWrite(doTest);
        }
        public ShouldWriteGenericArguments() : void
        {
            def doTest(actualSignature : GenericTypeInstance) : void
            {
                actualSignature.TypeArguments[0].ElementType.ShouldBeEqualTo(ElementType.I4, "Wrong Argument Type");
            }

            TestWrite(doTest);
        }
        public ShouldWriteRow() : void
        {            
            def doTest(actualSignature : GenericTypeInstance) : void
            {
                actualSignature.Row.ShouldBeEqualTo(12, "Wrong Row");
            }

            TestWrite(doTest);
        }
        public ShouldWriteTableId() : void
        {
            def doTest(actualSignature : GenericTypeInstance) : void
            {
                actualSignature.TableId.ShouldBeEqualTo(TableId.TypeRef, "Wrong TableId");
            }

            TestWrite(doTest);
        }

        private ShouldReadTableId(readSignature : Stream -> GenericTypeInstance) : void
        {
            def inputStream = MemoryStream(CreateSampleBytesForGenericClassType());
            def signature = TypeSignature.ReadFrom(inputStream).As.[GenericTypeInstance]();
            signature.TableId.ShouldBeEqualTo(TableId.TypeRef, "Wrong TableId");
        }
        private ShouldReadRow(readSignature : Stream -> GenericTypeInstance) : void
        {
            def inputStream = MemoryStream(CreateSampleBytesForGenericClassType());
            def signature = TypeSignature.ReadFrom(inputStream).As.[GenericTypeInstance]();
            signature.Row.ShouldBeEqualTo(12, "Wrong Row"); 
        }
        
        private TestTypeSpecRead(doTest : (Stream -> GenericTypeInstance) -> void) : void
        {
            doTest(inputStream => TypeSpec.ReadFrom(inputStream).As.[GenericTypeInstance]());
        }
        
        private TestTypeSignatureRead(doTest : (Stream -> GenericTypeInstance) -> void) : void
        {
            doTest(inputStream => TypeSignature.ReadFrom(inputStream).As.[GenericTypeInstance]());
        }
        
        private ShouldReadGenericArguments(readSignature : Stream -> GenericTypeInstance) : void
        {
            def inputStream = MemoryStream(CreateSampleBytesForGenericClassType());
            def signature = readSignature(inputStream);
            signature.TypeArguments.Count.ShouldBeEqualTo(1, "Wrong Argument Count");
            signature.TypeArguments[0].ElementType.ShouldBeEqualTo(ElementType.I4, "Wrong Element Type");
        }
        
        private ShouldReadGenericArgCount(readSignature : Stream -> GenericTypeInstance) : void
        {
            def inputStream = MemoryStream(CreateSampleBytesForGenericClassType());
            def signature = TypeSignature.ReadFrom(inputStream).As.[GenericTypeInstance]();
            signature.TypeArguments.Count.ShouldBeEqualTo(1, "Wrong Argument Count");
        }
        
        private ShouldReadGenericClassInstanceType(readSignature : Stream -> GenericTypeInstance) : void
        {
            def inputStream = MemoryStream(CreateSampleBytesForGenericClassType());
            def signature = readSignature(inputStream);

            signature.IsClass.ShouldBeTrue("This type should be a class");
            signature.IsValueType.ShouldBeFalse("This type should not be a value type");                                    
        }
        private ShouldReadGenericValueType(readSignature : Stream -> GenericTypeInstance) : void
        {
            def inputStream = MemoryStream(CreateSampleBytes(ElementType.ValueType));
            def signature = readSignature(inputStream);

            signature.IsClass.ShouldBeFalse("This type should not be a class type");
            signature.IsValueType.ShouldBeTrue("This type should be a value type");            
        }
        
        private TestWrite(doTest : GenericTypeInstance -> void) : void
        {
            def expectedStream = MemoryStream(CreateSampleBytes(ElementType.ValueType));
            def outputStream = MemoryStream();

            def sampleSignature = GenericTypeInstance();
            sampleSignature.TableId = TableId.TypeRef;
            sampleSignature.Row = 12;
            sampleSignature.IsValueType = true;
            sampleSignature.TypeArguments.Add(TypeSignature(ElementType.I4));
            
            sampleSignature.Write(outputStream);
            
            outputStream.Seek(0);

            def actualSignature = TypeSignature.ReadFrom(outputStream).As.[GenericTypeInstance]();
            
            
            doTest(actualSignature);

            expectedStream.ShouldMatch(outputStream);
        }
        private CreateSampleBytes(type : ElementType) : array[byte]
        {
            def stream = MemoryStream();
            def writer = BinaryWriter(stream);

            // Write the GENERICINST marker
            writer.Write(ElementType.GenericInst :> byte);

            // Write the CLASS marker
            writer.Write(type :> byte);

            def encoder = CodedTokenEncoder();
            def codedToken = encoder.Encode(CodedTokenType.TypeDefOrTypeRef, TableId.TypeRef, 12);

            // Write the token
            writer.Write(codedToken : uint);

            // Write the generic argument count 
            def integerWriter = CompressedIntegerWriter();
            integerWriter.WriteInteger(1, stream);

            // Write the generic argument(s)
            writer.Write(ElementType.I4 :> byte);

            stream.ToArray();
        }
        private CreateSampleBytesForGenericClassType() : array[byte]
        {
            def stream = MemoryStream();
            def writer = BinaryWriter(stream);

            // Write the GENERICINST marker
            writer.Write(ElementType.GenericInst :> byte);

            // Write the CLASS marker
            writer.Write(ElementType.Class :> byte);

            def encoder = CodedTokenEncoder();
            def codedToken = encoder.Encode(CodedTokenType.TypeDefOrTypeRef, TableId.TypeRef, 12);

            // Write the token
            writer.Write(codedToken : uint);

            // Write the generic argument count 
            def integerWriter = CompressedIntegerWriter();
            integerWriter.WriteInteger(1, stream);

            // Write the generic argument(s)
            writer.Write(ElementType.I4 :> byte);

            stream.ToArray();
        }
    }
}
