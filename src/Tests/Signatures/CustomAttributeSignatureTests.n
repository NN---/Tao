using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using Tests.Macros;
using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

using Tao;
using Tao.Metadata;
using Tao.Metadata.Signatures;
using Tao.Metadata.Tables;
using Tao.Metadata.Tables.Rows;

namespace Tests
{
    public partial class CustomAttributeSignatureTests : FileBasedTableTest
    {               
        public ShouldBeAbleToExtractCustomAttributeRows() : void
        {
            def heap = TablesHeap();
            def tableData = MemoryStream(base.GetTableStreamData());
            heap.ReadFrom(tableData);
          
            def customAttributeRows = heap.GetRows.[CustomAttributeRow]().ToArray();
            (customAttributeRows.Length > 0).ShouldBeTrue("There should be at least one CustomAttribute row here");
        }
       
        public ShouldBeAbleToGetCustomAttributeRowsForSpecificParent() : void
        {
            def root = base.GetMetadataRoot();
            def tableStream = root.Heaps["#~"];
            
            def heap = TablesHeap();
            heap.ReadFrom(tableStream);
            
            def assemblyRowIndex : uint = 1;
            def typeDefRowIndex : uint = 2;            
                        
            def assemblyAttributeRows = heap.GetCustomAttributeRows(TableId.Assembly, assemblyRowIndex);
            assemblyAttributeRows.Count().ShouldBeEqualTo(14, "Wrong Assembly Attribute Rows");
            
            def typeDefAttributeRows = heap.GetCustomAttributeRows(TableId.TypeDef, typeDefRowIndex);
            typeDefAttributeRows.Count().ShouldBeEqualTo(1, "Wrong TypeDef Attribute Rows");
        }
        
        protected override TargetAssemblyFileName : string 
        { 
            get
            {
                "SampleCustomAttributeUsage.dll";
            }
        }
    }
}
