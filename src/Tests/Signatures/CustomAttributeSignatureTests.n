using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using Tests.Macros;
using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

using Tao;
using Tao.Metadata;
using Tao.Metadata.Tables;
using Tao.Metadata.Tables.Rows;

namespace Tests
{
    public class CustomAttributeSignatureTests : FileBasedTableTest
    {
        public stub ShouldBeAbleToExtractParametersFromMethodDefIndex() : void
        {
            def root = base.GetMetadataRoot();
            def tableStream = root.Heaps["#~"];
            def blobStream = root.Heaps["#Blob"];
            
            def heap = TablesHeap();
            heap.ReadFrom(tableStream);
            
            // Steps for extracting the method parameters:
            // 1) def typeRow = CustomAttributeRow.GetTypeRowFrom(heap)
            // 2) def signature = typeRow.GetMethodSignature(blobStream)
            // 3) def parameters = signature.Parameters
        }
        public stub ShouldBeAbleToExtractParametersFromMethodRefIndex() : void
        {
        }
        public stub ShouldBeAbleToExtractMethodDefSignatureForCustomAttributeRow() : void
        {            
        }
        public stub ShouldBeAbleToExtractMethodRefSignatureForCustomAttributeRow() : void
        {
        }
        public ShouldBeAbleToExtractCustomAttributeRows() : void
        {
            def heap = TablesHeap();
            def tableData = MemoryStream(base.GetTableStreamData());
            heap.ReadFrom(tableData);
          
            def customAttributeRows = heap.GetRows.[CustomAttributeRow, CustomAttributeTable]().ToArray();
            (customAttributeRows.Length > 0).ShouldBeTrue("There should be at least one CustomAttribute row here");
        }
        public stub ShouldBeAbleToGetCustomAttributeRowForSpecificParent() : void
        {
        }
        protected override TargetAssemblyFileName : string 
        { 
            get
            {
                "SampleCustomAttributeUsage.dll";
            }
        }
    }
}
