using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Tao;
using Tao.Interfaces;
using Tests.Macros;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Tests
{
  public class SectionAddressResolutionTests
  {      
    public ShouldResolveExportTableAddress() : void
    {
      TestResolve(Location.ExportTable);
    }	
    public ShouldResolveImportTableAddress() : void
    {
      def location = Location.ImportTable;
      def expectedRva : uint = 0x0000EE98;
      def expectedSize : uint = 0x50;
      
      TestResolve(location, expectedRva, expectedSize);
    }	        
    
    public ShouldResolveResourceTableAddress() : void
    {
      TestResolve(Location.ResourceTable);
    }	
    
    public ShouldResolveExceptionTableAddress() : void
    {
      TestResolve(Location.ExceptionTable);
    }	
    public ShouldResolveCertificateTableAddress() : void
    {
      TestResolve(Location.CertificateTable);
    }		
    public ShouldResolveDebugAddress() : void
    {
      TestResolve(Location.Debug);
    }    
    public ShouldResolveCopyrightAddress() : void
    {
      TestResolve(Location.Copyright);
    }	
    public ShouldResolveGlobalPtrAddress() : void
    {
      TestResolve(Location.GlobalPtr);
    }    
    public ShouldResolveTLSAddress() : void
    {
      TestResolve(Location.TLS);
    }	
    public ShouldResolveLoadConfigAddress() : void
    {
      TestResolve(Location.LoadConfig);
    }	
    public ShouldResolveBoundImportAddress() : void
    {
      TestResolve(Location.BoundImport);
    }	
    public ShouldResolveIATAddress() : void
    {
      TestResolve(Location.ImportAddressTable);
    }	
    public ShouldResolveDelayImportDescriptorAddress() : void
    {
      TestResolve(Location.DelayImportDescriptor);
    }	
    public ShouldResolveCLIHeaderAddress() : void
    {
      TestResolve(Location.CLIHeader);
    }	
    public ShouldResolveMetadataRootAddress() : void
    {
      TestResolve(Location.MetadataRoot);
    }	
    public ShouldResolveRelocationTableAddress() : void
    {
      TestResolve(Location.Relocations);
    }	   
    private TestResolve(location : Location) : void
    {
      def imageFile = @"..\..\SampleBinaries\SamplePE32PlusApp.exe";
      def image = Image.ReadFrom(imageFile);
      
      def expectedRva : uint = 0xFEED;
      def expectedSize : uint = 0xFEEE;      
      
      // Write the dummy values to the target location
      def writer = ImageAddressWriter();
      writer.WriteAddressOf(location, Address(expectedRva, expectedSize), image);
      
      // The address should match the dummy values
      TestResolve(image, location, expectedRva, expectedSize);
    }
    private TestResolve(image : IImage, location : Location, expectedRva : uint, expectedSize : uint) : void
    {
      def resolver = ImageAddressReader();
      def address = resolver.ReadAddressOf(location, image);
      
      assert address.Rva equals expectedRva otherwiseprint "Invalid Rva";
      assert address.Size equals expectedSize otherwiseprint "Invalid Size";
    }    
    private TestResolve(location : Location, expectedRva : uint, expectedSize : uint) : void
    {
      def imageFile = @"..\..\SampleBinaries\SamplePE32PlusApp.exe";
      def image = Image.ReadFrom(imageFile);
      
      TestResolve(image, location, expectedRva, expectedSize);
    }
  }
}
