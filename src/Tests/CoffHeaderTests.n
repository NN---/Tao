using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Tests.Macros;
using Tao;
using Tao.Interfaces;

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;

namespace Tests
{
  public class CoffHeaderTests
  {    
    public ShouldThrowBadImageFormatExceptionIfMagicPESignatureNotFoundDuringReadOperation() : void
        expects BadImageFormatException
    {
      def randomBytes = array[0x42 : byte, 0x43];
      def stream = MemoryStream(randomBytes);
      
      def reader = CoffHeaderReader();
      _ = reader.Read(stream);     
    }

    public ShouldThrowBadImageFormatExceptionIfStreamLengthIsTooShort() : void
        expects BadImageFormatException
    {
      def bytes = array[0x50 : byte, 0x45];
      def stream = MemoryStream(bytes);
      
      def reader = CoffHeaderReader();
      _ = reader.Read(stream);     
    }
	
    public ShouldThrowNotSupportedExceptionIfMachineTypeIsNotSupported() : void
        expects NotSupportedException
    {
      def machineBytes = array[0x66 : byte, 0x04];
      ShouldRecognizeMachineType(machineBytes, Machine.MIPSFPU16);
    }
    
    public ShouldBeAbleToRecognizeI386() : void
    {
      def machineBytes = array[0x4C : byte, 0x01];
      ShouldRecognizeMachineType(machineBytes, Machine.I386);
    }
        
    public ShouldBeAbleToRecognizeAMD64() : void
    {
      def machineBytes = array[0x64 : byte, 0x86];
      ShouldRecognizeMachineType(machineBytes, Machine.Amd64); 
    }
    
    public ShouldBeAbleToRecognizeIA64() : void
    {
      def machineBytes = array[0x00 : byte, 0x02];
      ShouldRecognizeMachineType(machineBytes, Machine.IA64); 
    }
    
    public ShouldBeAbleToRecognizeUnknownMachineType() : void
    {
      def machineBytes = array[0x00 : byte, 0x00];
      ShouldRecognizeMachineType(machineBytes, Machine.Unknown); 
    }
    
    public ShouldBeAbleToReadNumberOfSections() : void
    {
      def header = ReadHeader();      
      assert header.NumberOfSections equals 2 otherwiseprint "Invalid header count";
    }
    
    public ShouldReadTimeDateStamp() : void
    {
      def header = ReadHeader();
      assert header.TimeDateStamp equals 0x4AD286DD otherwiseprint "Invalid TimeDateStamp";
    }
    
    public ShouldReadPointerToSymbolTable() : void
    {
      def header = ReadHeader();
      assert header.PointerToSymbolTable equals 0 otherwiseprint "Invalid PointerToSymbolTable";
    }
    
    public ShouldReadNumberOfSymbols() : void
    {
      def header = ReadHeader();
      assert header.NumberOfSymbols equals 0 otherwiseprint "Invalid NumberOfSymbol";
    }
    
    public ShouldReadOptionalHeaderSize() : void
    {
      def header = ReadHeader();
      assert header.OptionalHeaderSize equals 224 otherwiseprint "Invalid OptionalHeaderSize";
    }
    
    public ShouldThrowBadImageFormatExceptionIfOptionalHeaderSizeIsZero() : void
        expects BadImageFormatException
    {
      def data = array[
           // The "PE" magic string
           0x50 : byte, 0x45, 0x00, 0x00, 
           // Machine = I386 (0x14c)
           0x4c, 0x1, 
           // NumberOfSections = 2                       
           0x02, 0x00, 
           // TimeDateStamp
           0xDD, 0x86, 0xD2, 0x4A, 
           // PointerToSymbolTable = 0
           0x00, 0x00, 0x00, 0x00,
           // NumberOfSymbols = 0
           0x00, 0x00, 0x00, 0x00, 
           // SizeOfOptionalHeader = 0
           0x00, 0x00,
           // Characteristics = EXECUTABLE_IMAGE | 32BIT_MACHINE
           0x02, 0x01
           ];
      
           _ = ReadHeader(data);
    }  
    
    public ShouldReadCharacteristics() : void
    {
      def header = ReadHeader();
      def characteristics = header.Characteristics;
      def is32Bit = (characteristics & Characteristics.Is32BitMachine) != 0;
      def isExecutableImage = (characteristics & Characteristics.ExecutableImage) != 0;

      assert is32Bit && isExecutableImage equals true otherwiseprint "Invalid characteristics";
    }
    
    public ShouldBeAbleToWriteMachine() : void
    {
      // NOTE: A write is considered successful
      // if the resulting byte stream of the Coff header
      // matches the precalculated hash code
      
      def expectedBytes = GetData();
      TestHeaderWrite(expectedBytes, h => h.Machine = Machine.I386);
    }
               
    public ShouldBeAbleToWriteNumberOfSections() : void
    {
      def numberOfSections = 2;
      def header = CreateDefaultHeader(null);      
      header.NumberOfSections = numberOfSections :> ushort;
      
      def outputStream = MemoryStream();
      def writer = CoffHeaderWriter();
      writer.Write(header, outputStream);      
      
      def reader = CoffHeaderReader();
      def result = reader.Read(outputStream);
      
      assert result.NumberOfSections equals numberOfSections otherwiseprint "Invalid number of sections";
    }
    
    public ShouldWriteTimeDateStamp() : void
    {
      def expectedBytes = array[
           // The "PE" magic string
           0x50 : byte, 0x45, 0x00, 0x00, 
           // Machine = I386 (0x14c)
           0x4c, 0x01, 
           // NumberOfSections = 2                       
           0x02, 0x00, 
           // TimeDateStamp
           0xD1, 0x86, 0xD2, 0x4C, 
           // PointerToSymbolTable = 0
           0x00, 0x00, 0x00, 0x00,
           // NumberOfSymbols = 0
           0x00, 0x00, 0x00, 0x00, 
           // SizeOfOptionalHeader = 224
           0xE0, 0x00,
           // Characteristics = EXECUTABLE_IMAGE | 32BIT_MACHINE
           0x02, 0x01
           ];
      
      def timeStamp = 0x4CD286D1 :> uint;     
      
      TestHeaderWrite(expectedBytes, h => h.TimeDateStamp = timeStamp );
    }
    
    public ShouldWritePointerToSymbolTable() : void
    {
      def expectedBytes = array[
           // The "PE" magic string
           0x50 : byte, 0x45, 0x00, 0x00, 
           // Machine = I386 (0x14c)
           0x4c, 0x01, 
           // NumberOfSections = 2                       
           0x02, 0x00, 
           // TimeDateStamp
           0xDD, 0x86, 0xD2, 0x4A, 
           // PointerToSymbolTable = 0
           0x01, 0x00, 0x00, 0x00,
           // NumberOfSymbols = 0
           0x00, 0x00, 0x00, 0x00, 
           // SizeOfOptionalHeader = 224
           0xE0, 0x00,
           // Characteristics = EXECUTABLE_IMAGE | 32BIT_MACHINE
           0x02, 0x01
           ];
           
      TestHeaderWrite(expectedBytes, h => h.PointerToSymbolTable = 1:> uint);
    }
    
    public ShouldWriteNumberOfSymbols() : void
    {
      def expectedBytes = array[
           // The "PE" magic string
           0x50 : byte, 0x45, 0x00, 0x00, 
           // Machine = I386 (0x14c)
           0x4c, 0x01, 
           // NumberOfSections = 2                       
           0x02, 0x00, 
           // TimeDateStamp
           0xDD, 0x86, 0xD2, 0x4A, 
           // PointerToSymbolTable = 0
           0x00, 0x00, 0x00, 0x00,
           // NumberOfSymbols = 0
           0x03, 0x00, 0x00, 0x00, 
           // SizeOfOptionalHeader = 224
           0xE0, 0x00,
           // Characteristics = EXECUTABLE_IMAGE | 32BIT_MACHINE
           0x02, 0x01
           ];
           
      TestHeaderWrite(expectedBytes, h => h.NumberOfSymbols = 3 :> uint);
    }
    
    public ShouldWriteOptionalHeaderSize() : void
    {
      def expectedBytes = array[
           // The "PE" magic string
           0x50 : byte, 0x45, 0x00, 0x00, 
           // Machine = I386 (0x14c)
           0x4c, 0x01, 
           // NumberOfSections = 2                       
           0x02, 0x00, 
           // TimeDateStamp
           0xDD, 0x86, 0xD2, 0x4A, 
           // PointerToSymbolTable = 0
           0x00, 0x00, 0x00, 0x00,
           // NumberOfSymbols = 0
           0x00, 0x00, 0x00, 0x00, 
           // SizeOfOptionalHeader = 9
           0x09, 0x00,
           // Characteristics = EXECUTABLE_IMAGE | 32BIT_MACHINE
           0x02, 0x01
           ];
           
      TestHeaderWrite(expectedBytes, h => h.OptionalHeaderSize = 9 :> ushort);
    }         
    
    public ShouldWriteCharacteristics() : void
    {
      def expectedBytes = array[
           // The "PE" magic string
           0x50 : byte, 0x45, 0x00, 0x00, 
           // Machine = I386 (0x14c)
           0x4c, 0x01, 
           // NumberOfSections = 2                       
           0x02, 0x00, 
           // TimeDateStamp
           0xDD, 0x86, 0xD2, 0x4A, 
           // PointerToSymbolTable = 0
           0x00, 0x00, 0x00, 0x00,
           // NumberOfSymbols = 0
           0x00, 0x00, 0x00, 0x00, 
           // SizeOfOptionalHeader = 224
           0xE0, 0x00,
           // Characteristics = DLL | 32BIT_MACHINE
           0x00, 0x21
           ];
           
      TestHeaderWrite(expectedBytes, h => h.Characteristics = Characteristics.DLL | Characteristics.Is32BitMachine);
    }
    
    private ReadHeader() : ICoffHeader
    {
      def data = GetData();
      ReadHeader(data);
    }
    
    private ReadHeader(data : array[byte]) : ICoffHeader
    {
      def stream = MemoryStream(data);
      def reader = CoffHeaderReader();
      reader.Read(stream);
    }
    
    private TestHeaderWrite(expectedBytes : array[byte], setHeader : ICoffHeader-> void) : void
    {
      def header = CreateDefaultHeader(setHeader);      
      
      def outputStream = MemoryStream(expectedBytes.Length);
      def writer = CoffHeaderWriter();
      writer.Write(header, outputStream);
      
      def expectedHash = expectedBytes.GetHash();
      def actualHash = outputStream.GetHash();
      
      assert actualHash equals expectedHash otherwiseprint "Invalid output stream";
    }
    
    private CreateDefaultHeader(extraHeaderStep : ICoffHeader -> void = null) : ICoffHeader
    {
      def setHeader(header : ICoffHeader) : void
      {
        header.Machine = Machine.I386;
        header.NumberOfSections = 2;
        header.TimeDateStamp = 0x4AD286DD;
        header.PointerToSymbolTable = 0;
        header.NumberOfSymbols = 0;
        header.OptionalHeaderSize = 224;
        header.Characteristics = Characteristics.ExecutableImage | Characteristics.Is32BitMachine;
        
        // Allow users to override the default header settings
        when(extraHeaderStep != null)
          extraHeaderStep(header);
      }
      
      CreateHeader(setHeader);
    }
    
    private CreateHeader(setHeader : ICoffHeader -> void) : ICoffHeader
    {
      def header = CoffHeader();
      setHeader(header);
        
      header;
    }    
    
    private GetData() : array[byte]
    {
      GetData(array[0x4C : byte, 0x01]);
    } 
    
    private GetData(machineBytes : array[byte]) : array[byte]
    {
      array[
           // The "PE" magic string
           0x50 : byte, 0x45, 0x00, 0x00, 
           // Machine = I386 (0x14c)
           machineBytes[0], machineBytes[1], 
           // NumberOfSections = 2                       
           0x02, 0x00, 
           // TimeDateStamp
           0xDD, 0x86, 0xD2, 0x4A, 
           // PointerToSymbolTable = 0
           0x00, 0x00, 0x00, 0x00,
           // NumberOfSymbols = 0
           0x00, 0x00, 0x00, 0x00, 
           // SizeOfOptionalHeader = 224
           0xE0, 0x00,
           // Characteristics = EXECUTABLE_IMAGE | 32BIT_MACHINE
           0x02, 0x01
           ];
    }
    
    private ShouldRecognizeMachineType(machineBytes : array[byte], machineType : Machine) : void
    {
      def data = array[
                       // The "PE" magic string
                       0x50 : byte, 0x45, 0x00, 0x00, 
                       // Machine = I386 (0x14c)
                       machineBytes[0], machineBytes[1], 
                       // NumberOfSections = 2                       
                       0x02, 0x00, 
                       // TimeDateStamp
                       0xDD, 0x86, 0xD2, 0x4A, 
                       // PointerToSymbolTable = 0
                       0x00, 0x00, 0x00, 0x00,
                       // NumberOfSymbols = 0
	                   0x00, 0x00, 0x00, 0x00, 
	                   // SizeOfOptionalHeader = 224
	                   0xE0, 0x00,
	                   // Characteristics = EXECUTABLE_IMAGE | 32BIT_MACHINE
	                   0x02, 0x01
	                   ];
	                   
	
      def stream = MemoryStream(data);
      def reader = CoffHeaderReader();
      def header = reader.Read(stream);
	  
      assert header.Machine equals machineType otherwiseprint "Wrong Machine Type";
    }
  }
}
