using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Tao;
using Tests.Macros;

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;

namespace Tests
{
  public class NTHeader32Tests
  {      
    public ShouldReadImageBase() : void
    {      
      def header = GetReadHeader();
      assert header.ImageBase equals 0x00400000 otherwiseprint "Invalid ImageBase";
    }
        
    public ShouldReadSectionAlignment() : void
    {
      def header = GetReadHeader();
      assert header.SectionAlignment equals 0x00002000 otherwiseprint "Invalid SectionAlignment";
    }
      
    public ShouldReadFileAlignment() : void
    {
      def header = GetReadHeader();        
      assert header.FileAlignment equals 0x00000200 otherwiseprint "Invalid FileAlignment";
    }
      
    public ShouldReadMajorOperatingSystemVersion() : void
    {
      def header = GetReadHeader();        
      assert header.MajorOperatingSystemVersion equals 4 otherwiseprint "Invalid MajorOperatingSystemVersion";
    }
      
    public ShouldReadMinorOperatingSystemVersion() : void
    {
      def setOperatingSystemBytes = fun (bytes : array[byte]) : void
      {
          bytes[0xE] = 2;
      }
      
      def header = GetReadHeader(setOperatingSystemBytes);
      assert header.MinorOperatingSystemVersion equals 2 otherwiseprint "Invalid MinorOperatingSystemVersion";      
    }
    
    public ShouldReadMajorImageVersion() : void
    {
      def setMajorImageVersion = fun(bytes : array[byte]) : void
      {
          bytes[0x10] = 42;
      }
      
      def header = GetReadHeader(setMajorImageVersion);
      assert header.MajorImageVersion equals 42 otherwiseprint "Invalid MajorImageVersion";
    }
    
    public ShouldReadMinorImageVersion() : void
    {
      def setMinorImageVersion = fun(bytes : array[byte]) : void
      {
          bytes[0x12] = 42;
      }
      
      def header = GetReadHeader(setMinorImageVersion);
      assert header.MinorImageVersion equals 42 otherwiseprint "Invalid MinorImageVersion";
    }
    
    public ShouldReadMajorsSubsystemVersion() : void
    {
      def setMajorSubsystemVersionVersion = fun(bytes : array[byte]) : void
      {
          bytes[0x14] = 42;
      }
      
      def header = GetReadHeader(setMajorSubsystemVersionVersion);
      assert header.MajorSubsystemVersion equals 42 otherwiseprint "Invalid MajorSubsystemVersionVersion";
    }
    
    public ShouldReadMinorsSubsystemVersion() : void
    {
      def setMinorSubsystemVersionVersion = fun(bytes : array[byte]) : void
      {
          bytes[0x16] = 42;
      }
      
      def header = GetReadHeader(setMinorSubsystemVersionVersion);
      assert header.MinorSubsystemVersion equals 42 otherwiseprint "Invalid MinorSubsystemVersionVersion";
    }
    
    public ShouldReadWin32VersionValue() : void
    {
      def header = GetReadHeader();
      assert header.Win32VersionValue equals 0 otherwiseprint "Invalid Win32VersionValue";
    }
    
    public ShouldReadSizeOfImage() : void
    {     
      def header = GetReadHeader();
        
      assert header.SizeOfImage equals 0x00006000 otherwiseprint "Invalid SizeOfImage";
    }
    
    public ShouldReadSizeOfHeaders() : void
    {
      def header = GetReadHeader();
      assert header.SizeOfHeaders equals 0x200 otherwiseprint "Invalid SizeOfHeader";
    }
    
    public ShouldReadCheckSum() : void
    {
      def setCheckSumBytes = fun(bytes : array[byte]) : void 
      {
          bytes[0x24] = 0xFF;
      }
        
      def header = GetReadHeader(setCheckSumBytes);
      assert header.CheckSum equals 0xFF otherwiseprint "Invalid CheckSum";
    }
    
    public ShouldReadSubSystem() : void
    {                
      def header = GetReadHeader();      
      assert header.Subsystem equals Subsystem.WindowsConsole otherwiseprint "Invalid Subsystem";
    }
    
    public ShouldReadDllCharacteristics() : void
    {
      def expectedCharacteristics = 0x8540 :> DLLCharacteristics;
      
      def header = GetReadHeader();      
      assert header.DllCharacteristics equals expectedCharacteristics otherwiseprint "Invalid DLLCharacteristics";
    }
    public ShouldReadSizeOfStackReserve() : void
    {
      def header = GetReadHeader();
      assert header.SizeOfStackReserve equals 0x00100000 otherwiseprint "Invalid SizeOfStackReserve";
    }
    
    public ShouldReadSizeOfStackCommit() : void
    {
      def header = GetReadHeader();
      assert header.SizeOfStackCommit equals 0x00001000 otherwiseprint "Invalid SizeOfStackCommit";
    }
    
    public ShouldReadSizeOfHeapReserve() : void
    {
      def header = GetReadHeader();
      assert header.SizeOfHeapReserve equals 0x00100000 otherwiseprint "Invalid SizeOfHeapReserve";
    }
    
    public ShouldReadSizeOfHeapCommit() : void 
    {
      def header = GetReadHeader();
      assert header.SizeOfHeapCommit equals 0x00001000 otherwiseprint "Invalid SizeOfHeapCommit";
    }
    
    public ShouldReadLoaderFlagsAsZero() : void
    {
      def setLoaderFlags = fun(bytes : array[byte]) : void
      {
         bytes[0x3c] = 42;
      }
        
      def header = GetReadHeader(setLoaderFlags);
      assert header.LoaderFlags equals 0 otherwiseprint "Invalid LoaderFlags";
    }
    
    public ShouldReadNumberOfRvaAndSizes() : void
    {
      def header = GetReadHeader();
      assert header.NumberOfRvaAndSizes equals 0x10 otherwiseprint "Invalid NumberOfRvaAndSizes";
    }        
    
    public ShouldWriteWin32VersionAsZero() : void
    {
      def setExpectedData = fun(expectedData : array[byte]) : void
      {
        expectedData[0x18] = 0x00;
        expectedData[0x19] = 0x00;
        expectedData[0x1A] = 0x00;
        expectedData[0x1B] = 0x00;
      };
       
      def setExpectedHeader = fun(header : NTHeader[uint]) : void
      {
        // The reader should ignore the Win32 version value
        header.Win32VersionValue = 0x00001234;
      };
       
      TestWrite(setExpectedData, setExpectedHeader);
    }
    
    public ShouldWriteImageBase() : void
    {      
      // Change the ImageBase value to 0x00300000 to ensure that
      // the written value is correct and distinct from the original results      
      def setExpectedData = fun(expectedData : array[byte]) : void
       {
           expectedData[2] = 0x30;
       };
       
      def setExpectedHeader = fun(header : NTHeader[uint]) : void
       {
           header.ImageBase = 0x00300000;
       };
       
      TestWrite(setExpectedData, setExpectedHeader);            
    }
        
    public ShouldWriteSectionAlignment() : void
    {
      def setExpectedData = fun(expectedData : array[byte]) : void
      {
        expectedData[5] = 0x30;
      };
       
      def setExpectedHeader = fun(header : NTHeader[uint]) : void
      {
        header.SectionAlignment = 0x00003000;
      };
       
      TestWrite(setExpectedData, setExpectedHeader); 
    }
      
    public ShouldWriteFileAlignment() : void
    {
      def setExpectedData = fun(expectedData : array[byte]) : void
      {
        expectedData[9] = 0x06;
      };
       
      def setExpectedHeader = fun(header : NTHeader[uint]) : void
      {
        header.FileAlignment = 0x0600;
      };
       
      TestWrite(setExpectedData, setExpectedHeader);
    }
      
    public ShouldWriteMajorOperatingSystemVersion() : void
    {
      def setExpectedData = fun(expectedData : array[byte]) : void
      {
        expectedData[12] = 0x05;
      };
       
      def setExpectedHeader = fun(header : NTHeader[uint]) : void
      {
        header.MajorOperatingSystemVersion = 5;
      };
       
      TestWrite(setExpectedData, setExpectedHeader);
    }
      
    public ShouldWriteMinorOperatingSystemVersion() : void
    {
      def setExpectedData = fun(expectedData : array[byte]) : void
      {
        expectedData[14] = 0x05;
      };
       
      def setExpectedHeader = fun(header : NTHeader[uint]) : void
      {
        header.MinorOperatingSystemVersion = 5;
      };
       
      TestWrite(setExpectedData, setExpectedHeader);
    }
    
    public ShouldWriteMajorImageVersion() : void
    {
      def setExpectedData = fun(expectedData : array[byte]) : void
      {
        expectedData[16] = 42;
      };
       
      def setExpectedHeader = fun(header : NTHeader[uint]) : void
      {
        header.MajorImageVersion = 42;
      };
       
      TestWrite(setExpectedData, setExpectedHeader);
    }
    
    public ShouldWriteMinorImageVersion() : void
    {
      def setExpectedData = fun(expectedData : array[byte]) : void
      {
        expectedData[18] = 42;
      };
       
      def setExpectedHeader = fun(header : NTHeader[uint]) : void
      {
        header.MinorImageVersion = 42;
      };
       
      TestWrite(setExpectedData, setExpectedHeader);
    }
    
    public ShouldWriteMajorSubsystemVersion() : void
    {
      def setExpectedData = fun(expectedData : array[byte]) : void
      {
        expectedData[20] = 42;
      };
       
      def setExpectedHeader = fun(header : NTHeader[uint]) : void
      {
        header.MajorSubsystemVersion = 42;
      };
       
      TestWrite(setExpectedData, setExpectedHeader);
    }
    
    public ShouldWriteMinorSubsystemVersion() : void
    {
      def setExpectedData = fun(expectedData : array[byte]) : void
      {
        expectedData[22] = 42;
      };
       
      def setExpectedHeader = fun(header : NTHeader[uint]) : void
      {
        header.MinorSubsystemVersion = 42;
      };
       
      TestWrite(setExpectedData, setExpectedHeader);
    }
    
    public ShouldWriteSizeOfImage() : void
    {
      def setExpectedData = fun(expectedData : array[byte]) : void
      {
        expectedData[0x1D] = 0x50;
      };
       
      def setExpectedHeader = fun(header : NTHeader[uint]) : void
      {
        header.SizeOfImage = 0x00005000;
      };
       
      TestWrite(setExpectedData, setExpectedHeader);
    }
    
    public ShouldWriteSizeOfHeaders() : void
    {
      def setExpectedData = fun(expectedData : array[byte]) : void
      {
        expectedData[0x21] = 0x03;
      };
       
      def setExpectedHeader = fun(header : NTHeader[uint]) : void
      {
        header.SizeOfHeaders = 0x00000300;
      };
       
      TestWrite(setExpectedData, setExpectedHeader);
    }
    
    public ShouldWriteCheckSum() : void
    {
      def setExpectedData = fun(expectedData : array[byte]) : void
      {
        expectedData[0x25] = 0x03;
      };
       
      def setExpectedHeader = fun(header : NTHeader[uint]) : void
      {
        header.CheckSum = 0x00000300;
      };
       
      TestWrite(setExpectedData, setExpectedHeader);
    }
    
    public ShouldWriteSubsystem() : void
    {                
      def setExpectedData = fun(expectedData : array[byte]) : void
      {
        expectedData[0x28] = 10;
      };
       
      def setExpectedHeader = fun(header : NTHeader[uint]) : void
      {
        header.Subsystem = Subsystem.EFIApplication;
      };
       
      TestWrite(setExpectedData, setExpectedHeader);
    }
    
    public ShouldWriteDllCharacteristics() : void
    {
      def setExpectedData = fun(expectedData : array[byte]) : void
      {
        expectedData[0x2A] = 0x00;
        expectedData[0x2B] = 0x08;
      };
       
      def setExpectedHeader = fun(header : NTHeader[uint]) : void
      {
        header.DllCharacteristics = DLLCharacteristics.NoBind;
      };
       
      TestWrite(setExpectedData, setExpectedHeader);
    }
    
    public ShouldWriteSizeOfStackReserve() : void
    {
      def setExpectedData = fun(expectedData : array[byte]) : void
      {
        expectedData[0x2E] = 0x20;
      };
       
      def setExpectedHeader = fun(header : NTHeader[uint]) : void
      {
        header.SizeOfStackReserve = 0x00200000;
      };
       
      TestWrite(setExpectedData, setExpectedHeader);
    }
    
    public ShouldWriteSizeOfStackCommit() : void
    {
      def setExpectedData = fun(expectedData : array[byte]) : void
      {
        expectedData[0x30] = 0x00;
        expectedData[0x31] = 0x00;
        expectedData[0x32] = 0x20;
        expectedData[0x33] = 0x00;
      };
       
      def setExpectedHeader = fun(header : NTHeader[uint]) : void
      {
        header.SizeOfStackCommit = 0x00200000;
      };
       
      TestWrite(setExpectedData, setExpectedHeader);
    }
    
    public ShouldWriteSizeOfHeapReserve() : void
    {
      def setExpectedData = fun(expectedData : array[byte]) : void
      {
        expectedData[0x34] = 0x00;
        expectedData[0x35] = 0x00;
        expectedData[0x36] = 0x20;
        expectedData[0x37] = 0x00;
      };
       
      def setExpectedHeader = fun(header : NTHeader[uint]) : void
      {
        header.SizeOfHeapReserve = 0x00200000;
      };
       
      TestWrite(setExpectedData, setExpectedHeader);
    }
    
    public ShouldWriteSizeOfHeapCommit() : void 
    {
      def setExpectedData = fun(expectedData : array[byte]) : void
      {
        expectedData[0x38] = 0x00;
        expectedData[0x39] = 0x00;
        expectedData[0x3A] = 0x20;
        expectedData[0x3B] = 0x00;
      };
       
      def setExpectedHeader = fun(header : NTHeader[uint]) : void
      {
        header.SizeOfHeapCommit = 0x00200000;
      };
       
      TestWrite(setExpectedData, setExpectedHeader);
    }
    public ShouldWriteLoaderFlagsAsZero() : void
    {
     def setExpectedData = fun(expectedData : array[byte]) : void
      {
        expectedData[0x3C] = 0x00;
        expectedData[0x3D] = 0x00;
        expectedData[0x3E] = 0x00;
        expectedData[0x3F] = 0x00;
      };
       
      def setExpectedHeader = fun(header : NTHeader[uint]) : void
      {
        // The reader should ignore the loader flags value
        header.LoaderFlags = 0x00200000;
      };
       
      TestWrite(setExpectedData, setExpectedHeader);
    }
    
    public ShouldWriteNumberOfRvaAndSizes() : void
    {
      def setExpectedData = fun(expectedData : array[byte]) : void
      {
        expectedData[0x40] = 0x00;
        expectedData[0x41] = 0x00;
        expectedData[0x42] = 0x20;
        expectedData[0x43] = 0x00;
      };
       
      def setExpectedHeader = fun(header : NTHeader[uint]) : void
      {
        header.NumberOfRvaAndSizes = 0x00200000;
      };
       
      TestWrite(setExpectedData, setExpectedHeader);
    }
    
    private GetReadHeader(modifyData : array[byte] -> void = null) : NTHeader[uint]
    {
      def data = GetData();
      
      // Apply any necessary changes to the data
      when (modifyData != null)
        modifyData(data);
        
      def stream = data.ToStream();
      def reader = NTHeader32Reader();
      
      def header : NTHeader[uint] = reader.Read(stream);
      
      header;
    }
            
    private GetData() : array[byte]
    {
      array[	                     
        // ImageBase = 0x00400000
        0x00 : byte, 0x00, 0x40, 0x00,
        // SectionAlignment = 0x00002000
        0x00, 0x20, 0x00, 0x00, 
        // FileAlignment = 0x0200
        0x00, 0x02, 0x00, 0x00, 
        // MajorOperatingSystemVersion = 4
        0x04, 0x00,
        // MinorOperatingSystemVersion = 0
        0x00, 0x00,
        // MajorImageVersion = 0
	    0x00, 0x00, 
	    // MinorImageVersion = 0
	    0x00, 0x00, 
	    // MajorSubsystemVersion = 4
	    0x04, 0x00,
	    // MinorSubsystemVersion = 0
	    0x00, 0x00, 
	    // Win32VersionValue = 0
	    0x00, 0x00, 0x00, 0x00, 
	    // SizeOfImage = 0x00006000
	    0x00, 0x60, 0x00, 0x00,
	    // SizeOfHeaders = 0x00000200
	    0x00, 0x02, 0x00, 0x00,
	    // Checksum = 0
	    0x00, 0x00, 0x00, 0x00, 
	    // Subsystem = 3 (WindowsConsole)
	    0x03, 0x00, 
	    // DLLCharacteristics = 0x8540
	    0x40, 0x85, 
	    // SizeOfStackReserve = 0x00100000
	    0x00, 0x00, 0x10, 0x00, 
	    // SizeOfStackCommit = 0x00001000
	    0x00, 0x10, 0x00, 0x00, 
	    // SizeOfHeapReserve = 0x00100000
	    0x00, 0x00, 0x10, 0x00, 
	    // SizeOfHeapCommit = 0x00001000
	    0x00, 0x10, 0x00, 0x00, 
	    // LoaderFlags = 0
	    0x00, 0x00, 0x00, 0x00,
	    // NumberOfRvaAndSizes = 0x10
	    0x10, 0x00, 0x00, 0x00
	    ]	
    }    
    
    private TestWrite(setExpectedData : array[byte]->void, setExpectedHeaderValues : NTHeader[uint]->void) : void
    {
      def expectedData = GetData();
      setExpectedData(expectedData);
      
      def header = GetWriteHeader();
      setExpectedHeaderValues(header);
        
      def writer = NTHeader32Writer();
      def stream = MemoryStream();
      writer.Write(header, stream);
      
      def expectedHash = expectedData.GetHash();
      def actualHash = stream.GetHash();
      assert expectedHash equals actualHash otherwiseprint "Invalid write operation";
    }
    
    private GetWriteHeader() : NTHeader[uint]
    {
      def header = NTHeader32();
      header.ImageBase = 0x00400000;
      header.SectionAlignment = 0x00002000;
      header.FileAlignment = 0x0200;
      
      header.MajorOperatingSystemVersion = 4;
      header.MinorOperatingSystemVersion = 0;
      
      header.MajorImageVersion = 0;
      header.MinorImageVersion = 0;
      
      header.MajorSubsystemVersion = 4;
      header.MinorSubsystemVersion = 0;
      
      header.Win32VersionValue = 0;
      header.SizeOfImage = 0x00006000;
      header.SizeOfHeaders = 0x00000200;
      header.Subsystem = Subsystem.WindowsConsole;
      header.DllCharacteristics = 0x8540 :> DLLCharacteristics;
      
      header.SizeOfStackReserve = 0x00100000;
      header.SizeOfStackCommit = 0x00001000;
      
      header.SizeOfHeapReserve = 0x00100000;
      header.SizeOfHeapCommit = 0x00001000;
      
      header.NumberOfRvaAndSizes = 0x10;
      
      header;
    }    
  }
}
