using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Tao;
using Tests.Macros;

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;

namespace Tests
{
  public class SectionHeaderTests
  {
    public ShouldReadName() : void
    {          
      def header = GetReadHeader();
      assert header.Name equals ".text" otherwiseprint "Invalid SectionHeader name";         
    }
      
    public ShouldReadVirtualSize() : void
    {
      def header = GetReadHeader();
      assert header.VirtualSize equals 0x1D4 otherwiseprint "Incorrect virtual size";
    }
      
    public ShouldReadVirtualAddress() : void
    {
      def header = GetReadHeader();
      assert header.VirtualAddress equals 0x2000 otherwiseprint "Incorrect Virtual Address";
    }
    
    public ShouldReadSizeOfRawData() : void
    {
      def header = GetReadHeader();
      assert header.SizeOfRawData equals 0x200 otherwiseprint "Incorrect SizeOfRawData value";
    }
    
    public ShouldReadPointerToRawData() : void
    {
      def header = GetReadHeader();
      assert header.PointerToRawData equals 0x200 otherwiseprint "Incorrect PointerToRawData value";
    }
    
    public ShouldReadPointerToRelocations() : void
    {
      def header = GetReadHeader();
      assert header.PointerToRelocations equals 0 otherwiseprint "Incorrect PointerToRelocations value";      
    }
    
    public ShouldReadPointerToLineNumbers() : void
    {
      def header = GetReadHeader();
      assert header.PointerToLineNumbers equals 0 otherwiseprint "Incorrect PointerToLineNumbers value";
    }
    
    public ShouldReadNumberOfRelocations() : void
    {
      def header = GetReadHeader();
      assert header.NumberOfRelocations equals 0 otherwiseprint "Incorrect NumberOfRelocations value";        
    }
    
    public ShouldReadNumberOfLineNumbers() : void
    {
      def header = GetReadHeader();
      assert header.NumberOfLineNumbers equals 0 otherwiseprint "Incorrect NumberOfLineNumbers value";
    }
    
    public ShouldReadCharacteristics() : void
    {
      def header = GetReadHeader();
      def flags = header.Characteristics :> uint;
        
      assert flags equals 0x60000020 otherwiseprint "Invalid SectionFlags";
    }
    
    public ShouldReadEntireSectionHeaderStream() : void
    {
      def inputData = GetInputHeaderBytes();
      def inputStream = MemoryStream(inputData);
      def reader = SectionHeaderReader();
      _ = reader.Read(1 :> uint, inputStream);
      
      assert inputStream.Length equals 0x28 otherwiseprint "The SectionHeaderReader must consume the entire section header input stream";
    }
    
    public ShouldWriteName() : void
    {
      def header = GetWriteHeader();
      header.Name = ".abcd";                
        
      def expectedBytes = GetInputHeaderBytes();
      def expectedOutputStream = MemoryStream(expectedBytes);
        
        // HACK: Overwrite the ".text" bytes with the sample header name for this test
      def stringWriter = NullTerminatedStringWriter();
      stringWriter.Write(".abcd", expectedOutputStream);
        
      def headers = List.[SectionHeader]();
      headers.Add(header);
        
      def outputStream = MemoryStream();
      def writer = StreamHeaderWriter();
      writer.Write(headers, outputStream);
        
      def expectedHash = expectedOutputStream.GetHash();
      def actualHash = outputStream.GetHash();
      assert expectedHash equals actualHash otherwiseprint "Invalid Name written";
    }
    
    public ShouldWriteVirtualSize() : void
    {
      def expectedValue : uint = 0xFEED;                            
      def targetIndex = 0;                          
      
      TestWrite(targetIndex, header=>header.VirtualSize = expectedValue, expectedValue);
    }
    
    public ShouldWriteVirtualAddress() : void
    {
      def expectedValue : uint = 0xFEED;                            
      def targetIndex = 1;                          
      
      TestWrite(targetIndex, header=>header.VirtualAddress = expectedValue, expectedValue);
    }
    
    public ShouldWriteSizeOfRawData() : void
    {
      def expectedValue : uint = 0xFEED;                            
      def targetIndex = 2;                          
      
      TestWrite(targetIndex, header => header.SizeOfRawData = expectedValue, expectedValue);
    }
    
    public ShouldWritePointerToRawData() : void
    {
      def expectedValue : uint = 0xFEED;                            
      def targetIndex = 3;                          
      
      TestWrite(targetIndex, header => header.PointerToRawData = expectedValue, expectedValue);
    }
    
    public ShouldWritePointerToRelocations() : void
    {
      def expectedValue : uint = 0xFEED;                            
      def targetIndex = 4;                          
      
      TestWrite(targetIndex, header => header.PointerToRelocations = expectedValue, expectedValue);
    }
    public ShouldWritePointerToLineNumbers() : void
    {
      def expectedValue : uint = 0xFEED;                            
      def targetIndex = 5;                          
      
      TestWrite(targetIndex, header => header.PointerToLineNumbers = expectedValue, expectedValue);
    }
    
    public ShouldWriteNumberOfRelocations() : void
    {
      def expectedValue : ushort = 0xFEED;                            
      def targetIndex = 6;                          
      
      TestWrite(targetIndex, header => header.NumberOfRelocations = expectedValue, expectedValue);
    }
    
    public ShouldWriteNumberOfLineNumbers() : void
    {
      def expectedValue : ushort = 0xFEED;                            
      def targetIndex = 7;                          
      
      TestWrite(targetIndex, header => header.NumberOfLineNumbers = expectedValue, expectedValue);
    }
    
    private TestWrite(targetIndex : int, setHeaderData : SectionHeader-> void, expectedValue : uint) : void
    {
      TestWrite(targetIndex, setHeaderData, writer=>writer.Write(expectedValue));
    }
    
    private TestWrite(targetIndex : int, setHeaderData : SectionHeader-> void, expectedValue : ushort) : void
    {
      TestWrite(targetIndex, setHeaderData, writer=>writer.Write(expectedValue));
    }
    
    private TestWrite(targetIndex : int, setHeaderData : SectionHeader-> void, writeExpectedValue : BinaryWriter -> void) : void
    {                            
      def targetAddress = GetTargetAddress(targetIndex);
      
      def expectedData = GetInputHeaderBytes();
      def expectedStream = MemoryStream(expectedData);
      
      def expectedStreamWriter = BinaryWriter(expectedStream);
      _ = expectedStream.Seek(targetAddress, SeekOrigin.Begin);
      
      writeExpectedValue(expectedStreamWriter);
      
      def header = GetWriteHeader();
      setHeaderData(header);
      
      def headers = List.[SectionHeader]();
      headers.Add(header);
      
      def outputStream = MemoryStream();
      def writer = StreamHeaderWriter();
      writer.Write(headers, outputStream);
      
      def expectedHash = expectedStream.GetHash();
      def actualHash = outputStream.GetHash();
      
      assert expectedHash equals actualHash otherwiseprint "Invalid write operation";
    }
    private GetTargetAddress(targetIndex : int) : int
    {
      def baseAddress = 8;
      mutable targetAddress = 0;
      when(targetIndex <= 5 || targetIndex == 8)
      {
        targetAddress = baseAddress + (targetIndex * 4);
      }    
      
      when(targetIndex == 6 || targetIndex == 7)
      {
        def wordOffset = (targetIndex - 6) * 2;
        targetAddress = baseAddress + 24 + wordOffset;
      }
      
      targetAddress;
    }
    
    private GetWriteHeader() : SectionHeader
    {
      def header = SectionHeader();
      header.Name = ".text";
      header.VirtualSize = 0x1D4;
      header.VirtualAddress = 0x2000;
      header.SizeOfRawData = 0x200;
      header.PointerToRawData = 0x200;
      header.PointerToRelocations = 0;
      header.PointerToLineNumbers = 0;
      header.NumberOfLineNumbers = 0;
      header.NumberOfRelocations = 0;
      header.Characteristics = 0x60000020 :> SectionFlags;
      
      header;
    }
    
    private GetReadHeader() : SectionHeader
    {
      def inputData = GetInputHeaderBytes();
      def inputStream = MemoryStream(inputData);
      def reader = SectionHeaderReader();
      def headers = reader.Read(1 :> uint, inputStream);
      
      headers.First();
    }
    private GetInputHeaderBytes() : array[byte]
    {
      def textSectionHeaderData = array[
          
            // Name = ".text"
	        0x2E : byte, 0x74, 0x65, 0x78, 0x74, 0x00, 0x00, 0x00, 
	        
	        // VirtualSize = 0x1D4
	        0xD4, 0x01, 0x00, 0x00, 
	        
	        // VirtualAddress = 0x2000
	        0x00, 0x20, 0x00, 0x00,
	        
	        // RawSize = 0x200
	        0x00, 0x02, 0x00, 0x00, 
	        
	        // RawAddress = 0x200
	        0x00, 0x02, 0x00, 0x00, 
	        
	        // RelocAddress = 0
	        0x00, 0x00, 0x00, 0x00, 
	        
	        // LineNumbers = 0
	        0x00, 0x00, 0x00, 0x00,
	        
	        // RelocationsNumber = 0
	        0x00, 0x00, 
	        
	        // LineNumbersNumber = 0
	        0x00, 0x00, 
	        
	        // Characteristics = 0x60000020
	        0x20, 0x00, 0x00, 0x60  
            ];
            
      textSectionHeaderData;
    }
  }
}
