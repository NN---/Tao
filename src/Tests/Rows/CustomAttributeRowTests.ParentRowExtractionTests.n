using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;

using Tao;
using Tao.Metadata;
using Tao.Metadata.Tables;
using Tao.Metadata.Tables.Rows;
using Tests.Macros;

namespace Tests
{
    public partial class CustomAttributeRowTests
    {
        public ShouldBeAbleToExtractParentTableRowForMethodDefRows() : void
        {
            ShouldBeAbleToExtractParentTableRow.[MethodDefTable, MethodDefRow]();
        }        
        public ShouldBeAbleToExtractParentTableRowForFieldRows() : void
        {
            ShouldBeAbleToExtractParentTableRow.[FieldTable, FieldRow]();
        }
        public ShouldBeAbleToExtractParentTableRowForTypeRefRows() : void
        {
            ShouldBeAbleToExtractParentTableRow.[TypeRefTable, TypeRefRow]();
        }
        public ShouldBeAbleToExtractParentTableRowForInterfaceImplRows() : void
        {
            ShouldBeAbleToExtractParentTableRow.[InterfaceImplTable, InterfaceImplRow]();
        }
        public ShouldBeAbleToExtractParentTableRowForMemberRefRows() : void
        {
            ShouldBeAbleToExtractParentTableRow.[MemberRefTable, MemberRefRow]();
        }
        public ShouldBeAbleToExtractParentTableRowForModuleRows() : void
        {
            ShouldBeAbleToExtractParentTableRow.[ModuleTable, ModuleRow]();
        }
        public ShouldBeAbleToExtractParentTableRowForPropertyRows() : void
        {
            ShouldBeAbleToExtractParentTableRow.[PropertyTable, PropertyRow]();
        }
        public ShouldBeAbleToExtractParentTableRowForEventRows() : void
        {
            ShouldBeAbleToExtractParentTableRow.[EventTable, EventRow]();
        }
        public ShouldBeAbleToExtractParentTableRowForStandAloneSigRows() : void
        {
            ShouldBeAbleToExtractParentTableRow.[StandAloneSigTable, StandAloneSigRow]();
        }
        public ShouldBeAbleToExtractParentTableRowForModuleRefRows() : void
        {
            ShouldBeAbleToExtractParentTableRow.[ModuleRefTable, ModuleRefRow]();
        }
        public ShouldBeAbleToExtractParentTableRowForTypeSpecRows() : void
        {
            ShouldBeAbleToExtractParentTableRow.[TypeSpecTable, TypeSpecRow]();
        }
        public ShouldBeAbleToExtractParentTableRowForAssemblyRows() : void
        {
            ShouldBeAbleToExtractParentTableRow.[AssemblyTable, AssemblyRow]();
        }
        public ShouldBeAbleToExtractParentTableRowForFileRows() : void
        {
            ShouldBeAbleToExtractParentTableRow.[FileTable, FileRow]();
        }
        public ShouldBeAbleToExtractParentTableRowForAssemblyRefRows() : void
        {
            ShouldBeAbleToExtractParentTableRow.[AssemblyRefTable, AssemblyRefRow]();
        }
        public ShouldBeAbleToExtractParentTableRowForExportedTypeRows() : void
        {
            ShouldBeAbleToExtractParentTableRow.[ExportedTypeTable, ExportedTypeRow]();
        }
        public ShouldBeAbleToExtractParentTableRowForManifestResourceRows() : void
        {
            ShouldBeAbleToExtractParentTableRow.[ManifestResourceTable, ManifestResourceRow]();
        }
        public ShouldBeAbleToExtractParentTableRowForGenericParamRows() : void
        {
            ShouldBeAbleToExtractParentTableRow.[GenericParamTable, GenericParamRow]();
        }
        public ShouldBeAbleToExtractParentTableRowForGenericParamConstraintRows() : void
        {
            ShouldBeAbleToExtractParentTableRow.[GenericParamConstraintTable, GenericParamConstraintRow]();
        }
        public ShouldBeAbleToExtractParentTableRowForMethodSpecRows() : void
        {
            ShouldBeAbleToExtractParentTableRow.[MethodSpecTable, MethodSpecRow]();
        }
        public ShouldBeAbleToExtractCustomAttributeRowsFromParentRow() : void
        {            
            // This feature will help determine the list of custom attributes associated with a given type
            def root = base.GetMetadataRoot("SampleCustomAttributeUsage.dll");
            def tablesStream = root.GetTablesHeap();
            def tablesHeap = TablesHeap();
            tablesHeap.ReadFrom(tablesStream);
            
            def stringHeap = root.GetStringHeap();
            def parentRow = tablesHeap.GetTypeRow.[TypeDefRow]("SampleClass", stringHeap);
            
            def rows = parentRow.GetCustomAttributeRows(tablesHeap);
            rows.Count().ShouldBeEqualTo(2, "Wrong number of custom attribute rows");
        }
        public stub ShouldBeAbleToGroupCustomAttributeRowsByTypeColumn() : void
        {
            // Note: This feature will help determine which list of types have a particular custom attribute            
        }
        private ShouldBeAbleToExtractParentTableRow[TTable, TRow]() : void
            where TTable : new(), IMetadataTable[TRow]
            where TRow : IHasCustomAttributeRow, new()
        {
            def table = TTable();
            def info = table :> IMetadataTableInfo;
            def tableId = info.TableId;

            TestExtractingParentTableRow.[TTable, TRow](tableId);
        }

        private TestExtractingParentTableRow[TTable, TRow](tableId : TableId) : void
            where TTable : IMetadataTable[TRow], new()
            where TRow : IHasCustomAttributeRow, new()
        {
            def index = Index.FromCodedToken(CodedTokenType.HasCustomAttribute, tableId, 1);

            def row = CustomAttributeRow();
            row.Parent= index;

            def table = TTable();
            def otherRow = TRow();
            table.Rows.Add(otherRow);

            def actualRow : IHasCustomAttributeRow = row.GetParentRowFrom(table);
            actualRow.GetType().ShouldBeEqualTo(typeof(TRow), "Wrong Row Type");
        }
    }
}
