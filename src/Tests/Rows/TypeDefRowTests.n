using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using Tests.Macros;
using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

using Tao;
using Tao.Metadata;
using Tao.Metadata.Signatures;
using Tao.Metadata.Tables;
using Tao.Metadata.Tables.Rows;

namespace Tests
{
    public class TypeDefRowTests : FileBasedTableTest
    {                 
        public ShouldBeAbleToGetAssociatedAssemblyRow() : void
        {     
            def root = base.GetMetadataRoot();            
            def tableStream = root.Heaps["#~"];

            def heap = TablesHeap();
            heap.ReadFrom(tableStream);
            
            def row = heap.GetRow.[TypeDefRow](1);
            def assemblyRow = row.GetAssemblyRow(heap);
            
            def stringHeap = root.Heaps["#Strings"];
            
            row.TypeName.ToString(stringHeap).ShouldBeEqualTo("<Module>", "wrong target row");
            assemblyRow.Name.ToString(stringHeap).ShouldBeEqualTo("SampleCustomAttributeUsage", "wrong assembly");
        }
        public ShouldBeAbleToResolvePartiallyQualifiedName() : void
        {
            def root = base.GetMetadataRoot();            
            def tableStream = root.Heaps["#~"];

            def heap = TablesHeap();
            heap.ReadFrom(tableStream);

            def stringHeap = root.Heaps["#Strings"];
            
            def row : ITypeRow = heap.GetTypeRow.[TypeDefRow]("SampleEnum", stringHeap);
            
            row.GetPartialQualifiedName(stringHeap, heap).ShouldBeEqualTo("SampleCustomAttributeUsage.SampleEnum, SampleCustomAttributeUsage", "Wrong partial qualified name");
        }
        public stub ShouldGetInterfaceImplRowsAsRowReferences() : void
        {
        }
        public stub ShouldGetListOfMethodRowsAsRowReferences() : void
        {
        }
        public stub ShouldGetListOfFieldRowsAsRowReferences() : void
        {
        }
        protected override TargetAssemblyFileName : string 
        { 
            get
            {
                "SampleCustomAttributeUsage.dll";
            }
        }
    }
}
