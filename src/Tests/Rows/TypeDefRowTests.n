using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using Tests.Macros;
using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

using Tao;
using Tao.Metadata;
using Tao.Metadata.Signatures;
using Tao.Metadata.Tables;
using Tao.Metadata.Tables.Rows;

namespace Tests
{
    public class TypeDefRowTests : FileBasedTableTest
    {                 
        public ShouldBeAbleToGetAssociatedAssemblyRow() : void
        {     
            def root = base.GetMetadataRoot();            
            def tableStream = root.Heaps["#~"];

            def heap = TablesHeap();
            heap.ReadFrom(tableStream);
            
            def row = heap.GetRow.[TypeDefRow](1);
            def assemblyRow = row.GetAssemblyRow(heap);
            
            def stringHeap = root.Heaps["#Strings"];
            
            row.TypeName.ToString(stringHeap).ShouldBeEqualTo("<Module>", "wrong target row");
            assemblyRow.Name.ToString(stringHeap).ShouldBeEqualTo("SampleCustomAttributeUsage", "wrong assembly");
        }
        public ShouldBeAbleToResolvePartiallyQualifiedName() : void
        {
            def root = base.GetMetadataRoot();            
            def tableStream = root.Heaps["#~"];

            def heap = TablesHeap();
            heap.ReadFrom(tableStream);

            def stringHeap = root.Heaps["#Strings"];
            
            def row : ITypeRow = heap.GetTypeRow.[TypeDefRow]("SampleEnum", stringHeap);
            
            row.GetPartialQualifiedName(stringHeap, heap).ShouldBeEqualTo("SampleCustomAttributeUsage.SampleEnum, SampleCustomAttributeUsage", "Wrong partial qualified name");
        }
        public ShouldGetInterfaceImplRows() : void
        {
            def root = base.GetMetadataRoot("SampleTypeDefRowUsage.dll");
            def tableStream = root.GetTablesHeap();

            def tablesHeap = TablesHeap();
            tablesHeap.ReadFrom(tableStream);
            
            def stringHeap = root.GetStringHeap();                                    
            
            def targetRow = tablesHeap.GetTypeRow.[TypeDefRow]("SampleClassWithMultipleInterfaces", stringHeap);
            def results = targetRow.GetInterfaceImplRows(tablesHeap);
            def rows = results.ToArray();
            rows.Length.ShouldBeEqualTo(2, "Wrong number of expected interfaces");
            
            rows[0].Class.ToUInt32().ShouldBeEqualTo(4, "Wrong TypeDef index value");
            rows[0].Interface.ToRowRef(CodedTokenType.TypeDefOrTypeRef).Row.ShouldBeEqualTo(2, "Wrong target row");
            rows[0].Interface.ToRowRef(CodedTokenType.TypeDefOrTypeRef).TableId.ShouldBeEqualTo(TableId.TypeDef, "Wrong target row");
            
            rows[1].Class.ToUInt32().ShouldBeEqualTo(4, "Wrong TypeDef index value");
            rows[1].Interface.ToRowRef(CodedTokenType.TypeDefOrTypeRef).Row.ShouldBeEqualTo(3S, "Wrong target row");
            rows[1].Interface.ToRowRef(CodedTokenType.TypeDefOrTypeRef).TableId.ShouldBeEqualTo(TableId.TypeDef, "Wrong target row");
        }
        
        public stub ShouldGetListOfMethodRows() : void
        {
        }
        public stub ShouldGetListOfFieldRows() : void
        {
        }
        protected override TargetAssemblyFileName : string 
        { 
            get
            {
                "SampleCustomAttributeUsage.dll";
            }
        }
    }
}
