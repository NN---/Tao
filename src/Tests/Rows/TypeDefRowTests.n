using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using Tests.Macros;
using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

using Tao;
using Tao.Metadata;
using Tao.Metadata.Signatures;
using Tao.Metadata.Tables;
using Tao.Metadata.Tables.Rows;

namespace Tests
{
    public class TypeDefRowTests : FileBasedTableTest
    {                 
        public ShouldBeAbleToGetAssociatedAssemblyRow() : void
        {     
            def root = base.GetMetadataRoot();            
            def tableStream = root.Heaps["#~"];

            def heap = TablesHeap();
            heap.ReadFrom(tableStream);

            def row = heap.GetRow.[TypeDefRow](1);
            def assemblyRow = row.GetAssemblyRow(heap);

            def stringHeap = root.Heaps["#Strings"];

            row.TypeName.ToString(stringHeap).ShouldBeEqualTo("<Module>", "wrong target row");
            assemblyRow.Name.ToString(stringHeap).ShouldBeEqualTo("SampleCustomAttributeUsage", "wrong assembly");
        }
        public ShouldBeAbleToResolvePartiallyQualifiedName() : void
        {
            def root = base.GetMetadataRoot();            
            def tableStream = root.Heaps["#~"];

            def heap = TablesHeap();
            heap.ReadFrom(tableStream);

            def stringHeap = root.Heaps["#Strings"];

            def row : ITypeRow = heap.GetTypeRow.[TypeDefRow]("SampleEnum", stringHeap);

            row.GetPartialQualifiedName(stringHeap, heap).ShouldBeEqualTo("SampleCustomAttributeUsage.SampleEnum, SampleCustomAttributeUsage", "Wrong partial qualified name");
        }
        public ShouldGetInterfaceImplRows() : void
        {
            def className = "SampleClassWithMultipleInterfaces";
            def root = base.GetMetadataRoot("SampleTypeDefRowUsage.dll");
            def tableStream = root.GetTablesHeap();

            def tablesHeap = TablesHeap();
            tablesHeap.ReadFrom(tableStream);

            def stringHeap = root.GetStringHeap();                                                
            def targetRow = tablesHeap.GetTypeRow.[TypeDefRow](className, stringHeap);           
            
            def testResults(rows : array[InterfaceImplRow]) : void
            {
                rows.Length.ShouldBeEqualTo(3, "Wrong number of expected interfaces");            
                
                foreach(row in rows)
                {
                    row.Class.ToUInt32().ShouldBeEqualTo(targetRow.RowIndex, "Wrong Row Index");
                }
            }
            
            TestRelatedRowExtraction(className, (row, tablesHeap) => row.GetInterfaceImplRows(tablesHeap), testResults);
        }

        public ShouldGetListOfMethodRows() : void
        {
            def matchMethodName(rows : array[IMethodDefRow],  index : int, expectedMethodName : string, stringHeap : Stream) : void
            {
                rows[index].Name.ToString(stringHeap).ShouldBeEqualTo(expectedMethodName, "Wrong method name");
            }
            
            def testResults(rows : array[IMethodDefRow], stringHeap : Stream) : void
            {
                rows.Length.ShouldBeEqualTo(3, "Wrong number of expected methods");
                
                def testMethodName = matchMethodName(rows, _, _, stringHeap);
                testMethodName(0, "DoFoo");
                testMethodName(1, "DoBar");
                testMethodName(2, ".ctor");
            }
            
            def getRows(row : TypeDefRow, tablesHeap : ITablesHeap) : IEnumerable.[IMethodDefRow]
            {
                row.GetMethodDefRows(tablesHeap);
            }
            
            TestRelatedRowExtraction("SampleClassWithMultipleInterfaces", getRows, testResults);
        }
        public ShouldGetListOfFieldRows() : void
        {
            def matchField(rows : array[FieldRow], index, expectedName : string, stringHeap : Stream) : void
            {
                rows[index].Name.ToString(stringHeap).ShouldBeEqualTo(expectedName, "Wrong field name");
            }
            
            def testResults(rows : array[FieldRow], stringHeap : Stream) : void
            {
                rows.Length.ShouldBeEqualTo(2, "Wrong number of expected fields");
                def testField = matchField(rows, _, _, stringHeap);
                testField(0, "_field1");
                testField(1, "_field2");
            }
            
            TestRelatedRowExtraction("SampleClassWithMultipleInterfaces", (row, heap) => row.GetFieldRows(heap), testResults);
        }
        
        private TestRelatedRowExtraction[TRow](className : string, getRows : TypeDefRow * ITablesHeap -> IEnumerable.[TRow], testRows : array[TRow]-> void) : void
        {
            def adapterFunctor(rows : array[TRow], /*stringHeap - unused*/ _ : Stream) : void
            {
                testRows(rows);
            }
            
            TestRelatedRowExtraction.[TRow](className, getRows, adapterFunctor);
        }
        
        private TestRelatedRowExtraction[TRow](className : string, getRows : TypeDefRow * ITablesHeap -> IEnumerable.[TRow], testRows : array[TRow] * Stream -> void) : void
        {
            def root = base.GetMetadataRoot("SampleTypeDefRowUsage.dll");
            def tableStream = root.GetTablesHeap();

            def tablesHeap = TablesHeap();
            tablesHeap.ReadFrom(tableStream);

            def stringHeap = root.GetStringHeap();                                                
            def targetRow = tablesHeap.GetTypeRow.[TypeDefRow](className, stringHeap);

            targetRow.TypeName.ToString(stringHeap).ShouldBeEqualTo(className, "Wrong Type Found");
            def results = getRows(targetRow, tablesHeap);
            testRows(results.ToArray(), stringHeap);            
        }
        protected override TargetAssemblyFileName : string 
        { 
            get
            {
                "SampleCustomAttributeUsage.dll";
            }
        }
    }
}
