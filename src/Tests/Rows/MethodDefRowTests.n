using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;

using Tao;
using Tao.Metadata;
using Tao.Metadata.Tables;
using Tao.Metadata.Tables.Rows;
using Tao.Metadata.Signatures;
using Tests.Macros;

namespace Tests
{
    public class MethodDefRowTests : FileBasedTableTest
    {
        public ShouldBeAbleToExtractMethodDefSignature() : void
        {
            // Read the heap data
            def heap = TablesHeap();
            def tableData = MemoryStream(base.GetTableStreamData());
            heap.ReadFrom(tableData);

            def root = GetMetadataRoot();
            
            // Search for the get_Value method
            def stringHeap = root.Heaps["#Strings"];
            def rows = heap.GetRows.[MethodDefRow]();
            def targetRow = rows.Where(r=> r.Name.ToString(stringHeap) == "get_Value").First();
            
            // Match the method name            
            targetRow.Name.ToString(stringHeap).ShouldBeEqualTo("get_Value", "Wrong Method Name");          
            
            def blobStream = root.Heaps["#Blob"];

            // The expected and actual blob signatures must match                        
            def actualSignature = targetRow.GetMethodSignature(blobStream) :> MethodDefSignature;
            actualSignature.ParameterCount.ShouldBeEqualTo(0, "Wrong Parameter Count");            
        }
        protected override TargetAssemblyFileName : string 
        { 
            get
            {
                "SampleCustomAttributeUsage.dll";
            }
        }
    }
}
