using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;

using Tao;
using Tao.Metadata;
using Tao.Metadata.Tables;
using Tao.Metadata.Tables.Rows;
using Tao.Metadata.Signatures;
using Tests.Macros;

namespace Tests
{
    public class MemberRefRowTests : FileBasedTableTest
    {
        public ShouldBeAbleToExtractMethodDefSignature() : void
        {
            // Read the heap data
            def heap = TablesHeap();
            def tableData = MemoryStream(base.GetTableStreamData());
            heap.ReadFrom(tableData);
            
            // Search for the AssemblyTrademark attribute constructor (should be in MemberRef, row 7)
            def table = heap.Tables.Where(t => t is MemberRefTable).First() :> MemberRefTable;
            def targetRow = table.Rows[6];
            
            // Verify that the row is pointing to the correct blob index
            def methodSignatureBlobIndex : uint = 0x001A;
            targetRow.Signature.ToUInt32().ShouldBeEqualTo(methodSignatureBlobIndex, "Wrong Signature");
            
            // Make sure that the row is pointing to the correct parent type
            def classRow = targetRow.Class.ToRowRef(CodedTokenType.MemberRefParent);
            classRow.TableId.ShouldBeEqualTo(TableId.TypeRef, "Wrong TableId");
            classRow.Row.ShouldBeEqualTo(8, "Wrong Class Row");
            
            def root = GetMetadataRoot();
            def blobStream = root.Heaps["#Blob"];
            
            // The expected and actual blob signatures must match                        
            def actualSignature = targetRow.GetMethodSignature(blobStream) :> MethodRefSignature;
            actualSignature.ParameterCount.ShouldBeEqualTo(1, "Wrong Parameter Count");
            
            def parameters = actualSignature.Parameters;
            parameters[0].Type.ShouldBeEqualTo(StringSignature.Instance, "Wrong Parameter Type");
            
            // Match the method name
            def stringHeap = root.Heaps["#Strings"];
            targetRow.Name.ToString(stringHeap).ShouldBeEqualTo(".ctor", "Wrong Method Name");
        }        
        protected override TargetAssemblyFileName : string 
        { 
            get
            {
                "SampleCustomAttributeUsage.dll";
            }
        }
    }
}
