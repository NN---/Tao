using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;

using Tao;
using Tao.Metadata;
using Tao.Metadata.Tables;
using Tao.Metadata.Tables.Rows;
using Tests.Macros;

namespace Tests
{
    public partial class CustomAttributeRowTests : FileBasedTableTest
    {
        public ShouldBeAbleToIdentifyParentTableAndRow() : void
        {
            def encoder = CodedTokenEncoder();
            def parentToken : uint = encoder.Encode(CodedTokenType.HasCustomAttribute, TableId.MethodDef, 0x42);
            def index = Index.Wide(parentToken);

            def row = CustomAttributeRow();            
            row.Parent = index;

            def parentRow = row.GetParentRowReference();

            parentRow.TableId.ShouldBeEqualTo(TableId.MethodDef, "Wrong TableId");
            parentRow.Row.ShouldBeEqualTo(0x42, "Wrong Row");
        }
        public ShouldBeAbleToIdentifyTypeRowReference() : void
        {          
            def encoder = CodedTokenEncoder();
            def typeToken : uint = encoder.Encode(CodedTokenType.CustomAttributeType, TableId.MethodDef, 0x42);

            def index = Index.Wide(typeToken);
            def row = CustomAttributeRow();
            row.Type = index;

            def typeRow = row.GetTypeRowReference();

            typeRow.TableId.ShouldBeEqualTo(TableId.MethodDef, "Wrong TableId");
            typeRow.Row.ShouldBeEqualTo(0x42, "Wrong Row");
        }

        public ShouldBeAbleToExtractBlobBytes() : void
        {            
            def blobBytes = array[0x00 : byte, 0x03, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00];
            def expectedBytes = array[0x00 : byte, 0x00, 0x01];
            def index = Index.Narrow(1);

            def row = CustomAttributeRow();
            row.Value = index;

            def blobStream = MemoryStream(blobBytes);            
            def blob = row.GetCustomAttributeBlobFrom(blobStream);

            def expectedData = MemoryStream(expectedBytes);
            expectedData.ShouldMatch(blob);
        }
        public ShouldBeAbleToExtractMemberRefRowForCustomAttributeRow() : void
        {
            def index = Index.FromCodedToken(CodedTokenType.CustomAttributeType, TableId.MemberRef, 1);

            def row = CustomAttributeRow();
            row.Type = index;

            def table = MemberRefTable();
            def expectedRow = MemberRefRow();
            table.Rows.Add(expectedRow);

            def actualRow = row.GetTypeRowFrom(table);
            actualRow.ShouldBeTheSameReferenceAs(expectedRow, "Wrong Row");
        }

        public ShouldBeAbleToExtractMethodDefForCustomAttributeRow() : void
        {
            def index = Index.FromCodedToken(CodedTokenType.CustomAttributeType, TableId.MethodDef, 1);

            def row = CustomAttributeRow();
            row.Type = index;

            def table = MethodDefTable();
            def expectedRow = MethodDefRow();
            def otherRow = MethodDefRow();
            table.Rows.Add(expectedRow);
            table.Rows.Add(otherRow);

            def actualRow = row.GetTypeRowFrom(table);
            actualRow.ShouldBeTheSameReferenceAs(expectedRow, "Wrong Row");
        }
        
        public ShouldReturnNullWhenExtractingCustomAttributeRowAndIndexIsZero() : void
        {            
            def index = Index.FromCodedToken(CodedTokenType.CustomAttributeType, TableId.MethodDef, 0);

            def row = CustomAttributeRow();
            row.Type = index;

            def table = MethodDefTable();
            def otherRow = MethodDefRow();
            table.Rows.Add(otherRow);

            def actualRow = row.GetTypeRowFrom(table);
            actualRow.ShouldBeNull("The row returned should be null here because the token is pointing to a null row");
        }               
        public ShouldGetCorrectTypeTableFromGivenTablesHeap() : void
        {      
            def root = base.GetMetadataRoot();
            def tableStream = root.Heaps["#~"];
            
            def heap = TablesHeap();
            heap.ReadFrom(tableStream);
            
            def customAttributeTable = heap.Tables.Where(t=>t is CustomAttributeTable).First() :> CustomAttributeTable;
            def row = customAttributeTable.Rows[0];
            
            def actualRow = row.GetTypeRowFrom(heap);
            actualRow.GetType().ShouldBeEqualTo(typeof(MemberRefRow), "Wrong Table Type");
        }
        protected override TargetAssemblyFileName : string 
        { 
            get
            {
                "SampleCustomAttributeUsage.dll";
            }
        }
    }
}
