using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Tao;
using Tao.Interfaces;
using Tests.Macros;

using System;
using System.IO;
using System.Reflection;
using System.Collections.Generic;
using System.Linq;

namespace Tests
{  
  public class MetadataStreamHeaderTests
  {    
    public ShouldReadName() : void
    {
      TestRead("Name", "#~");
    }
    public ShouldReadSize() : void
    {
      TestRead("Size", 0x4034 :> uint);
    }
    public ShouldReadOffset() : void
    {
      TestRead("Offset", 0x6C :> uint);
    }
    public ShouldWriteName() : void
    {
      TestWrite("Name", "#Foo");
    }
    public ShouldWriteSize() : void
    {
      TestWrite("Size", 0xFEED : uint);
    }
    public ShouldWriteOffset() : void
    {
      TestWrite("Offset", 0xFEED : uint);
    }        
    public ShouldThrowBadImageFormatExceptionIfHeaderNameIsEmptyOnWrite() : void
        expects BadImageFormatException
    {
      def header = StreamHeader();
      def stream = MemoryStream();
      def writer = StreamHeaderWriter();
      def items = array[header];
      writer.Write(items, stream);
    }
    
    public ShouldReadMultipleStreamHeaders() : void
    {
      def bytes = GetMultipleStreamHeaderSampleBytes();
      def inputStream = MemoryStream(bytes);
      def reader = StreamHeaderReader();
      def headerCount = 5 :> ushort;
        
      def headers = reader.Read(headerCount, inputStream);
      def actualHeaders = headers.ToArray();
      assert actualHeaders.Length equals 5 otherwiseprint "Invalid number of headers";
                   
      def verifyHeader(index : ushort, expectedOffset : uint, expectedSize : uint, expectedName : string) : void
      {
        VerifyValue.[uint](index, "Offset", expectedOffset)(actualHeaders);
        VerifyValue.[uint](index, "Size", expectedSize)(actualHeaders);
        VerifyValue.[string](index, "Name", expectedName)(actualHeaders);
      }
      
      verifyHeader(0, 0x0000006C :> uint, 0x00004034 :> uint, "#~");
      verifyHeader(1, 0x000040A0 :> uint, 0x00004FEC :> uint, "#Strings");
      verifyHeader(2, 0x0000908C :> uint, 0x000007BC :> uint, "#US");
      verifyHeader(3, 0x00009848 :> uint, 0x10 :> uint, "#GUID");
      verifyHeader(4, 0x00009858 :> uint, 0x00000E34 :> uint, "#Blob");
    }
    public ShouldWriteMultipleStreamHeaders() : void
    {
      def headers = array(5) : array[IStreamHeader];
      def createHeader(index : ushort, offset : uint, size : uint, name : string) : void
      {
        def header = StreamHeader();
        header.Offset = offset;
        header.Size = size;
        header.Name = name;
            
        headers[index :> int] = header;
      }
      
      createHeader(0, 0x0000006C :> uint, 0x00004034 :> uint, "#~");
      createHeader(1, 0x000040A0 :> uint, 0x00004FEC :> uint, "#Strings");
      createHeader(2, 0x0000908C :> uint, 0x000007BC :> uint, "#US");
      createHeader(3, 0x00009848 :> uint, 0x10 :> uint, "#GUID");
      createHeader(4, 0x00009858 :> uint, 0x00000E34 :> uint, "#Blob");
      
      def outputStream = MemoryStream();
      def writer = StreamHeaderWriter();
      writer.Write(headers, outputStream);
      
      _ = outputStream.Seek(0, SeekOrigin.Begin);
      def properties = typeof(IStreamHeader).GetProperties(BindingFlags.Public | BindingFlags.Instance);
      def reader = StreamHeaderReader();
      def writtenHeaders = reader.Read(5, outputStream).ToArray();
      for(mutable i = 0; i < 5; i++)
      {
          def writtenHeader = writtenHeaders[i];
          def expectedHeader = headers[i];
          foreach(property in properties)
          {
              def actualValue = property.GetValue(writtenHeader, null);
              def expectedValue = property.GetValue(expectedHeader, null);
              
              assert actualValue equals expectedValue otherwiseprint string.Format("Header #{0}: Invalid property '{1}'. Expected: '{2}', ActualValue: '{3}'", i, property.Name, expectedValue, actualValue);
          }
      }
      
      def expectedBytes = GetMultipleStreamHeaderSampleBytes();
      def actualHash = outputStream.GetHash();
      def expectedHash = expectedBytes.GetHash();
      
      assert actualHash equals expectedHash otherwiseprint "The input header bytes do not match the expected output bytes";
    }    
    private VerifyValue[TValue](targetIndex : ushort, propertyName : string, expectedValue : TValue) : array[IStreamHeader] -> void
    {
      VerifyHeaderValue.[TValue](targetIndex, propertyName, expectedValue, _);
    }
    private VerifyHeaderValue[TValue](targetIndex : ushort, propertyName : string, expectedValue : TValue, headers : array[IStreamHeader]) : void
    {
      def targetItem = headers[targetIndex :> int];
      def targetProperty = typeof(IStreamHeader).GetProperty(propertyName, BindingFlags.Public | BindingFlags.Instance);
        
      def actualValue = targetProperty.GetValue(targetItem, null);
      assert actualValue equals expectedValue otherwiseprint string.Format("Invalid property value '{0}'. Expected: '{1}', ActualValue: '{2}'", propertyName, expectedValue, actualValue);
    }
    
    private TestWrite[TValue](propertyName : string, expectedValue : TValue) : void
    {      
      def createHeader() : IEnumerable[IStreamHeader]
      {
        def targetProperty = typeof(IStreamHeader).GetProperty(propertyName, BindingFlags.Public | BindingFlags.Instance);
        def results = List.[IStreamHeader]();
        def header = StreamHeader();
        header.Name = "#SampleStreamName";
        targetProperty.SetValue(header, expectedValue, null);
            
        results.Add(header);
        results;
      };
        
      def readValue(reader : BinaryReader) : TValue
      {
        def targetProperty = typeof(IStreamHeader).GetProperty(propertyName, BindingFlags.Public | BindingFlags.Instance);
        def stream = reader.BaseStream;
        _ = stream.Seek(0, SeekOrigin.Begin);
        def streamReader = StreamHeaderReader();
        def header = streamReader.Read(1, stream).First();
        def result = targetProperty.GetValue(header, null) :> TValue;
        
        result;
      }
        
      Tester.TestElementWrite.[TValue, IStreamHeader, StreamHeaderWriter](propertyName, expectedValue, createHeader, readValue);
    }
    private TestRead[TValue](propertyName : string, expectedValue : TValue) : void
    {
      Tester.TestElementRead.[ushort, IStreamHeader, StreamHeaderReader, TValue](0, 1, propertyName, expectedValue, GetSampleHeader);        
    }
    
    private GetMultipleStreamHeaderSampleBytes() : array[byte]
    {
      def data = array[
        // Header 0:
	    // Offset = 0x0000006C
	    0x6C : byte, 0x00, 0x00, 0x00, 
	    // Size = 0x00004034
	    0x34, 0x40, 0x00, 0x00, 
	    // Name = "#~\0\0"
	    0x23, 0x7E, 0x00, 0x00, 
	    
	    // Header 1 - #Strings:
	    // Offset = 0x000040A0
	    0xA0, 0x40, 0x00, 0x00,
	    // Size = 0x00004FEC
	    0xEC, 0x4F, 0x00, 0x00, 
	    // Name = "#Strings"
	    0x23, 0x53, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x73, 0x00, 0x00, 0x00, 0x00,
	    
	    // Header 2 - #US:
	    // Offset = 0x0000908C
	    0x8C, 0x90, 0x00, 0x00, 
	    // Size = 0x000007BC
	    0xBC, 0x07, 0x00, 0x00,
	    // Name = "#US"
	    0x23, 0x55, 0x53, 0x00
	    , 
	    // Header 3 - #GUID:
	    // Offset = 0x00009848
	    0x48, 0x98, 0x00, 0x00,
	    // Size = 0x10
	    0x10, 0x00, 0x00, 0x00, 
	    // Name = "#GUID"
	    0x23, 0x47, 0x55, 0x49, 0x44, 0x00, 0x00, 0x00, 
	    
	    // Header 4 - #BLOB:
	    // Offset = 0x00009858
	    0x58, 0x98, 0x00, 0x00,
	    // Size = 0x00000E34
	    0x34, 0x0E, 0x00, 0x00, 
	    // Name = "#Blob"
	    0x23, 0x42, 0x6C, 0x6F, 0x62, 0x00, 0x00, 0x00
    ];
      data;
    }
    private GetSampleHeader() : array[byte]
    {
     array[
        // Offset = 0x0000006C
	    0x6C : byte, 0x00, 0x00, 0x00, 
	    // Size = 0x00004034
	    0x34, 0x40, 0x00, 0x00, 
	    // Name = "#~\0\0"
	    0x23, 0x7E, 0x00, 0x00
        ];
    }
  }
}
