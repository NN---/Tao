using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Tao;
using Tao.Interfaces;
using Tests.Macros;

using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

namespace Tests
{
  public partial class ImageTests
  {
    public ShouldReadDosHeader() : void
    {
      def imageFile = @"..\..\SampleBinaries\Skeleton.exe";
      def image = GetImage(imageFile);      
      def expectedHash = GetDosHeader().GetHash();
      def actualHash = image.DOSHeader.Data.GetHash();
        
      assert expectedHash equals actualHash otherwiseprint "Invalid MS-DOS header";
    }

    public ShouldReadCoffHeader() : void
    {
      def imageFile = @"..\..\SampleBinaries\Skeleton.exe";
      def image = GetImage(imageFile);      
      def coffHeader = image.CoffHeader;
      
      assert coffHeader notnull otherwiseprint "Invalid CoffHeader";
      assert coffHeader.Machine equals Machine.I386 otherwiseprint "Invalid Machine value";
      assert coffHeader.NumberOfSections equals 2 otherwiseprint "Invalid NumberOfSections";
      assert coffHeader.TimeDateStamp equals 0x4AD286DD otherwiseprint "Invalid TimeDateStamp";
      assert coffHeader.PointerToSymbolTable equals 0 otherwiseprint "Invalid PointerToSymbolTable";
      assert coffHeader.NumberOfSymbols equals 0 otherwiseprint "Invalid NumberOfSymbols";
      assert coffHeader.OptionalHeaderSize equals 0xE0 otherwiseprint "Invalid SizeOfOptionalHeader";
    }
    
    public ShouldReadOptionalHeader32() : void
    {
      def imageFile = @"..\..\SampleBinaries\Skeleton.exe";
      def image = GetImage(imageFile);
      def header = image.OptionalHeader :> OptionalHeader.OptionalHeader32;
      assert header notnull otherwiseprint "Invalid OptionalHeader";
      
      def standardFields = header.StandardFields;
      def ntHeader = header.Header;      
      
      assert standardFields.MajorLinkerVersion equals 8 otherwiseprint "Invalid MajorLinkerVersion";
      assert standardFields.MinorLinkerVersion equals 0 otherwiseprint "Invalid MinorLinkerVersion";
      assert standardFields.SizeOfCode equals 0x200 otherwiseprint "Invalid SizeOfCode";
      assert standardFields.SizeOfInitializedData equals 0x200 otherwiseprint "Invalid SizeOfInitializedData";
      assert standardFields.SizeOfUninitializedData equals 0 otherwiseprint "Invalid SizeOfUninitializedData";
      assert standardFields.AddressOfEntryPoint equals 0x21CE otherwiseprint "Invalid AddressOfEntryPoint";
      assert standardFields.BaseOfCode equals 0x2000 otherwiseprint "Invalid BaseOfCode";
      assert standardFields.BaseOfData equals 0x4000 otherwiseprint "Invalid BaseOfData";
      
      assert ntHeader.ImageBase equals 0x00400000 otherwiseprint "Invalid BaseOfData";
      assert ntHeader.SectionAlignment equals 0x00002000 otherwiseprint "Invalid SectionAlignment";
      assert ntHeader.FileAlignment equals 0x200 otherwiseprint "Invalid FileAlignment";
      
      assert ntHeader.MajorOperatingSystemVersion equals 4 otherwiseprint "Invalid MajorOperatingSystemVersion";
      assert ntHeader.MinorOperatingSystemVersion equals 0 otherwiseprint "Invalid MinorOperatingSystemVersion";
      
      assert ntHeader.MajorImageVersion equals 0 otherwiseprint "Invalid MajorImageVersion";
      assert ntHeader.MinorImageVersion equals 0 otherwiseprint "Invalid MinorImageVersion";
      
      assert ntHeader.MajorSubsystemVersion equals 4 otherwiseprint "Invalid MajorSubsystemVersion";
      assert ntHeader.MinorSubsystemVersion equals 0 otherwiseprint "Invalid MinorSubsystemVersion";
      assert ntHeader.Win32VersionValue equals 0 otherwiseprint "Invalid Win32VersionValue";
      
      assert ntHeader.SizeOfImage equals 0x6000 otherwiseprint "Invalid SizeOfImage";
      assert ntHeader.SizeOfHeaders equals 0x200 otherwiseprint "Invalid SizeOfHeaders";
      assert ntHeader.CheckSum equals 0 otherwiseprint "Invalid CheckSum";
      assert ntHeader.Subsystem equals Subsystem.WindowsConsole otherwiseprint "Invalid Subsystem";
      assert ntHeader.DllCharacteristics :> ushort equals 0x8540 otherwiseprint "Invalid DllCharacteristics";
      
      assert ntHeader.SizeOfStackReserve equals 0x00100000 otherwiseprint "Invalid SizeOfStackReserve";
      assert ntHeader.SizeOfStackCommit equals 0x00001000 otherwiseprint "Invalid SizeOfStackCommit";
      
      assert ntHeader.SizeOfHeapReserve equals 0x00100000 otherwiseprint "Invalid SizeOfHeapReserve";
      assert ntHeader.SizeOfHeapCommit equals 0x00001000 otherwiseprint "Invalid SizeOfHeapCommit";
      
      assert ntHeader.LoaderFlags equals 0 otherwiseprint "Invalid LoaderFlags";
      assert ntHeader.NumberOfRvaAndSizes equals 0x10 otherwiseprint "Invalid NumberOfRvaAndSizes";
    }
    public ShouldReadOptionalHeader64() : void
    {
      def imageFile = @"..\..\SampleBinaries\SamplePE32PlusApp.exe";
      def image = GetImage(imageFile);
      def header = image.OptionalHeader :> OptionalHeader.OptionalHeader64;
      assert header notnull otherwiseprint "Invalid OptionalHeader";
      
      def standardFields = header.StandardFields;
      def ntHeader = header.Header;      
      
      assert standardFields.MajorLinkerVersion equals 0x0A otherwiseprint "Invalid MajorLinkerVersion";
      assert standardFields.MinorLinkerVersion equals 0 otherwiseprint "Invalid MinorLinkerVersion";
      assert standardFields.SizeOfCode equals 0x2400 otherwiseprint "Invalid SizeOfCode";
      assert standardFields.SizeOfInitializedData equals 0xC400 otherwiseprint "Invalid SizeOfInitializedData";
      assert standardFields.SizeOfUninitializedData equals 0 otherwiseprint "Invalid SizeOfUninitializedData";
      assert standardFields.AddressOfEntryPoint equals 0x2B78 otherwiseprint "Invalid AddressOfEntryPoint";
      assert standardFields.BaseOfCode equals 0x1000 otherwiseprint "Invalid BaseOfCode";
      assert standardFields.BaseOfData equals null otherwiseprint "Invalid BaseOfData";
      
      assert ntHeader.ImageBase equals 0x0000000140000000 otherwiseprint "Invalid BaseOfData";
      assert ntHeader.SectionAlignment equals 0x00001000 otherwiseprint "Invalid SectionAlignment";
      assert ntHeader.FileAlignment equals 0x200 otherwiseprint "Invalid FileAlignment";
      
      assert ntHeader.MajorOperatingSystemVersion equals 5 otherwiseprint "Invalid MajorOperatingSystemVersion";
      assert ntHeader.MinorOperatingSystemVersion equals 2 otherwiseprint "Invalid MinorOperatingSystemVersion";
      
      assert ntHeader.MajorImageVersion equals 0 otherwiseprint "Invalid MajorImageVersion";
      assert ntHeader.MinorImageVersion equals 0 otherwiseprint "Invalid MinorImageVersion";
      
      assert ntHeader.MajorSubsystemVersion equals 5 otherwiseprint "Invalid MajorSubsystemVersion";
      assert ntHeader.MinorSubsystemVersion equals 2 otherwiseprint "Invalid MinorSubsystemVersion";
      assert ntHeader.Win32VersionValue equals 0 otherwiseprint "Invalid Win32VersionValue";
      
      assert ntHeader.SizeOfImage equals 0x00014000 otherwiseprint "Invalid SizeOfImage";
      assert ntHeader.SizeOfHeaders equals 0x400 otherwiseprint "Invalid SizeOfHeaders";
      assert ntHeader.CheckSum equals 0x00012B4C otherwiseprint "Invalid CheckSum";
      assert ntHeader.Subsystem equals Subsystem.WindowsConsole otherwiseprint "Invalid Subsystem";
      assert ntHeader.DllCharacteristics :> ushort equals 0x8140 otherwiseprint "Invalid DllCharacteristics";
      
      assert ntHeader.SizeOfStackReserve equals 0x0000000000100000 otherwiseprint "Invalid SizeOfStackReserve";
      assert ntHeader.SizeOfStackCommit equals 0x0000000000001000 otherwiseprint "Invalid SizeOfStackCommit";
      
      assert ntHeader.SizeOfHeapReserve equals 0x0000000000100000 otherwiseprint "Invalid SizeOfHeapReserve";
      assert ntHeader.SizeOfHeapCommit equals 0x0000000000001000 otherwiseprint "Invalid SizeOfHeapCommit";
      
      assert ntHeader.LoaderFlags equals 0 otherwiseprint "Invalid LoaderFlags";
      assert ntHeader.NumberOfRvaAndSizes equals 0x10 otherwiseprint "Invalid NumberOfRvaAndSizes";
    }
    
    public ShouldBeAbleToReadDataDirectories() : void
    {
      def emptyDataDirectoryIndices = array[0, 4, 7, 8, 9, 10, 11, 13, 15];
        
      def imageFile = @"..\..\SampleBinaries\SamplePE32PlusApp.exe";
      def image = GetImage(imageFile);
      
      def directories = image.DataDirectories;
      assert directories.Count equals 0x10 otherwiseprint "Invalid number of data directories";
      
      foreach(index in emptyDataDirectoryIndices)
      {
        def directory = directories[index];
        assert directory.Rva equals 0 otherwiseprint "This data directory should be empty";
        assert directory.Size equals 0 otherwiseprint "This data directory should be empty";
      }
      
      // Verify the Import directory RVA and size
      assert directories[1].Rva equals 0x0000EE98 otherwiseprint "Invalid Import directory RVA";
      assert directories[1].Size equals 0x00000050 otherwiseprint "Invalid Import directory Size";
      
      // Verify the Resource directory RVA and size
      assert directories[2].Rva equals 0x00012000 otherwiseprint "Invalid Resource directory RVA";
      assert directories[2].Size equals 0x000006A8 otherwiseprint "Invalid Resource directory Size";
      
      // Verify the Exception directory RVA and size
      assert directories[3].Rva equals 0x00011000 otherwiseprint "Invalid Exception directory RVA";
      assert directories[3].Size equals 0x00000060 otherwiseprint "Invalid Exception directory Size";
      
      // Verify the Relocation directory RVA and size
      assert directories[5].Rva equals 0x00013000 otherwiseprint "Invalid Relocation directory RVA";
      assert directories[5].Size equals 0x00000010 otherwiseprint "Invalid Relocation directory Size";
      
      // Verify the Debug directory RVA and size
      assert directories[6].Rva equals 0x00004180 otherwiseprint "Invalid Debug directory RVA";
      assert directories[6].Size equals 0x0000001C otherwiseprint "Invalid Debug directory Size";
      
      // Verify the IAT directory RVA and size
      assert directories[12].Rva equals 0x00004000 otherwiseprint "Invalid IAT directory RVA";
      assert directories[12].Size equals 0x000000E8 otherwiseprint "Invalid IAT directory Size";
      
      // Verify the CLR directory RVA and size
      assert directories[14].Rva equals 0x0000419C otherwiseprint "Invalid CLR directory RVA";
      assert directories[14].Size equals 0x00000048 otherwiseprint "Invalid CLR directory Size";
    }    
    
    public ShouldBeAbleToReadSections() : void
    {
      def textSectionHash = GetTextSectionHash();
      def relocSectionHash = GetRelocSectionHash();
      
      def imageFile = @"..\..\SampleBinaries\skeleton.exe";
      def image = GetImage(imageFile);
      
      def sectionCount = image.Sections.Count;
      assert sectionCount equals 2 otherwiseprint "Invalid number of sections";  
      
      def textSection = image.Sections[0];
      mutable header = textSection.Header;
      assert header.Name equals ".text" otherwiseprint "Invalid section name";
      assert header.VirtualSize equals 0x1D4 otherwiseprint "Invalid VirtualSize";
      assert header.VirtualAddress equals 0x2000 otherwiseprint "Invalid VirtualAddress";
      assert header.SizeOfRawData equals 0x200 otherwiseprint "Invalid SizeOfRawData";
      assert header.PointerToRawData equals 0x200 otherwiseprint "Invalid PointerToRawData";
      assert header.PointerToRelocations equals 0 otherwiseprint "Invalid PointerToRelocations";
      assert header.PointerToLineNumbers equals 0 otherwiseprint "Invalid PointerToLineNumbers";
      assert header.NumberOfRelocations equals 0 otherwiseprint "Invalid NumberOfRelocations";
      assert header.NumberOfLineNumbers equals 0 otherwiseprint "Invalid NumberOfLineNumbers";
      assert header.Characteristics :> uint equals 0x60000020 otherwiseprint "Invalid Characteristics";
      
      header = image.Sections[1].Header;
      assert header.Name equals ".reloc" otherwiseprint "Invalid section name";
      assert header.VirtualSize equals 0xC otherwiseprint "Invalid VirtualSize";
      assert header.VirtualAddress equals 0x4000 otherwiseprint "Invalid VirtualAddress";
      assert header.SizeOfRawData equals 0x200 otherwiseprint "Invalid SizeOfRawData";
      assert header.PointerToRawData equals 0x400 otherwiseprint "Invalid PointerToRawData";
      assert header.PointerToRelocations equals 0 otherwiseprint "Invalid PointerToRelocations";
      assert header.PointerToLineNumbers equals 0 otherwiseprint "Invalid PointerToLineNumbers";
      assert header.NumberOfRelocations equals 0 otherwiseprint "Invalid NumberOfRelocations";
      assert header.NumberOfLineNumbers equals 0 otherwiseprint "Invalid NumberOfLineNumbers";
      assert header.Characteristics :> uint equals 0x42000040 otherwiseprint "Invalid Characteristics";
    }        
        
    public ShouldBeAbleToRoundTripAnEntire32BitImage() : void
    {
      //def imageFile = @"..\..\SampleBinaries\Skeleton.exe";
      //def image = GetImage(imageFile);
      
      //mutable expectedHash = string.Empty;
      
      //using(def imageStream = System.IO.FileStream(imageFile, FileMode.Open))
      //{
      //  expectedHash = imageStream.GetHash();
      //}
      
      //def outputStream = MemoryStream();
      //def writer = ImageWriter();
      //writer.Write(image, outputStream);
      
      //def actualHash = outputStream.GetHash();
      //assert actualHash equals expectedHash otherwiseprint "Invalid image";      
      throw NotImplementedException();
    }
    public ShouldWriteCorrectOptionalHeaderSizeFor32BitHeaders() : void
    {
      throw NotImplementedException();
    }
    public ShouldWriteCorrectOptionalHeaderSizeFor64BitHeaders() : void
    {
      throw NotImplementedException();
    }
    public ShouldWriteNumberOfSymbolsAsZero() : void
    {
      throw NotImplementedException();
    }
    public ShouldWriteNullPointerToSymbolTable() : void
    {
      throw NotImplementedException();
    }
    public ShouldWriteCorrectNumberOfSectionsThatCorrespondWithTheNumberOfSectionObjectsOnTheImage() : void
    {
      throw NotImplementedException();
    }
    public ShouldWriteNumberOfRvaAndSizesThatCorrespondWithTheNumberOfDataDirectories() : void
    {
      throw NotImplementedException();  
    }
    public ShouldHaveWrittenMSDosHeaderPointingToPositionOfCoffHeader() : void
    {           
      def imageFile = @"..\..\SampleBinaries\Skeleton.exe";
      def inputImage = GetImage(imageFile);
      
      // Write the entire image to the output stream
      def outputStream = MemoryStream();
      def writer = ImageWriter();
      writer.Write(inputImage, outputStream);                  
            
      def lfaNew = inputImage.DOSHeader.LfaNew;
      
      // Read only up to the size of the COFF header
      def outputHeaderSize : uint = 24;
      
      // The output image should match the input image
      using(inputStream = FileStream(@"..\..\SampleBinaries\Skeleton.exe", FileMode.Open))
      {
        def outputHeaderBlock = GetCoffHeaderData(outputStream, lfaNew, outputHeaderSize);
        def inputHeaderBlock = GetCoffHeaderData(inputStream, lfaNew, outputHeaderSize);
        
        def expectedHash = inputHeaderBlock.GetHash();
        def actualHash = outputHeaderBlock.GetHash();
        assert expectedHash equals actualHash otherwiseprint "The output Optional header does not match the given input Optional header";
      }           
    }
    private GetCoffHeaderData(stream : Stream, startPosition : uint, size : uint) : array[byte]
    {
      _ = stream.Seek(startPosition, SeekOrigin.Begin);
      
      def blockReader = BinaryReader(stream);
      blockReader.ReadBytes(size :> int);
    }
    
    public ShouldWriteOptionalHeaderAfterCoffHeaderPosition() : void
    {                  
      throw NotImplementedException();
    }
    public ShouldWriteCorrectDateTimeStamp() :  void
    {
      throw NotImplementedException();
    }
    public ShouldBeAbleToRoundTripAnEntire64BitImage() : void
    {
      throw NotImplementedException();
    }
    public ShouldWriteDataDirectoriesImmediatelyAfterOptionalHeaderWritePosition() : void
    {
      throw NotImplementedException();
    }
    public ShouldWriteSectionHeadersImmediatelyAfterDataDirectories() : void
    {
      throw NotImplementedException();  
    }
    public ShouldWriteSectionDataAfterSectionHeaders() : void
    {
      throw NotImplementedException();    
    }
    public ShouldAlignWrittenSectionsAccordingToFileAlignment() : void
    {
      throw NotImplementedException();  
    }
    public ShouldWriteSectionHeadersThatPointToTheActualPositionOfEachCorrespondingSectionDataBlock() : void
    {
      throw NotImplementedException();    
    }
    private GetImage(imageFile : string) : IImage
    {
      using(def imageStream = System.IO.FileStream(imageFile, FileMode.Open))
      {
        def reader = ImageReader();
        reader.Read(imageStream);
      }      
    }
    
    private GetDosHeader() : array[byte]
    {
      def data = array[
	    0x4D : byte, 0x5A, 0x90, 0x00, 0x03, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00,
	    0xB8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00,
	    0x0E, 0x1F, 0xBA, 0x0E, 0x00, 0xB4, 0x09, 0xCD, 0x21, 0xB8, 0x01, 0x4C, 0xCD, 0x21, 0x54, 0x68,
	    0x69, 0x73, 0x20, 0x70, 0x72, 0x6F, 0x67, 0x72, 0x61, 0x6D, 0x20, 0x63, 0x61, 0x6E, 0x6E, 0x6F,
	    0x74, 0x20, 0x62, 0x65, 0x20, 0x72, 0x75, 0x6E, 0x20, 0x69, 0x6E, 0x20, 0x44, 0x4F, 0x53, 0x20,
	    0x6D, 0x6F, 0x64, 0x65, 0x2E, 0x0D, 0x0D, 0x0A, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00  
     ];
                 
      data;
    }    
  }
}
