using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Tao.Interfaces;

using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

namespace Tao
{  
  public class ImageWriter
  {
    public Write([NotNull] image : IImage, [NotNull] outputStream : Stream) : void        
    {
      def dosHeader = image.DOSHeader;
      def dosHeaderWriter = DosHeaderWriter();
      dosHeaderWriter.Write(dosHeader, outputStream);
          
      // Seek the COFF header position
      def lfaNew = dosHeader.LfaNew;
      _ = outputStream.Seek(lfaNew, SeekOrigin.Begin);
          
      def coffHeader = image.CoffHeader;
      def coffHeaderWriter = CoffHeaderWriter();
      coffHeaderWriter.Write(coffHeader, outputStream);
      
      //def standardFieldsWriter = OptionalHeaderStandardFieldsWriter();
      //def optionalHeader = image.OptionalHeader;
          
      //match(optionalHeader)
      //{
      //  |OptionalHeader.OptionalHeader32 =>
      //   {
      //      def currentHeader = optionalHeader :> OptionalHeader.OptionalHeader32;
      //      def standardFields = currentHeader.StandardFields;
      //      def ntHeaderWriter = NTHeader32Writer();
            
      //      standardFieldsWriter.Write(standardFields, outputStream);
      //      ntHeaderWriter.Write(currentHeader.Header, outputStream);
      //   }
      //  |OptionalHeader.OptionalHeader64 =>
      //   {
      //      def currentHeader = optionalHeader :> OptionalHeader.OptionalHeader64;
      //      def standardFields = currentHeader.StandardFields;
      //      def ntHeaderWriter = NTHeader64Writer();
            
      //      standardFieldsWriter.Write(standardFields, outputStream);
      //      ntHeaderWriter.Write(currentHeader.Header, outputStream);
      //   }
      //}          
    }
  }
}
