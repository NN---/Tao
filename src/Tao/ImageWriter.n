using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Tao.Interfaces;

using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

namespace Tao
{  
  public class ImageWriter
  {
    public Write([NotNull] image : IImage, [NotNull] outputStream : Stream) : void
    {
      def dosHeader = image.DOSHeader;
      def dosHeaderWriter = DosHeaderWriter();
      dosHeaderWriter.Write(dosHeader, outputStream);
                      
      // Seek the COFF header position
      def lfaNew = dosHeader.LfaNew;
      _ = outputStream.Seek(lfaNew, SeekOrigin.Begin);
          
      def coffHeader = image.CoffHeader;
      
      // Write the number of sections to the COFF header
      def sections = image.Sections;
      coffHeader.NumberOfSections = sections.Count :> ushort;
      
      def coffHeaderWriter = CoffHeaderWriter();
      coffHeaderWriter.Write(coffHeader, outputStream);
      
      def standardFieldsWriter = OptionalHeaderStandardFieldsWriter();
      def optionalHeader = image.OptionalHeader;
          
      def directoryCount = image.DataDirectories.Count :> uint;
      match(optionalHeader)
      {
        |OptionalHeader.OptionalHeader32 =>
         {
            def currentHeader = optionalHeader :> OptionalHeader.OptionalHeader32;
            def standardFields = currentHeader.StandardFields;
            def ntHeaderWriter = NTHeader32Writer();
            
            // Make sure that the number of directories is consistent with 
            // the value in the header
            currentHeader.Header.NumberOfRvaAndSizes = directoryCount;
            standardFieldsWriter.Write(standardFields, outputStream);
            ntHeaderWriter.Write(currentHeader.Header, outputStream);
         }
        |OptionalHeader.OptionalHeader64 =>
         {
            def currentHeader = optionalHeader :> OptionalHeader.OptionalHeader64;
            def standardFields = currentHeader.StandardFields;
            def ntHeaderWriter = NTHeader64Writer();
            
            // Make sure that the number of directories is consistent with 
            // the value in the header
            currentHeader.Header.NumberOfRvaAndSizes = directoryCount;
            standardFieldsWriter.Write(standardFields, outputStream);
            ntHeaderWriter.Write(currentHeader.Header, outputStream);
         }
      }                
      
      // Write the data directories
      def dataDirectoryWriter = DataDirectoryWriter();
      dataDirectoryWriter.Write(image.DataDirectories, outputStream);
      
      // Write the sections      
      def sectionHeaderWriter = SectionHeaderWriter();
      def sectionHeaders = sections.Select(s => s.Header);
      sectionHeaderWriter.Write(sectionHeaders, outputStream);
      
      def writer = BinaryWriter(outputStream);
      foreach(section in sections)
      {
          def sectionData = section.Data;
          def header = section.Header;
          def reader = BinaryReader(sectionData);
                              
          def length = header.SizeOfRawData;                    
          def sectionBytes = reader.ReadBytes(length :> int);
          
          def startPosition = header.PointerToRawData;
          _ = outputStream.Seek(startPosition, SeekOrigin.Begin);
          writer.Write(sectionBytes);
      }
    }
  }
}
