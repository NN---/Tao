using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;
using System.Security.Cryptography;

namespace Tao
{
    public static class StreamExtensions
    {
        public static GetHash([NotNull] this stream : Stream) : string
        {
            _ = stream.Seek(0, SeekOrigin.Begin);
            def reader = BinaryReader(stream);
            def streamLength = stream.Length;
            def bytes = reader.ReadBytes(streamLength :> int);

            bytes.GetHash();
        }        
        public static GetHash(this byteArray : array[byte]) : string
        {
            def provider = System.Security.Cryptography.SHA512CryptoServiceProvider();
            BitConverter.ToString(provider.ComputeHash(byteArray));    
        }
        
        public static WriteAllBytesTo([NotNull] this bytes : array[byte], filename : string) : void
        {
            def stream = MemoryStream(bytes);
            stream.WriteAllBytesTo(filename);
        }

        public static WriteAllBytesTo([NotNull] this stream : Stream, filename : string) : void
        {
            _ = stream.Seek(0, SeekOrigin.Begin);

            def reader = BinaryReader(stream);
            def bytes = reader.ReadBytes(stream.Length:> int);

            File.WriteAllBytes(filename, bytes);
        }

        public ReadBytes([NotNull] this stream : Stream, count : int, startPosition : long = 0) : array[byte]
        {
            stream.Seek(startPosition);
            def reader = BinaryReader(stream);
            reader.ReadBytes(count);
        }

        public Seek([NotNull] this stream : Stream, position : long, origin : SeekOrigin = SeekOrigin.Begin) : void
        {
            _ = stream.Seek(position, origin);
        }
        public static PeekByte([NotNull] this reader : BinaryReader) : byte            
        {
            def stream = reader.BaseStream;
            def startPosition = reader.BaseStream.Position;
            def result = reader.ReadByte();
            stream.Position = startPosition;

            result;
        }
        public static PeekByte([NotNull] this stream : Stream) : byte
            requires stream.Length > 0
            requires stream.Position != stream.Length
        {
            def reader = BinaryReader(stream);
            reader.PeekByte();
        }
        public static AtEnd([NotNull] this stream : Stream) : bool
        {
            !(stream.Position < stream.Length);
        }

        public static ReadAllBytes(this stream : Stream) : array[byte]
        {
            stream.Seek(0);

            def reader = BinaryReader(stream);
            reader.ReadBytes(stream.Length :> int);
        }
    }
}
