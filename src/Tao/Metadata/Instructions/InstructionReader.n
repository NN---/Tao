using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

using Tao.Metadata.Instructions.Operands;
namespace Tao.Metadata.Instructions
{
    public class InstructionReader : IInstructionReader
    {
        private _reader : IIndividualInstructionReader;
        
        public this()
        {
            this(IndividualInstructionReader());
        }
        
        public this([NotNull] reader : IIndividualInstructionReader) 
        {
            _reader = reader;
        }
        
        public Read([NotNull] instructionStream : Stream, [NotNull] userStringHeap : Stream) : array[IInstruction]
        {
            def instructionMap = Dictionary.[uint, IInstruction]();
            def codeSize = instructionStream.Length;
            mutable bytesRead : uint = 0;

            while(bytesRead < codeSize)
            {
                def startPosition = instructionStream.Position :> uint;
                _reader.ReadInstruction(instructionStream, userStringHeap, instructionMap);

                def currentPosition = (instructionStream.Position :> uint);
                bytesRead += currentPosition - startPosition;                
            }

            def results = instructionMap.Values.ToArray();

            // Resolve all the lazy instructions            
            for(mutable i = 0; i < results.Length; i++)
            {
                def currentInstruction = results[i];
                when(currentInstruction is LazyInstruction && currentInstruction != null)
                {
                    def lazyInstruction = currentInstruction :> LazyInstruction;
                    results[i] = lazyInstruction.Resolve();
                }
            }

            results;
        }            
    }
}
