using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Tao.Metadata.Instructions.Operands
{
    public class BranchInstructionOperandConverter : IOperandConverter
    {
        private _instructionMap : IDictionary.[IInstruction, uint];
        private _branchInstruction : IInstruction;
        
        public this([NotNull] instructionMap : IDictionary.[IInstruction, uint], [NotNull] sourceBranchInstruction : IInstruction)
        {
            _instructionMap = instructionMap;
            _branchInstruction = sourceBranchInstruction;
        }
        
        public ConvertOperand([NotNull] operand : object) : object
            requires operand is IInstruction
        {
            def targetInstruction = operand :> IInstruction;
            mutable relativeOffset : int =_branchInstruction.GetRelativeOffsetTo(targetInstruction, _instructionMap);
            
            // Adjust the relative offset to accommodate (subtract) the current instruction size
            // Calculate the size of the OpCode
            def instructionSize = _branchInstruction.GetSize();            
            relativeOffset -= (instructionSize :> int);
            
            // Use the correct branch target width
            def offsetValue = Math.Abs(relativeOffset);            
            if(offsetValue < (sbyte.MaxValue :> int))
            {
                relativeOffset :> sbyte;
            }
            else
            {
                relativeOffset;
            }
        }
    }
}
