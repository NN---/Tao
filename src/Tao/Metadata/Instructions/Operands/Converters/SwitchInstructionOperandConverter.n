using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Tao.Metadata.Instructions.Operands
{
    public class SwitchInstructionOperandConverter : IOperandConverter
    {
        private _instructionMap : IDictionary.[IInstruction, uint];
        private _branchInstruction : IInstruction;

        public this([NotNull] instructionMap : IDictionary.[IInstruction, uint], [NotNull] sourceBranchInstruction : IInstruction)
        {
            _instructionMap = instructionMap;
            _branchInstruction = sourceBranchInstruction;
        }

        public ConvertOperand([NotNull] operand : object) : object
            requires operand is array[IInstruction]
        {
            def targetInstructions = operand :> array[IInstruction];
            def offsets = List.[int]();
            
            foreach(targetInstruction in targetInstructions)
            {
                def offset = _branchInstruction.GetRelativeOffsetTo(targetInstruction, _instructionMap);
                offsets.Add(offset);
            }
            
            offsets.ToArray();
        }
    }
}
