using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

using Tao.Metadata;
using Tao.Metadata.Instructions.Operands;
namespace Tao.Metadata.Instructions
{
    public class IndividualInstructionReader : IIndividualInstructionReader
    {
        private static operandReaderMap : OperandReaderMap = OperandReaderMap();        
        private _interpreter : IInstructionInterpreter;
        
        public this(stringReader : IBoundStringReader)
        {            
            this(InstructionInterpreter(stringReader));
        }
        
        public this([NotNull] interpreter : IInstructionInterpreter)
        {            
            _interpreter = interpreter;
        }
        
        public ReadInstruction([NotNull] instructionStream : Stream, [NotNull] instructionMap : IDictionary.[uint, IInstruction]) : void
        {         
            // Ensure that all instructions are read once and only once
            def currentPosition = instructionStream.Position :> uint;
            ReadInstructionAt(currentPosition, instructionStream, instructionMap);
        }

        private ReadInstructionAt(targetOffset : uint, [NotNull] instructionStream : Stream, [NotNull] instructionMap : IDictionary.[uint, IInstruction]) : void
            requires _interpreter != null
            // A new instruction should be placed at the target offset 
            ensures instructionMap.ContainsKey(targetOffset)
        {
            _ = instructionStream.Seek(targetOffset, SeekOrigin.Begin);

            when(!instructionMap.ContainsKey(targetOffset))
            {
                def decoder = OpCodeDecoder();

                // Get the offset
                def offset = instructionStream.Position :> uint;

                // Read the OpCode
                def opCode = decoder.Decode(instructionStream);

                // Read the operand that corresponds with the currrent OpCode
                mutable operand = null;

                when(operandReaderMap.ContainsKey(opCode))
                {
                    def operandReader = operandReaderMap[opCode];
                    def rawOperandValue = operandReader.ReadOperandFrom(instructionStream);
                    operand = _interpreter.Reinterpret(rawOperandValue, opCode, instructionMap, instructionStream);
                }

                def instruction = Instruction(offset, opCode, operand);
                instructionMap[offset] = instruction;
            }
        }    
    }
}
