using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

using Tao.Metadata.Instructions.Operands;

namespace Tao.Metadata.Instructions
{
    public static class InstructionExtensions
    {
        public static GetRelativeOffsetTo(this instruction : IInstruction, [NotNull] otherInstruction : IInstruction, [NotNull] instructionMap : IDictionary[IInstruction, uint]) : int
            requires instructionMap.ContainsKey(otherInstruction) otherwise throw ArgumentException("The target instruction must be a part of the given instruction map before you can calculate its relative offset from the current instruction.")
            requires instructionMap.ContainsKey(instruction) otherwise throw ArgumentException("The current instruction must be a part of the given instruction map before you can calculate its relative offset to the other instruction.")
        {
            def currentMapOffset = instructionMap[instruction] :> int;
            def targetOffset = instructionMap[otherInstruction] :> int;
            
            targetOffset - currentMapOffset;
        }
        public static GetSize(this instruction : IInstruction) : uint
        {
            def opCode = instruction.OpCode;
            def opCodeSize = opCode.Size;
            def operand = instruction.Operand;
            
            // Calculate the operand size
            mutable operandSize : uint = 0;
            when(opCode == OpCodes.Switch)
            {
                def items = operand :> IEnumerable.[IInstruction];
                def itemCount = items.Count();
                def sizer = InlineSwitchOperandSizer(itemCount :> uint);
                operandSize = sizer.GetOperandSize();
            }
            
            def operandSizerMap = OperandSizerMap();
            when(operandSizerMap.ContainsKey(opCode))
            {
                def sizer = operandSizerMap[opCode];
                operandSize = sizer.GetOperandSize();
            }
            
            def instructionSize : uint = opCodeSize + operandSize;
            instructionSize;
        }
    }
}
