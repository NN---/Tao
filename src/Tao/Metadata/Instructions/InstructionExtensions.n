using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

namespace Tao.Metadata.Instructions
{
    public static class InstructionExtensions
    {
        public static GetRelativeOffsetTo(this instruction : IInstruction, [NotNull] otherInstruction : IInstruction, [NotNull] instructionMap : IDictionary[IInstruction, uint]) : int
            requires instructionMap.ContainsKey(otherInstruction) otherwise throw ArgumentException("The target instruction must be a part of the given instruction map before you can calculate its relative offset from the current instruction.")
            requires instructionMap.ContainsKey(instruction) otherwise throw ArgumentException("The current instruction must be a part of the given instruction map before you can calculate its relative offset to the other instruction.")
        {
            def currentMapOffset = instructionMap[instruction] :> int;
            def targetOffset = instructionMap[otherInstruction] :> int;
            
            currentMapOffset - targetOffset;
        }
    }
}
