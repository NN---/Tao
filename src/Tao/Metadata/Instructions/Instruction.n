using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Tao.Metadata.Instructions
{
    public class Instruction : IInstruction
    {
        public this(offset : uint, opCode : OpCode, operand : object)
        {
            Offset = offset;
            OpCode = opCode;
            Operand = operand;
        }
        
        public Offset : uint
        {
            get;set;
        }
        
        public OpCode : OpCode
        {
            get;set;
        }
        
        public Operand : object
        {
            get;set;
        }
        
        public override ToString() : string
        {
            mutable operand : object = "(null)";            
            when(this.Operand != null)
            {
                operand = this.Operand;
            }
            
            string.Format("OpCode: {0}, Operand: {1}", this.OpCode, operand);
        }
        
        public override Equals(other : object) : bool
        {
            mutable result = false;
            when(other is IInstruction)
            {      
                def instruction = other :> IInstruction;
                result = this.OpCode == instruction.OpCode && this.Operand == instruction.Operand && this.Offset == instruction.Offset;                
            }
            
            result;
        }
        public GetRelativeOffsetTo([NotNull] otherInstruction : IInstruction, [NotNull] instructionMap : IDictionary[IInstruction, uint]) : int
            requires instructionMap.ContainsKey(otherInstruction) otherwise throw ArgumentException("The target instruction must be a part of the given instruction map before you can calculate its relative offset from the current instruction.")
            requires instructionMap.ContainsKey(this) otherwise throw ArgumentException("The current instruction must be a part of the given instruction map before you can calculate its relative offset to the other instruction.")
        {
            def currentMapOffset = instructionMap[this] :> int;
            def targetOffset = instructionMap[otherInstruction] :> int;
            
            currentMapOffset - targetOffset;
        }
    }
}
