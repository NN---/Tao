using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Tao.Interfaces;

using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

namespace Tao.Metadata
{
  public class MetadataRootReader : IMetadataRootReader
  {
    public Read(inputStream : Stream) : IMetadataRoot
    { 
      def startPosition = inputStream.Position;
      def reader = BinaryReader(inputStream);
          
          // Search for the magic signature
      def signature = reader.ReadUInt32();
      when (signature != 0x424A5342)
        throw BadImageFormatException("Missing Metadata Signature");
            
      def root = MetadataRoot();
      root.Signature = signature;
      root.MajorVersion = reader.ReadUInt16();
      root.MinorVersion = reader.ReadUInt16();
          
      // Ignore the reserved value
      _ = reader.ReadUInt32();
          
      // Determine the string length
      def length = reader.ReadUInt32();
      root.Length = length;
      
      def stringReader = PaddedNullTerminatedStringReader();
      def text = stringReader.Read(length, inputStream);
      root.Version = text;                                
      
      // Skip reading the flags field
      _ = reader.ReadUInt16();
      def numberOfHeaders = reader.ReadUInt16();
      root.NumberOfStreamHeaders = numberOfHeaders;
          
      // Read the attached stream headers
      def streamHeaderReader = StreamHeaderReader();
      def streamHeaders = streamHeaderReader.Read(numberOfHeaders, inputStream);
          
      foreach(header in streamHeaders)
      {
        def offset = header.Offset;
        def size = header.Size;
        def position = startPosition + offset;
        def name = header.Name;
        
        // Read the attached table heap
        _ = inputStream.Seek(position, SeekOrigin.Begin);
        def bytes = reader.ReadBytes(size :> int);
        root.Heaps[name] = MemoryStream(bytes);
        
        root.StreamHeaders.Add(header);
      }
            
      root;
    }
  }
}
