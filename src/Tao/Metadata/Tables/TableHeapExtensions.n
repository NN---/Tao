using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;

using Tao;
using Tao.Metadata;
using Tao.Metadata.Tables;
using Tao.Metadata.Tables.Rows;

namespace Tao.Metadata.Tables
{
    public static class TableHeapExtensions
    {
        public GetRows[TRow, TTable](this heap : ITablesHeap) : IEnumerable[TRow]
            where TTable : IMetadataTable[TRow], IMetadataTable
        {
            def extractor = RowExtractor.[TRow, TTable]();
            def rows = extractor.ExtractFrom(heap).ToArray();
            rows;
        }
        
        public GetTable[TTable](this heap : ITablesHeap) : TTable
            where TTable : IMetadataTable, class
        {
            mutable result : TTable = null;
            
            def tableCount = heap.Tables.Count();
            def tables = heap.Tables.ToArray();
            for(mutable i = 0; i < tableCount; i++)
            {
                def table = tables[i];
                when(table is TTable)
                {
                    result = table :> TTable;
                }
            }
            result;
        }
    }
}
