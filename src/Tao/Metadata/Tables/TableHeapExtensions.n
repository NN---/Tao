using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;

using Tao;
using Tao.Metadata;
using Tao.Metadata.Tables;
using Tao.Metadata.Tables.Rows;

namespace Tao.Metadata.Tables
{
    public static class TableHeapExtensions
    {
        public GetCustomAttributeRows(this heap : ITablesHeap, tableId : TableId, rowIndex : uint) : IEnumerable[CustomAttributeRow]
        {
            def customAttributeTable = heap.GetTable.[CustomAttributeTable]();
            foreach(row in customAttributeTable.Rows)
            {
                def parentRef = row.Parent.ToRowRef(CodedTokenType.HasCustomAttribute);
                when(parentRef.TableId == tableId && parentRef.Row == rowIndex)
                {
                    yield row;
                }
            }
        }
        
        public GetRow(this heap : ITablesHeap, rowReference : IRowReference) : IRow
        {
            rowReference.GetRowFrom(heap);
        }
        
        public GetRow[TRow](this heap : ITablesHeap, rowIndex : uint) : TRow
            where TRow : class, IRow
        {            
            mutable result : TRow = null;
            when(rowIndex > 0)
            {
                def tables = heap.Tables.ToArray();
                def rowCount = tables.Length;
                for(mutable i = 0; i < rowCount && result == null; i++)
                {
                    def table = tables[i];
                    when(table is IMetadataTable[TRow])
                    {
                        def targetTable = table :> IMetadataTable[TRow];
                        def actualIndex = rowIndex - 1;
                        result = targetTable.Rows[actualIndex :> int];
                    }
                }
            }
            result;
        }
        public GetTypeRow[TRow](this heap : ITablesHeap, typeName : string, [NotNull] stringHeap : Stream) : TRow
            where TRow : ITypeRow, class
        {
            def isTargetType(row : TRow) : bool
            {
                row.TypeName.ToString(stringHeap) == typeName;
            }
            
            heap.GetTypeRow.[TRow](isTargetType);
        }
        
        public GetTypeRow[TRow](this heap : ITablesHeap, isTargetRow : TRow -> bool ) : TRow
            where TRow : ITypeRow, class
        {
            def index = heap.GetRowIndex(isTargetRow);

            mutable result : TRow = null;
            when(index != null && index.HasValue)
            {
                result = heap.GetRow.[TRow](index.Value);
            }
                        
            result;        
        }
        public GetTypeRowIndex[TRow](this heap : ITablesHeap, [NotNull] typeName : string, stringHeap : Stream) : uint?
            where TRow : ITypeRow, class
        {
            def isTargetType(row : TRow) : bool
            {
                row.TypeName.ToString(stringHeap) == typeName;
            }
            heap.GetTypeRowIndex(isTargetType);
        }
        
        public GetTypeRowIndex[TRow](this heap : ITablesHeap, [NotNull] isTargetRow : TRow -> bool) : uint?
            where TRow : ITypeRow, class
        {
            heap.GetRowIndex.[TRow](isTargetRow);
        }
        public GetRowIndex[TRow](this heap : ITablesHeap, [NotNull] isTargetRow : TRow -> bool) : uint?
        {
            mutable targetIndex : uint? = null;
            def rows = heap.GetRows.[TRow]().ToArray();
            def length = rows.Length :> uint;
            for(mutable i : uint = 0; i < length && targetIndex == null; i++)
            {
                def row = rows[i :> int];                
                when(isTargetRow(row))
                {
                    targetIndex = i + 1;
                }
            }

            targetIndex;
        }
        public GetRows[TRow](this heap : ITablesHeap, [NotNull] filter : TRow -> bool) : IEnumerable[TRow]
        {
            heap.GetRows.[TRow]().Where(filter);            
        }
        public GetRows[TRow](this heap : ITablesHeap) : IEnumerable[TRow]
        {
            mutable targetTable : IMetadataTable[TRow] = null;

            def tableCount = heap.Tables.Count();
            def tables = heap.Tables.ToArray();
            for(mutable i = 0; i < tableCount; i++)
            {
                def table = tables[i];
                when(table is IMetadataTable[TRow])
                {
                    targetTable = table :> IMetadataTable[TRow];
                }
            }

            def rows = List.[TRow]();
            when(targetTable != null)
            {
                rows.AddRange(targetTable.Rows);
            }

            rows;
        }

        public GetTable[TTable](this heap : ITablesHeap) : TTable
            where TTable : IMetadataTable, class
        {
            mutable result : TTable = null;

            def tableCount = heap.Tables.Count();
            def tables = heap.Tables.ToArray();
            for(mutable i = 0; i < tableCount; i++)
            {
                def table = tables[i];
                when(table is TTable)
                {
                    result = table :> TTable;
                }
            }
            result;
        }
    }
}
