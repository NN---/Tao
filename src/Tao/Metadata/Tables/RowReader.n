using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using Tao.Interfaces;

using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

namespace Tao.Metadata.Tables
{
  public class RowReader[TRow] : IRowReader[TRow]
  {
    private _reader : BinaryReader;
    private _row : TRow;
    private _heapSizes : byte;
    private _rowCounts : IDictionary[TableId, uint];
    private _indexes : IDictionary.[HeapSizeFlags, ISet.[uint]] =  Dictionary();
    
    public this(heapSizes : byte, rowCounts : IDictionary[TableId, uint], [NotNull] reader : BinaryReader, row : TRow, indexes: IDictionary.[HeapSizeFlags, ISet.[uint]])
    {
      _reader = reader;
      _row = row;
      _heapSizes = heapSizes;
      _rowCounts = rowCounts;
      _indexes = indexes;
    }    
    public ReadStringIndex([NotNull] setValue : TRow * Index -> void) : void
    {
      ReadIndex(HeapSizeFlags.RequiresWideStringIndex, _heapSizes, setValue);
    }  
    public ReadGuidIndex([NotNull] setValue : TRow * Index -> void) : void
    {
      ReadIndex(HeapSizeFlags.RequiresWideGuidIndex, _heapSizes, setValue);
    }
    public ReadBlobIndex([NotNull] setValue : TRow * Index -> void) : void
    {
      ReadIndex(HeapSizeFlags.RequiresWideBlobIndex, _heapSizes, setValue);
    }
    public ReadDword([NotNull] setValue : TRow * uint -> void) : void
    {
      def readDword = CreateReader(_row, r => r.ReadUInt32(), _);
      readDword(setValue);
    }  
    public ReadWord([NotNull] setValue : TRow * ushort -> void) : void
    {
      def readWord = CreateReader(_row, r => r.ReadUInt16(), _);
      readWord(setValue);
    }  
    public ReadByte([NotNull] setValue : TRow * byte -> void) : void
    {
      def readByte = CreateReader(_row, r => r.ReadByte(), _);
      readByte(setValue);
    }
    public ReadIndex(tableId : TableId, [NotNull] setValue : TRow * Index -> void) : void
    {
        ReadIndex(() => _rowCounts.RequiresWideIndices(tableId), setValue);
    }
    public ReadIndex(tokenType : CodedTokenType, [NotNull] setValue : TRow * Index -> void) : void
    {
        ReadIndex(() => _rowCounts.RequiresWideIndices(tokenType), setValue);
    }
    private ReadIndex(shouldUseWideIndex : void -> bool, [NotNull] setValue : TRow * Index -> void) : void
    {
        def setWord(row : TRow, value : ushort) : void
        {
            setValue(row, Index.Narrow(value));           
        };
        
        def setDword(row : TRow, value : uint) : void
        {
            setValue(row, Index.Wide(value));
        };
        
        if (shouldUseWideIndex())
        {
            ReadDword(setDword);
        }
        else
        {
            ReadWord(setWord);
        }        
    }
    private CreateReader[TValue](row : TRow, [NotNull] getValue : BinaryReader -> TValue, [NotNull]  setValue : TRow * TValue -> void) : void
    {
      def value = getValue(_reader);
      setValue(row, value);
    };
    private ReadIndex(targetFlag : HeapSizeFlags, heapSizes : byte, [NotNull] setValue : TRow * Index -> void) : void
    {
      def flag = targetFlag :> byte;
      def shouldReadDword = (heapSizes & flag) != 0;
      
      def captureIndexValue(row : TRow, value : Index) : void
      {
          when(!_indexes.ContainsKey(targetFlag))
          {
              _indexes[targetFlag] = HashSet();
          }
          
          // Record all the heap, string, guid, and blob indices that are
          // used by all rows
          def token = value.ToUInt32();
          def index = _indexes[targetFlag];
          when(!index.Contains(token))
          {
              _ = index.Add(token);
          }
          
          setValue(row, value);
      }
      
      ReadIndex(() => shouldReadDword, captureIndexValue);
    };
  }
}
