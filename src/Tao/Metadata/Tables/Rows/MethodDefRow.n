using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

using Tao;
using Tao.Interfaces;
using Tao.Metadata.Signatures;

namespace Tao.Metadata.Tables.Rows
{
    public class MethodDefRow : ICustomAttributeTypeRow, IHasCustomAttributeRow, IMemberRefParentRow
    {
        public Rva : uint { get; set; }
        public ImplFlags : ushort {get; set; }
        public Flags : ushort { get; set; }
        public Name : IIndex { get; set; }
        public Signature : IIndex { get; set; }
        public ParamList : IIndex { get; set; }
        public RowIndex : uint { get; set; }
        public TableId : TableId 
        { 
            get
            {
                TableId.MethodDef;
            }
        }
        public GetMethodSignature([NotNull] blobStream : Stream) : IMethodSignature
        requires Signature != null otherwise throw InvalidOperationException("You can't retrieve a method signature if the Signature property itself is null")        
        {
            _ = blobStream.Seek(0, SeekOrigin.Begin);
            def blobIndex = Signature.ToUInt32();
            def reader = BlobReader();

            def blob = reader.Read(blobIndex, blobStream);
            _ = blob.Seek(0, SeekOrigin.Begin);

            def signatureReader = MethodDefSignatureReader();

            signatureReader.Read(blob);
        }
        
        public ReadMethodBodyFrom([NotNull]image : IImage) : IMethodBody
        {
            def methodRva = Rva;
            def methodStream = image.GetDataAt(methodRva);

            def bodyReader = SimpleMethodBodyReader(); 
            def body = bodyReader.Read(methodStream);  
            body;
        }
    }
}
