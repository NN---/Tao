using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

using Tao.Metadata.Signatures;

namespace Tao.Metadata.Tables.Rows
{
    public class CustomAttributeRow : IRow
    {
        public Parent : IIndex { get; set; }
        public Type : IIndex { get; set; }
        public Value : IIndex { get; set; }

        public RowIndex : uint { get; set; }
        public TableId : TableId 
        { 
            get
            {
                TableId.CustomAttribute;
            }
        }
        
        public GetParameters([NotNull] tablesHeap : ITablesHeap, [NotNull] blobStream : Stream) : IEnumerable[Param]
        {
            def typeRow = GetTypeRowFrom(tablesHeap);
            def methodSignature = typeRow.GetMethodSignature(blobStream);

            def parameters = methodSignature.Parameters;
            parameters;
        }

        public GetTypeRowReference() : RowReference
            requires Type != null otherwise throw InvalidOperationException("You can't get a pointer to a Type row if the Type index property is null")
        {
            Type.ToRowRef(CodedTokenType.CustomAttributeType);
        }

        public GetParentRowReference() : RowReference
            requires Parent != null otherwise throw InvalidOperationException("You can't get a pointer to a parent row if the Parent index property is null")
        {
            Parent.ToRowRef(CodedTokenType.HasCustomAttribute);
        }

        public GetCustomAttributeBlobFrom(blobStream : Stream) : array[byte]
            requires Value != null otherwise throw InvalidOperationException("You can't a custom attribute blob if the Value index property is null")
        {
            Value.ToBlob(blobStream);
        }
        public GetTypeRowFrom([NotNull] heap : ITablesHeap) : ICustomAttributeTypeRow
            requires Type != null otherwise throw InvalidOperationException("You can't get a Type row if the Type index property is null")
        {                    
            def codedTokenType = CodedTokenType.CustomAttributeType;
            def rowRef = Type.ToRowRef(codedTokenType);

            mutable result : ICustomAttributeTypeRow = null;
            when(rowRef.TableId != TableId.MemberRef && rowRef.TableId != TableId.MethodDef)
            {
                throw BadImageFormatException("You can't retrieve a Type row unless the index is pointing to either the MemberRef or MethodDef table");
            }

            // Automatically determine the correct table to use based on the current
            // type index
            when(rowRef.TableId == TableId.MemberRef)
            {
                def table = heap.Tables.Where(t => t is MemberRefTable).First() :> MemberRefTable;                
                result = GetRowFrom.[MemberRefRow, ICustomAttributeTypeRow](codedTokenType, get_Type, table);
            }

            when(rowRef.TableId == TableId.MethodDef)
            {
                def table = heap.Tables.Where(t => t is MethodDefTable).First() :> MethodDefTable;                
                result = GetRowFrom.[MethodDefRow, ICustomAttributeTypeRow](codedTokenType, get_Type, table);
            }

            result;
        }

        public GetTypeRowFrom[TRow]([NotNull] table : IMetadataTable[TRow]) : ICustomAttributeTypeRow
            where TRow : ICustomAttributeTypeRow
            requires Type != null otherwise throw InvalidOperationException("You can't get a Type row if the Type index property is null")
        {            
            def codedTokenType = CodedTokenType.CustomAttributeType;
            GetRowFrom.[TRow, ICustomAttributeTypeRow](codedTokenType, get_Type, table);
        }

        public GetParentRowFrom[TRow]([NotNull] table : IMetadataTable[TRow]) : IHasCustomAttributeRow
            where TRow : IHasCustomAttributeRow
        {
            def codedTokenType = CodedTokenType.HasCustomAttribute;
            GetRowFrom.[TRow, IHasCustomAttributeRow](codedTokenType, get_Parent, table);
        }

        private GetRowFrom[TRow, TRowBase](codedTokenType : CodedTokenType, [NotNull] getIndex : void -> IIndex, [NotNull] table : IMetadataTable[TRow]) : TRowBase            
            where TRow : TRowBase    
            where TRowBase : class
        {
            def rowRef = getIndex().ToRowRef(codedTokenType);
            def targetRow = rowRef.Row;

            def info = table :> IMetadataTableInfo;
            def targetTableId = info.TableId;
            def actualTableId = rowRef.TableId;

            // Ensure that the actual table is in the list of supported tables
            def tableMap = CodedTokenTableMap();
            when(!tableMap.ContainsKey(codedTokenType) || !tableMap[codedTokenType].Contains(actualTableId))
            {
                throw InvalidTableException(string.Format("The Coded Token Type '{0}' does not have any support for using the '{1}' table", 
                    codedTokenType, actualTableId));                
            }

            // Ensure that the actual table matches the target table
            when(actualTableId != targetTableId)
            {
                throw InvalidTableException(string.Format("The given table should be from the '{0}' table, not the '{1} table", 
                    targetTableId.ToString(), actualTableId.ToString()));
            }

            mutable result : TRowBase = null;
            when(targetRow > 0)
            {
                def actualRow = targetRow - 1;
                result = table.Rows[actualRow :> int];
            }
            result;
        }
    }
}
