using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

namespace Tao.Metadata.Tables.Rows
{  
    public class TypeRefRow : IHasCustomAttributeRow, IMemberRefParentRow, IResolutionScope, ITypeRow
    {
        public ResolutionScope : IIndex { get; set; }
        public TypeName : IIndex  
            implements IResolutionScope.Name
        { 
            get; set; 
        }

        public TypeNamespace : IIndex { get; set; }

        public GetAssemblyRow([NotNull] heap : ITablesHeap) : IAssemblyRow
            requires this.ResolutionScope != null otherwise throw InvalidOperationException("You can only resolve the assembly row if you have a valid (non-null) ResolutionScope")
            ensures value != null
        {
            def scopeRowRef = ResolutionScope.ToRowRef(CodedTokenType.ResolutionScope);
            def tableId = scopeRowRef.TableId;

            mutable result : IAssemblyRow = null;

            // Module and ModuleRef ResolutionScopes refer to the same parent assembly
            when(tableId == TableId.Module || tableId == TableId.ModuleRef)
            {
                result = heap.GetRow.[AssemblyRow](1);    
            }
            
            // Trace the TypeRefRow all the way back to its parent assembly
            when(tableId == TableId.TypeRef)
            {
                def typeRefRow = heap.GetRow.[TypeRefRow](scopeRowRef.Row);
                result = typeRefRow.GetAssemblyRow(heap);
            }
            
            when(tableId == TableId.AssemblyRef)
            {
                result = heap.GetRow.[AssemblyRefRow](scopeRowRef.Row);
            }
            
            result;
        }
        
        public GetPartialQualifiedName([NotNull] stringHeap : Stream, [NotNull] tablesHeap : ITablesHeap) : string
        {
            def typeName = TypeName.ToString(stringHeap);
            def nameSpace = TypeNamespace.ToString(stringHeap);
            
            def assemblyRow = GetAssemblyRow(tablesHeap);            
            def assemblyName = assemblyRow.Name.ToString(stringHeap);                                                 
            
            def format = "{0}.{1}, {2}";
            def qualifiedName = string.Format(format, nameSpace, typeName, assemblyName);
            qualifiedName;
        }
    }
}
