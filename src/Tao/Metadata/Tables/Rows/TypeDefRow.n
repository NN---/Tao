using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using Tao;
using Tao.Interfaces;

using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

namespace Tao.Metadata.Tables.Rows
{  
    public class TypeDefRow : IHasCustomAttributeRow, IMemberRefParentRow, ITypeRow
    {
        public Flags : uint { get; set; }
        public TypeName : IIndex { get; set; }
        public TypeNamespace : IIndex { get; set; }
        public Extends : IIndex { get; set; }
        public FieldList : IIndex { get; set; }
        public MethodList : IIndex { get; set; }
        public RowIndex : uint { get; set; }
        public TableId : TableId 
        { 
            get
            {
                TableId.TypeDef;
            }
        }
        public GetAssemblyRow([NotNull] heap : ITablesHeap) : IAssemblyRow
            ensures value != null
        {
            // NOTE: This method assumes that the given heap is the same heap that contains the current TypeDefRow
            def assemblyRow = heap.GetRow.[AssemblyRow](1);          
            assemblyRow;
        }
        public GetPartialQualifiedName([NotNull] stringHeap : Stream, [NotNull] tablesHeap : ITablesHeap) : string
        {
            def typeName = TypeName.ToString(stringHeap);
            def nameSpace = TypeNamespace.ToString(stringHeap);

            def assemblyRow = GetAssemblyRow(tablesHeap);            
            def assemblyName = assemblyRow.Name.ToString(stringHeap);                                                 

            def format = "{0}.{1}, {2}";
            def qualifiedName = string.Format(format, nameSpace, typeName, assemblyName);
            qualifiedName;
        }
        public GetInterfaceImplRows([NotNull] tablesHeap : ITablesHeap) : IEnumerable.[InterfaceImplRow]
        {
            def interfaceRows = tablesHeap.GetRows.[InterfaceImplRow]();
            foreach(row in interfaceRows)
            {
                when(row.Class != null)
                {
                    def typeRowIndex = row.Class.ToUInt32();
                    when(typeRowIndex == RowIndex)
                    {
                        yield row;
                    }
                }
            }
        }
        public GetMethodDefRows([NotNull] tablesHeap : ITablesHeap) : IEnumerable.[MethodDefRow]
            requires RowIndex > 0 otherwise throw InvalidOperationException("The row index for any given type row should never be zero")
        {
            GetRelatedRows(this, tablesHeap, row => row.MethodList.ToUInt32());
        }
        public GetFieldRows([NotNull] tablesHeap : ITablesHeap) : IEnumerable.[FieldRow]
            requires RowIndex > 0 otherwise throw InvalidOperationException("The row index for any given type row should never be zero")
        {
            GetRelatedRows(this, tablesHeap, row => row.FieldList.ToUInt32());
        }        
        private GetRelatedRows[TSourceRow, TTargetRow](source : TSourceRow, [NotNull] tablesHeap : ITablesHeap, getRowIndex : TSourceRow -> uint) : IEnumerable[TTargetRow]
        {
            def sourceRows = tablesHeap.GetRows.[TSourceRow]().ToArray();
            def targetRows = tablesHeap.GetRows.[TTargetRow]().ToArray();

            def sourceRowCount = sourceRows.Length;
            def currentIndex = (RowIndex - 1) :> int;
            def lastIndex = sourceRowCount - 1;

            def startingTargetRowIndex = getRowIndex(source);            
            mutable lastTargetRowIndex = startingTargetRowIndex;
            when(currentIndex < lastIndex)
            {
                mutable nextTypeRow : TSourceRow = sourceRows[currentIndex + 1];
                lastTargetRowIndex = getRowIndex(nextTypeRow);
            }

            def results = List.[TTargetRow]();
            def rowsToExtract = lastTargetRowIndex - startingTargetRowIndex;
            def targetRowCount = targetRows.Length :> uint;
            when(startingTargetRowIndex <= targetRowCount && rowsToExtract > 0)
            {
                for(mutable i = startingTargetRowIndex; i < lastTargetRowIndex; i++)
                {
                    // Shift the index by one since table pointers start at index 1
                    def actualIndex = (i -1) :> int;
                    def currentRow = targetRows[actualIndex];
                    results.Add(currentRow);
                }
            }

            results;
        }
    }
}
