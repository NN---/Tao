using Nemerle;
using Nemerle.Assertions;
using Nemerle.Extensions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Tao
{
  public static class RowCountExtensions
  {
    private static _entries : IDictionary[CodedTokenType, IEnumerable.[TableId]];
    static this()
    {
      _entries = CodedTokenTableMap();
                   
    }
    public RequiresWideIndices([NotNull] this rowCounts : IDictionary[TableId, uint], tokenType : CodedTokenType) : bool
        requires _entries.ContainsKey(tokenType)
    {
      def tables = _entries[tokenType];
      mutable result = false;
      
      foreach(tableId in tables)
      {
        mutable rowCount : uint = 0;          
        when(rowCounts.ContainsKey(tableId))
        {
          rowCount = rowCounts[tableId];
        }
          
        def requiresWideIndex = rowCount >= (ushort.MaxValue :> uint);
        result |= requiresWideIndex;
      }
      
      result;
    }
    public RequiresWideIndices([NotNull] this rowCounts : IDictionary[TableId, uint], tableId : TableId) : bool
    {
      mutable result = false;
      
      when(rowCounts.ContainsKey(tableId))
      {
        result = rowCounts[tableId] >= (ushort.MaxValue :> uint);
      }
      
      result;
    }
  }
  
}
