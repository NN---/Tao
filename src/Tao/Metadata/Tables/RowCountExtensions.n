using Nemerle;
using Nemerle.Assertions;
using Nemerle.Extensions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Tao
{
  public static class RowCountExtensions
  {
    private static _entries : IDictionary.[CodedTokenType, IEnumerable.[TableId]];
    static this()
    {
      _entries = Dictionary.[CodedTokenType, IEnumerable[TableId]]()<-
                   [
                     (CodedTokenType.TypeDefOrTypeRef, array[TableId.TypeDef, TableId.TypeRef, TableId.TypeSpec]),
                     (CodedTokenType.HasConstant, array[TableId.Field, TableId.Param, TableId.Property]),
                     (CodedTokenType.HasCustomAttribute, 
                     array[
                        TableId.MethodDef, 
                        TableId.Field, 
                        TableId.TypeRef,
                        TableId.TypeDef,
                        TableId.Param,
                        TableId.InterfaceImpl,
                        TableId.MemberRef,
                        TableId.Module,
                        TableId.DeclSecurity,
                        TableId.Property,
                        TableId.Event,
                        TableId.StandAloneSig,
                        TableId.ModuleRef,
                        TableId.TypeSpec,
                        TableId.Assembly,
                        TableId.AssemblyRef,
                        TableId.File,
                        TableId.ExportedType,
                        TableId.ManifestResource
                        ]),
                     (CodedTokenType.HasFieldMarshall, array[TableId.Field, TableId.Param]),
                     (CodedTokenType.HasDeclSecurity, array[TableId.TypeDef, TableId.MethodDef, TableId.Assembly]),
                     (CodedTokenType.MemberRefParent, array[TableId.TypeDef, TableId.TypeRef, TableId.ModuleRef, TableId.MethodDef, TableId.TypeSpec]),
                     (CodedTokenType.HasSemantics, array[TableId.Event, TableId.Property]),
                     (CodedTokenType.MethodDefOrRef, array[TableId.MethodDef, TableId.MemberRef]),
                     (CodedTokenType.MemberForwarded, array[TableId.Field, TableId.MethodDef]),
                     (CodedTokenType.Implementation, array[TableId.File, TableId.AssemblyRef, TableId.ExportedType]),
                     (CodedTokenType.CustomAttributeType, array[TableId.MethodDef, TableId.MemberRef]),
                     (CodedTokenType.ResolutionScope, array[TableId.Module, TableId.ModuleRef, TableId.AssemblyRef, TableId.TypeRef]),
                     (CodedTokenType.TypeOrMethodDef, array[TableId.TypeDef, TableId.MethodDef])
                   ];
                   
    }
    public RequiresWideIndices([NotNull] this rowCounts : IDictionary[TableId, uint], tokenType : CodedTokenType) : bool
        requires _entries.ContainsKey(tokenType)
    {
      def tables = _entries[tokenType];
      mutable result = false;
      
      foreach(tableId in tables)
      {
        mutable rowCount : uint = 0;          
        when(rowCounts.ContainsKey(tableId))
        {
          rowCount = rowCounts[tableId];
        }
          
        def requiresWideIndex = rowCount >= (ushort.MaxValue :> uint);
        result |= requiresWideIndex;
      }
      
      result;
    }
    public RequiresWideIndices([NotNull] this rowCounts : IDictionary[TableId, uint], tableId : TableId) : bool
    {
      mutable result = false;
      
      when(rowCounts.ContainsKey(tableId))
      {
        result = rowCounts[tableId] >= (ushort.MaxValue :> uint);
      }
      
      result;
    }
  }
  
}
