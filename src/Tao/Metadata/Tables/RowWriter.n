using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Imperative;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

namespace Tao.Metadata.Tables
{
    public class RowWriter[TRow] : IRowWriter[TRow]
    {
        private _heapSizeFlags : ISet[HeapSizeFlags];
        private _rowCounts : IDictionary[TableId, uint];
        private _writer : BinaryWriter;

        public this(heapSizeFlags : IEnumerable[HeapSizeFlags], rowCounts : IDictionary.[TableId, uint],
            writer : BinaryWriter)
        {
            _heapSizeFlags = HashSet(heapSizeFlags);
            _rowCounts     = rowCounts;
            _writer        = writer;
        }
        public WriteStringIndex(value : void -> IIndex) : void
        {
            WriteIndex(HeapSizeFlags.RequiresWideStringIndex, value);
        }
        public WriteGuidIndex(value : void -> IIndex) : void
        {
            WriteIndex(HeapSizeFlags.RequiresWideGuidIndex, value);
        }
        public WriteBlobIndex(value : void -> IIndex) : void
        {
            WriteIndex(HeapSizeFlags.RequiresWideBlobIndex, value);
        }
        public WriteDword(value : uint) : void
        {
            _writer.Write(value : uint);
        }
        public WriteWord(value : ushort) : void
        {
            _writer.Write(value : ushort);
        }
        public WriteByte(value : byte) : void
        {
            _writer.Write(value : byte);
        }    
        public WriteIndex(tableId : TableId, value : void -> IIndex) : void
            requires (_rowCounts.RequiresWideIndices(tableId) && value() is Index.Wide) ||
                (!_rowCounts.RequiresWideIndices(tableId) && value() is Index.Narrow)
                && value() != null
        {
            def useWideIndex = _rowCounts.RequiresWideIndices(tableId);
            def index = value();
            WriteIndexValue(useWideIndex, index);
        }
        
        public WriteIndex(tokenType : CodedTokenType, value : void -> IIndex) : void
            requires (_rowCounts.RequiresWideIndices(tokenType) && value() is Index.Wide) ||
                (!_rowCounts.RequiresWideIndices(tokenType) && value() is Index.Narrow)
                && value() != null
        {
            def useWideIndex = _rowCounts.RequiresWideIndices(tokenType);
            def index = value();
            WriteIndexValue(useWideIndex, index);
        }
        
        private WriteIndex(targetFlag : HeapSizeFlags, value : void -> IIndex) : void
            requires (_heapSizeFlags.Contains(targetFlag) && value() is Index.Wide) ||
            (!_heapSizeFlags.Contains(targetFlag) && value() is Index.Narrow) && value() != null
        {
            def index = value();
            def useWideIndex = _heapSizeFlags.Contains(targetFlag);
            WriteIndexValue(useWideIndex, index);
        }
        
        private WriteIndexValue(useWideIndex : bool, index : IIndex) : void
        {
            if (useWideIndex)
            {
                _writer.Write(index.ToUInt32());
            }
            else
            {
                _writer.Write(index.ToUInt16());
            }
        }
    }
}
