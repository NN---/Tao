using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Extensions;
using Nemerle.Text;
using Nemerle.Utility;

using Tao.Interfaces;
using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

namespace Tao
{
    public class AggregateTable : IMetadataTable
    {
        private _tables : IDictionary[TableId, IMetadataTable] ;
        private _tableWriter : ITableWriter;
        private _tableReader : ITableReader;

        public this()
        {
            this(DefaultMetadataTableSet(), TableReader(), TableWriter());
        }

        public this(tableReader : ITableReader, tableWriter : ITableWriter)
        {
            this(DefaultMetadataTableSet(), tableReader, tableWriter);
        }

        public this(tables : ISet[IMetadataTable])
        {
            this(tables, TableReader(), TableWriter());
        }

        public this(tables : ISet[IMetadataTable], tableReader : ITableReader, tableWriter : ITableWriter)
        {
            _tableReader = tableReader;
            _tableWriter = tableWriter;      
            _tables = Dictionary();
            foreach(table in tables)
            {
                def tableId = table.GetHashCode() :> TableId;
                _tables[tableId] = table;
            }
        }

        public Read(heapSizes : byte, [NotNull] rowCounts : IDictionary[TableId, uint], 
        sortedTables : IEnumerable[TableId], [NotNull] indexes : IDictionary.[HeapSizeFlags, ISet.[uint]], [NotNull] inputStream : Stream) : void
        {   
            // Check for any unsupported tables
            foreach(tableId in rowCounts.Keys)
            {
                when (rowCounts[tableId] > 0 && !_tables.ContainsKey(tableId))
                {
                    throw NotSupportedException(string.Format("Reads for the metadata table '{0}' are currently not supported", tableId));
                }
            }

            foreach(tableId in _tables.Keys)
            {
                def table = _tables[tableId];
                _tableReader.Read(table, heapSizes, rowCounts, sortedTables, indexes, inputStream);
            }
        }
        public Write(heapSizeFlags : IEnumerable[HeapSizeFlags], rowCounts : IDictionary.[TableId, uint], 
        outputStream : Stream) : void
        {
            // Check for any unsupported tables
            foreach(tableId in rowCounts.Keys)
            {
                when (rowCounts[tableId] > 0 && !_tables.ContainsKey(tableId))
                {
                    throw NotSupportedException(string.Format("Writes for the metadata table '{0}' are currently not supported", tableId));
                }
            }

            foreach(tableId in _tables.Keys)
            {
                def table = _tables[tableId];                
                _tableWriter.Write(table, heapSizeFlags, rowCounts, outputStream);
            }
        }
        public Tables : IEnumerable[IMetadataTable]
        {
            get
            {
                _tables.Values;
            }
        }
    }
}
