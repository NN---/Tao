using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Extensions;
using Nemerle.Text;
using Nemerle.Utility;

using Tao.Interfaces;
using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

namespace Tao
{
  public class AggregateTable : IMetadataTable
  {
    private _tables : IDictionary.[TableId, IMetadataTable] ;
    public this()
    {
      this(DefaultMetadataTableSet());
    }
      
    public this(tables : ISet.[IMetadataTable])
    {
      _tables = Dictionary.[TableId, IMetadataTable]();
      foreach(table in tables)
      {
        def tableId = table.GetHashCode() :> TableId;
        _tables[tableId] = table;
      }
    }
      
    public Read(heapSizes : byte, [NotNull] rowCounts : IDictionary.[TableId, uint], 
        sortedTables : IEnumerable.[TableId], [NotNull] inputStream : Stream) : void
    {   
      // Check for any unsupported tables
      foreach(tableId in rowCounts.Keys)
      {
        when (rowCounts[tableId] > 0 && !_tables.ContainsKey(tableId))
        {
          throw NotSupportedException(string.Format("Reads for the metadata table '{0}' are currently not supported", tableId));
        }
      }
      
      foreach(table in _tables.Values)
      {
        table.Read(heapSizes, rowCounts, sortedTables, inputStream);
      }
    }
    public Write(heapSizeFlags : IEnumerable.[HeapSizeFlags], rowCounts : IDictionary.[TableId, uint], 
        outputStream : Stream) : void
    {
      // Check for any unsupported tables
      foreach(tableId in rowCounts.Keys)
      {
        when (rowCounts[tableId] > 0 && !_tables.ContainsKey(tableId))
        {
          throw NotSupportedException(string.Format("Writes for the metadata table '{0}' are currently not supported", tableId));
        }
      }
      
      foreach(table in _tables.Values)
      {
        table.Write(heapSizeFlags, rowCounts, outputStream);
      }
    }
    public Tables : IEnumerable.[IMetadataTable]
    {
      get
      {
        _tables.Values;
      }
    }
  }
}
