using Nemerle;
using Nemerle.Assertions;
using Nemerle.Extensions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using Tao;
using Tao.Interfaces;

using System;
using System.Collections.Generic;
using System.Linq;
using Tao.Metadata.Tables.Rows;
namespace Tao.Metadata.Tables.Schemas.Readers
{
    public class TypeDefSchemaReader : ISchemaReader[TypeDefRow]
    {
        public ReadRowInto([NotNull] rowCounts : IDictionary[TableId, uint], 
    _sortedTables : IEnumerable[TableId], [NotNull] rowReader : IRowReader[TypeDefRow]) : void
        {
            // Read type type flags       
            rowReader.ReadDword(r => r.set_Flags);

            // Read the TypeName
            //rowReader.ReadStringIndex((row, value) => row.TypeName = value);
            rowReader.ReadStringIndex(r => r.set_TypeName);

            // Read the TypeNamespace
            rowReader.ReadStringIndex(r => r.set_TypeNamespace);

            // Read the Extends column
            rowReader.ReadIndex(CodedTokenType.TypeDefOrTypeRef, r => r.set_Extends : (IIndex -> void));

            // Read the FieldList column
            rowReader.ReadIndex(TableId.Field, r => r.set_FieldList : (IIndex -> void));

            // Read the MethodList column      
            rowReader.ReadIndex(TableId.MethodDef, r => r.set_MethodList : (IIndex -> void));
        }
    }
}
