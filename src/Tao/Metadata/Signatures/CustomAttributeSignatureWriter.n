using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Tao.Metadata;
using Tao.Metadata.Signatures;
namespace Tao.Metadata.Tables.Rows
{
    public class CustomAttributeSignatureWriter
    {
        public Write([NotNull] signature : CustomAttributeSignature, [NotNull] parameters : IEnumerable.[Param], [NotNull] outputStream : Stream,
            [NotNull] stringHeap : Stream, [NotNull] tablesHeap : ITablesHeap ) : void
        {
            def prolog : ushort = 0x0001;
            def writer = BinaryWriter(outputStream);
            writer.Write(prolog);

            def writerMap = Dictionary.[ElementType, object-> void]();
            writerMap[ElementType.Boolean] = value => writer.Write(value :> bool);
            writerMap[ElementType.Char] = value => WriteChar(writer, value :> char);            

            writerMap[ElementType.U1] = value => writer.Write(value :> byte);
            writerMap[ElementType.U2] = value => writer.Write(value :> ushort);
            writerMap[ElementType.U4] = value => writer.Write(value :> uint);
            writerMap[ElementType.U8] = value => writer.Write(value :> ulong);

            writerMap[ElementType.I1] = value => writer.Write(value :> sbyte);
            writerMap[ElementType.I2] = value => writer.Write(value :> short);
            writerMap[ElementType.I4] = value => writer.Write(value :> int);
            writerMap[ElementType.I8] = value => writer.Write(value :> long);

            writerMap[ElementType.R4] = value => writer.Write(value :> float);
            writerMap[ElementType.R8] = value => writer.Write(value :> double);

            writerMap[ElementType.String] = value => WriteSerString(writer, value :> string);

            def write(elementType : ElementType, value : object)
            {
                writerMap[elementType](value);
            };

            def parameterCount = parameters.Count();
            def currentParameters = parameters.ToArray();
            def fixedArguments = signature.FixedArguments;
            for(mutable i = 0; i < parameterCount; i++)
            {
                def param = currentParameters[i];
                def paramType = param.Type;
                def elementType = paramType.ElementType;

                when(!param.IsSystemType(stringHeap, tablesHeap) && !writerMap.ContainsKey(elementType))
                {
                    throw NotSupportedException("Element Type Not Supported: " + elementType.ToString());
                }

                def argument = fixedArguments[i];
                def value = argument.Value;
                write(elementType, value);
            }

            // Write the number of named arguments
            def namedArgumentCount = signature.NamedArguments.Count();
            writer.Write(namedArgumentCount :> ushort);                        
        }
        private WriteChar([NotNull] writer : BinaryWriter, value : char) : void
        {
            def bytes = Encoding.Unicode.GetBytes(array[value]);
            writer.Write(bytes)                                
        }
        private WriteSerString([NotNull] writer : BinaryWriter, value : string) : void            
            requires value == null || value.Length < 0xFE otherwise throw ArgumentException("value", "The string must be shorter than 255 characters")
        {
            if(string.IsNullOrEmpty(value))
            {
                WriteNullOrEmptySerString(writer, value);
            }
            else
            {
                WriteSerStringValue(writer, value);
            }            
        }
        
        private WriteSerStringValue([NotNull] writer : BinaryWriter, value : string) : void
        {
            // Write the length of the string
            def stream = writer.BaseStream;
            def integerWriter = CompressedIntegerWriter();
            integerWriter.WriteInteger(value.Length :> uint, stream);

            def bytes = Encoding.UTF8.GetBytes(value);
            writer.Write(bytes);
        }
        
        private WriteNullOrEmptySerString([NotNull] writer : BinaryWriter, value : string) : void
        {            
            if(value == null)
            {
                writer.Write(0xFF : byte);
            }
            else
            {
                writer.Write(0x00 : byte);
            }
        }
    }
}
