using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

using Tao.Metadata.Tables;
using Tao.Metadata.Tables.Rows;

namespace Tao.Metadata.Signatures
{
    public class TypeDefOrRefEncodedSignature : TypeSignature 
    {
        public this()
        {
            ElementType = ElementType.Class;
        }
        public TableId : TableId { get; set; }
        public Row : uint { get; set; }

        public GetTypeRow([NotNull] heap : ITablesHeap) : ITypeRow
            requires (this.TableId == TableId.TypeRef || this.TableId == TableId.TypeDef) 
            otherwise throw ArgumentException("The TableId must be either a TypeDef or a TypeRef for TypeDefOrRefEncoded signatures")
            requires Row > 0 otherwise throw ArgumentException("Invalid Row: $Row")
        ensures value != null
        {
            def tableId = TableId;
            def rowIndex = Row;
            mutable result : ITypeRow = null;
            match(tableId)
            {
                |TableId.TypeRef => 
                {
                        result = heap.GetRow.[TypeRefRow](rowIndex);
                }
                |TableId.TypeDef => 
                {
                        result = heap.GetRow.[TypeDefRow](rowIndex);
                };
                |_=> throw NotSupportedException(string.Format("TableId not supported: {0}", this.TableId));
            }   

            result;          
        }

        public IsSystemType([NotNull] stringHeap : Stream, [NotNull] tablesHeap : ITablesHeap) : bool      
        {
            mutable result : bool = false;

            def signature = this;

            def typeRow = signature.GetTypeRow(tablesHeap);                                
            def assemblyRow = typeRow.GetAssemblyRow(tablesHeap);

            def typeName = typeRow.TypeName.ToString(stringHeap);
            def typeNamespace = typeRow.TypeNamespace.ToString(stringHeap);
            def assemblyName = assemblyRow.Name.ToString(stringHeap);                                

            match((typeName, typeNamespace, assemblyName))
            {
                | ("Type", "System", "mscorlib") => result = true;
                |_=> {};
            }

            result;
        }

        protected override Read(elementType : ElementType, [NotNull] stream : Stream) : void
        requires elementType == ElementType.Class
        {
            def decoder = CodedTokenDecoder();

            def compressedIntegerReader = CompressedIntegerReader();
            def token = compressedIntegerReader.ReadInteger(stream) :> int;
            def result = decoder.Decode(CodedTokenType.TypeDefOrTypeRef, token);

            Row = result[1] :> uint;

            // Decode the TableId using the given tag
            def tag : byte = result[0];
            def tableMap = CodedTokenTableMap();
            def tables = tableMap[CodedTokenType.TypeDefOrTypeRef].ToArray();

            TableId = tables[tag :> int];
        }

        protected override Write(elementType : ElementType, [NotNull] stream : Stream) : void
        requires elementType == ElementType.Class
        {
            def encoder = CodedTokenEncoder();          
            def token = encoder.Encode(CodedTokenType.TypeDefOrTypeRef, TableId, Row);
            def writer = BinaryWriter(stream);
            writer.Write(token);
        }

        protected override SupportsElement(elementType : ElementType) : bool
        {
            elementType == ElementType.Class;
        }
    }
}
