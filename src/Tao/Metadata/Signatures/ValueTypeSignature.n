using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

namespace Tao
{
    public class ValueTypeSignature : TypeSignature
    {      
        public this()
        {
            ElementType = ElementType.ValueType;
        }
        
        public TableId : TableId { get; set; }
        public Row : uint { get; set; }
        protected override SupportsElement(elementType : ElementType) : bool        
        {
            elementType == ElementType.ValueType;
        }
        protected override Read(elementType : ElementType, [NotNull] stream : Stream) : void
            requires !stream.AtEnd() otherwise throw ArgumentException("stream", "You can't read a ValueTypeSignature if the stream position is already at the end of the stream")
            requires elementType == ElementType.ValueType otherwise throw ArgumentException("elementType", "Expected ElementType.ValueType")
        {
            // Read the row and tableId
            def reader = BinaryReader(stream);
            def codedToken = reader.ReadInt32();

            // Read the table reference
            def tableDecoder = TableReferenceDecoder();
            def tableReference = tableDecoder.GetTableReference(CodedTokenType.TypeDefOrTypeRef, codedToken);

            TableId = tableReference[0];
            Row = tableReference[1] :> uint;
        }
        protected override Write(elementType : ElementType, [NotNull] stream : Stream) : void
            requires elementType == ElementType.ValueType otherwise throw ArgumentException("elementType", "Expected ElementType.ValueType")
            requires TableId == TableId.TypeRef || TableId == TableId.TypeDef otherwise throw InvalidOperationException("The table this type must be pointing to should be either the TypeDef or TypeRef table")
            requires Row > 0 otherwise throw InvalidOperationException("You can't write a generic type signature that points to row 0")
        {            
            def writer = BinaryWriter(stream);
            
            // Write the row and tableId
            def encoder = CodedTokenEncoder();
            def codedToken = encoder.Encode(CodedTokenType.TypeDefOrTypeRef, TableId, Row);
            writer.Write(codedToken);
        }
    }
}
