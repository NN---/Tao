using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.IO;
using System.Collections.Generic;
using System.Text;
using System.Linq;

using Tao.Metadata.Tables;
using Tao.Metadata.Tables.Rows;

namespace Tao.Metadata.Signatures
{
    public class CustomAttributeSignatureReader
    {
        public Read([NotNull] parameters : IEnumerable.[Param],[NotNull] blobStream : Stream, [NotNull] stringHeap : Stream, [NotNull] tablesHeap : ITablesHeap) : CustomAttributeSignature
        {
            def reader = BinaryReader(blobStream);          
            def prolog = reader.ReadUInt16();
            when(prolog != 0x0001)
            {
                throw CustomAttributeSignaturePrologNotFoundException("Invalid custom attribute signature--the custom attribute signature is missing the prolog bytes!");
            }

            def signature = CustomAttributeSignature();
            def currentParameters = parameters.ToArray();
            foreach(param in currentParameters)
            {
                def value = ReadParameterValue(param, reader, stringHeap, blobStream, tablesHeap);
                def fixedArgument = CustomAttributeArgument(value);

                signature.FixedArguments.Add(fixedArgument);              
            }

            // TODO: Read the NumNamed value
            // TODO: Read the NamedArgs

            signature;
        }
        private ReadParameterValue([NotNull] param : Param, [NotNull] reader : BinaryReader, [NotNull] stringHeap : Stream, [NotNull] blobStream : Stream, [NotNull] tablesHeap : ITablesHeap) : object
            requires param.Type != null
        {
            def paramType = param.Type;
            def elementType = paramType.ElementType;

            def readerMap : Dictionary.[ElementType, void -> object] = Dictionary();
            readerMap[ElementType.I1] = reader.ReadSByte;
            readerMap[ElementType.I2] = reader.ReadInt16;
            readerMap[ElementType.I4] = reader.ReadInt32;
            readerMap[ElementType.I8] = reader.ReadInt64;
            readerMap[ElementType.U1] = reader.ReadByte;
            readerMap[ElementType.U2] = reader.ReadUInt16;
            readerMap[ElementType.U4] = reader.ReadUInt32;
            readerMap[ElementType.U8] = reader.ReadUInt64;
            readerMap[ElementType.Boolean] = reader.ReadBoolean;
            readerMap[ElementType.Char] = reader.ReadChar;
            readerMap[ElementType.R4] = reader.ReadSingle;    
            readerMap[ElementType.R8] = reader.ReadDouble;
            readerMap[ElementType.String] = () => ReadSerString(reader);
            readerMap[ElementType.Object] = () => ReadBoxedObject(reader, stringHeap, tablesHeap, readerMap);
            readerMap[ElementType.ValueType] = () => ReadValueType(reader, paramType, stringHeap, blobStream, tablesHeap);
            readerMap[ElementType.SzArray] = () => ReadArray(reader, param, stringHeap, tablesHeap, readerMap);

            when(!IsSystemType(param, stringHeap, tablesHeap) && !readerMap.ContainsKey(elementType))
            {
                throw NotSupportedException("Element Type Not Supported: " + elementType.ToString());
            }          

            if(elementType == ElementType.Class)
            {
                def typeRef = TypeReference();
                typeRef.QualifiedName = ReadSerString(reader);

                typeRef;
            }
            else
            {
                readerMap[elementType]();
            }
        }        

        private ReadArray([NotNull] reader : BinaryReader, [NotNull] param : Param, [NotNull] stringHeap : Stream, [NotNull] tablesHeap : ITablesHeap, 
            [NotNull] readerMap : Dictionary.[ElementType, void -> object]) : object
                requires param.Type != null && param.Type.GetType() == typeof(SzArraySignature)
        {
            // Read the number of elements in the array
            def arraySignature = param.Type :> SzArraySignature;
            def elementCount = reader.ReadInt32();
            def arrayType = arraySignature.ArrayType;

            def elementType = arrayType.ElementType;                                    

            def typeMap = Dictionary();
            typeMap[ElementType.Boolean] = typeof(bool);
            typeMap[ElementType.Char] = typeof(char);
            typeMap[ElementType.I1] = typeof(sbyte);
            typeMap[ElementType.I2] = typeof(short);
            typeMap[ElementType.I4] = typeof(int);
            typeMap[ElementType.I8] = typeof(long);
            typeMap[ElementType.U1] = typeof(byte);
            typeMap[ElementType.U2] = typeof(ushort);
            typeMap[ElementType.U4] = typeof(uint);
            typeMap[ElementType.U8] = typeof(ulong);
            typeMap[ElementType.R4] = typeof(float);
            typeMap[ElementType.R8] = typeof(double);
            typeMap[ElementType.String] = typeof(string);
            typeMap[ElementType.Object] = typeof(object);

            when(!typeMap.ContainsKey(elementType))
            {
                throw NotSupportedException(string.Format("The element type '{0}' is not supported when reading custom attribute array signatures", elementType));
            }

            // Get the type name for the array type
            def actualType = typeMap[elementType];

            // Create an instance of that array type and populate it with the arguments
            def items = Array.CreateInstance(actualType, elementCount);

            def readElement  = () => readerMap[elementType]();            
            for(mutable i = 0; i < elementCount; i++)
            {
                def value = readElement();
                items.SetValue(value, i);
            }

            items;
        }
        private IsSystemType([NotNull] param : Param,[NotNull] stringHeap : Stream, [NotNull] tablesHeap : ITablesHeap) : bool      
            requires param.Type != null
        {
            mutable result : bool = false;
            def type = param.Type;
            when(type.GetType() == typeof(TypeDefOrRefEncodedSignature))
            {
                def signature = type :> TypeDefOrRefEncodedSignature;
                result = signature.IsSystemType(stringHeap, tablesHeap);
            }

            result;
        }

        private ReadValueType([NotNull] reader : BinaryReader, [NotNull] paramType : ITypeSignature, [NotNull] stringHeap : Stream, [NotNull] blobHeap : Stream, [NotNull] tablesHeap : ITablesHeap) : object
        {
            def parameterType = paramType :> ValueTypeSignature;
            def signature = TypeDefOrRefEncodedSignature();

            signature.Row = parameterType.Row;
            signature.TableId = parameterType.TableId;

            def typeRow = signature.GetTypeRow(tablesHeap);
            def qualifiedName = typeRow.GetPartialQualifiedName(stringHeap, tablesHeap);

            def enumType = Type.GetType(qualifiedName, true);
            def underlyingType = Enum.GetUnderlyingType(enumType);

            def readerMap = Dictionary.[Type, void -> object]();

            readerMap[typeof(byte)] = reader.ReadByte;
            readerMap[typeof(ushort)] = reader.ReadUInt16;
            readerMap[typeof(uint)] = reader.ReadUInt32;
            readerMap[typeof(ulong)] = reader.ReadUInt64;

            when(!readerMap.ContainsKey(underlyingType))
            {
                throw NotSupportedException(string.Format("Underlying type '{0}' not supported when reading enums in custom attribute signatures", underlyingType.Name));
            }

            def enumValue = readerMap[underlyingType]();
            Enum.ToObject(enumType, enumValue);
        }

        private ReadBoxedObject([NotNull] reader : BinaryReader,  [NotNull] stringHeap : Stream, [NotNull] tablesHeap : ITablesHeap, [NotNull] readerMap : Dictionary.[ElementType, void -> object]) : object
        {
            mutable result : object = null;
            def validElements = array[
                                    ElementType.Boolean,
                                    ElementType.Char,
                                    ElementType.I1,
                                    ElementType.I2,
                                    ElementType.I4,
                                    ElementType.I8,
                                    ElementType.U1,
                                    ElementType.U2,
                                    ElementType.U4,
                                    ElementType.U8,
                                    ElementType.R4,
                                    ElementType.R8,
                                    ElementType.String
                                    ];

            // Read the element type
            def elementByte : byte = reader.ReadByte();
            when(elementByte == 0x55)
            {
                // Handle custom enums here
                def enumName = ReadSerString(reader);
                mutable enumType = Type.GetType(enumName, false);

                // If the type load fails, scan the current assembly and
                // its referenced assemblies for a possible match                
                when (enumType == null)
                {

                    def typeDefRows = tablesHeap.GetRows.[TypeDefRow]().Cast.[ITypeRow]();
                    def typeRefRows = tablesHeap.GetRows.[TypeRefRow]().Cast.[ITypeRow]();
                    def typeRows = List();

                    def isTargetType(row : ITypeRow) : bool
                    {
                        row.GetPartialQualifiedName(stringHeap, tablesHeap).StartsWith(enumName);                        
                    }

                    typeRows.AddRange(typeDefRows);
                    typeRows.AddRange(typeRefRows);

                    def targetRow = typeRows.First(isTargetType);
                    def qualifiedName = targetRow.GetPartialQualifiedName(stringHeap, tablesHeap);

                    enumType = Type.GetType(qualifiedName, true);
                }

                def underlyingType = Enum.GetUnderlyingType(enumType);
                def readers = Dictionary.[Type, void -> object]();

                readers[typeof(byte)] = reader.ReadByte;
                readers[typeof(ushort)] = reader.ReadUInt16;
                readers[typeof(uint)] = reader.ReadUInt32;
                readers[typeof(ulong)] = reader.ReadUInt64;

                def enumValue = readers[underlyingType]();
                result = Enum.ToObject(enumType, enumValue);
            }

            when(elementByte == 0x1D)
            {
                // Handle single dimensional arrays here
                throw NotImplementedException("TODO: Implement boxed single dimensional array support");
            }

            def elementType = elementByte :> ElementType;
            if(validElements.Contains(elementType))
            {
                result = readerMap[elementType]();                
            }
            else
            {
                when(elementByte != 0x55)
                    throw BadImageFormatException(string.Format("Element type '{0}' is not a supported boxed element value for custom attribute signatures", elementType));
            }
            
            result;
        }
        private ReadSerString([NotNull] reader : BinaryReader) : string
        {
            def underlyingStream = reader.BaseStream;
            def lengthByteValue = underlyingStream.PeekByte();

            mutable result : string = null;
            match(lengthByteValue)
            {
                | 0x00 => result = string.Empty;
                | 0xFF => result = null;
                |_ => 
                    {
                        def integerReader = CompressedIntegerReader();
                        def length = integerReader.ReadInteger(underlyingStream);

                        def bytes = reader.ReadBytes(length :> int);
                        result = Encoding.UTF8.GetString(bytes);
                    }
            }

            result;
        }
    }
}
