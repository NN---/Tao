using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

namespace Tao.Metadata.Signatures
{
    public class CustomAttributeSignatureReader
    {
        public Read([NotNull] parameters : IEnumerable.[Param],[NotNull] blobStream : Stream) : CustomAttributeSignature
        {
            def reader = BinaryReader(blobStream);          
            def prolog = reader.ReadUInt16();
            when(prolog != 0x0001)
            {
                throw BadImageFormatException("Invalid custom attribute signature--the custom attribute signature is missing the prolog bytes!");
            }

            def signature = CustomAttributeSignature();
            def currentParameters = parameters.ToArray();
            foreach(param in currentParameters)
            {
                def value = ReadParameterValue(param, reader);
                def fixedArgument = CustomAttributeArgument(value);

                signature.FixedArguments.Add(fixedArgument);              
            }

            // TODO: Read the NumNamed value
            // TODO: Read the NamedArgs
            
            signature;
        }
        private ReadParameterValue([NotNull] param : Param, [NotNull] reader : BinaryReader) : object
        requires param.Type != null
        {
            def paramType = param.Type;
            def elementType = paramType.ElementType;

            mutable result : object = null;
            match(elementType)
            {
                |ElementType.I4 => result = reader.ReadInt32(); 
                |ElementType.U1 => result = reader.ReadByte();
                |ElementType.U4 => result = reader.ReadUInt32();
                |ElementType.Boolean => result = reader.ReadBoolean();
                |ElementType.U8 => result = reader.ReadUInt64();
                | _=> throw NotSupportedException("Element Type Not Supported: " + elementType.ToString());
            }          

            result;
        }
    }
}
