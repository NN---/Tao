using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

namespace Tao.Metadata.Signatures
{
    public class CustomAttributeSignatureReader
    {
        public Read([NotNull] parameters : IEnumerable.[Param],[NotNull] blobStream : Stream) : CustomAttributeSignature
        {
            def reader = BinaryReader(blobStream);          
            def prolog = reader.ReadUInt16();
            when(prolog != 0x0001)
            {
                throw BadImageFormatException("Invalid custom attribute signature--the custom attribute signature is missing the prolog bytes!");
            }

            def signature = CustomAttributeSignature();
            def currentParameters = parameters.ToArray();
            foreach(param in currentParameters)
            {
                def value = ReadParameterValue(param, reader);
                def fixedArgument = CustomAttributeArgument(value);

                signature.FixedArguments.Add(fixedArgument);              
            }

            // TODO: Read the NumNamed value
            // TODO: Read the NamedArgs

            signature;
        }
        private ReadParameterValue([NotNull] param : Param, [NotNull] reader : BinaryReader) : object
        requires param.Type != null
        {
            def paramType = param.Type;
            def elementType = paramType.ElementType;
            
            def readerMap : Dictionary.[ElementType, void -> object] = Dictionary();
            readerMap[ElementType.I1] = reader.ReadSByte;
            readerMap[ElementType.I2] = reader.ReadInt16;
            readerMap[ElementType.I4] = reader.ReadInt32;
            readerMap[ElementType.I8] = reader.ReadInt64;
            readerMap[ElementType.U1] = reader.ReadByte;
            readerMap[ElementType.U2] = reader.ReadUInt16;
            readerMap[ElementType.U4] = reader.ReadUInt32;
            readerMap[ElementType.U8] = reader.ReadUInt64;
            readerMap[ElementType.Boolean] = reader.ReadBoolean;
            readerMap[ElementType.Char] = reader.ReadChar;
            readerMap[ElementType.R4] = reader.ReadSingle;    
            readerMap[ElementType.R8] = reader.ReadDouble;

            when(!readerMap.ContainsKey(elementType))
            {
                throw NotSupportedException("Element Type Not Supported: " + elementType.ToString());
            }          

            readerMap[elementType]();
        }
    }
}
