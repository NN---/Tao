using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.IO;
using System.Collections.Generic;
using System.Text;
using System.Linq;

using Tao.Metadata.Tables;
using Tao.Metadata.Tables.Rows;

namespace Tao.Metadata.Signatures
{
    public class CustomAttributeSignatureReader
    {
        public Read([NotNull] parameters : IEnumerable.[Param],[NotNull] blobStream : Stream, [NotNull] stringHeap : Stream, [NotNull] tablesHeap : ITablesHeap) : CustomAttributeSignature
        {
            def reader = BinaryReader(blobStream);          
            def prolog = reader.ReadUInt16();
            when(prolog != 0x0001)
            {
                throw CustomAttributeSignaturePrologNotFoundException("Invalid custom attribute signature--the custom attribute signature is missing the prolog bytes!");
            }

            def signature = CustomAttributeSignature();
            def currentParameters = parameters.ToArray();
            foreach(param in currentParameters)
            {
                def value = ReadParameterValue(param, reader, stringHeap, tablesHeap);
                def fixedArgument = CustomAttributeArgument(value);

                signature.FixedArguments.Add(fixedArgument);              
            }

            // TODO: Read the NumNamed value
            // TODO: Read the NamedArgs

            signature;
        }
        private ReadParameterValue([NotNull] param : Param, [NotNull] reader : BinaryReader, [NotNull] stringHeap : Stream, [NotNull] tablesHeap : ITablesHeap) : object
            requires param.Type != null
        {
            def paramType = param.Type;
            def elementType = paramType.ElementType;

            def readerMap : Dictionary.[ElementType, void -> object] = Dictionary();
            readerMap[ElementType.I1] = reader.ReadSByte;
            readerMap[ElementType.I2] = reader.ReadInt16;
            readerMap[ElementType.I4] = reader.ReadInt32;
            readerMap[ElementType.I8] = reader.ReadInt64;
            readerMap[ElementType.U1] = reader.ReadByte;
            readerMap[ElementType.U2] = reader.ReadUInt16;
            readerMap[ElementType.U4] = reader.ReadUInt32;
            readerMap[ElementType.U8] = reader.ReadUInt64;
            readerMap[ElementType.Boolean] = reader.ReadBoolean;
            readerMap[ElementType.Char] = reader.ReadChar;
            readerMap[ElementType.R4] = reader.ReadSingle;    
            readerMap[ElementType.R8] = reader.ReadDouble;
            readerMap[ElementType.String] = () => ReadSerString(reader);

            when(!IsSystemType(param, stringHeap, tablesHeap) && !readerMap.ContainsKey(elementType))
            {
                throw NotSupportedException("Element Type Not Supported: " + elementType.ToString());
            }          

            if(elementType == ElementType.Class)
            {
                def typeRef = TypeReference();
                typeRef.QualifiedName = ReadSerString(reader);
                
                typeRef;
            }
            else
            {
                readerMap[elementType]();
            }
        }        

        private IsSystemType([NotNull] param : Param,[NotNull] stringHeap : Stream, [NotNull] tablesHeap : ITablesHeap) : bool      
            requires param.Type != null
        {
            mutable result : bool = false;
            def type = param.Type;
            when(type.GetType() == typeof(TypeDefOrRefEncodedSignature))
            {
                def signature = type :> TypeDefOrRefEncodedSignature;

                def typeRow = signature.GetTypeRow(tablesHeap);                                
                def assemblyRow = typeRow.GetAssemblyRow(tablesHeap);

                def typeName = typeRow.TypeName.ToString(stringHeap);
                def typeNamespace = typeRow.TypeNamespace.ToString(stringHeap);
                def assemblyName = assemblyRow.Name.ToString(stringHeap);                                

                match((typeName, typeNamespace, assemblyName))
                {
                    | ("Type", "System", "mscorlib") => result = true;
                    |_=> {};
                }
            }

            result;
        }

        private ReadSerString([NotNull] reader : BinaryReader) : string
        {
            def underlyingStream = reader.BaseStream;
            def lengthByteValue = underlyingStream.PeekByte();

            mutable result : string = null;
            match(lengthByteValue)
            {
                | 0x00 => result = string.Empty;
                | 0xFF => result = null;
                |_ => 
                    {
                        def integerReader = CompressedIntegerReader();
                        def length = integerReader.ReadInteger(underlyingStream);

                        def bytes = reader.ReadBytes(length :> int);
                        result = Encoding.UTF8.GetString(bytes);
                    }
            }

            result;
        }
    }
}
