using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

namespace Tao.Metadata.Signatures
{
    public abstract class TypeSpecBase
    {
        protected this() 
        {
        }

        public ElementType : ElementType { get; set; }

        public Read([NotNull] stream : Stream) : void
            requires !stream.AtEnd() otherwise throw ArgumentException("stream", "You can't read a TypeSpec if the stream position is already at the end of the stream")
        {
            def elementType = stream.ReadByte() :> ElementType;            
            def isSupported = SupportsElement(elementType);

            when(isSupported == false)
            {
                throw NotSupportedException(string.Format("The element type '{0}' is not supported", elementType));    
            }            

            ElementType = elementType;            

            Read(elementType, stream);
        }

        public Write([NotNull] stream : Stream) : void
        {
            def elementType = this.ElementType;
            stream.WriteByte(elementType :> byte);

            Write(elementType, stream);
        }

        protected abstract SupportsElement(elementType : ElementType) : bool;

        protected virtual Read(elementType : ElementType, [NotNull] stream : Stream) : void
        {
        }
        protected virtual Write(elementType : ElementType, [NotNull] stream : Stream) : void
        {
        }
    }
}
