using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

namespace Tao
{
    public partial class TypeSignature
    {
        public ElementType : ElementType { get; set; }

        public Read([NotNull] stream : Stream) : void
        {
            def supportedElements = HashSet.[ElementType]();

            def addElement : Action.[ElementType] =  e => 
            {
                _ = supportedElements.Add(e);
            }

            addElement(ElementType.Boolean);
            addElement(ElementType.Char);
            addElement(ElementType.I1);
            addElement(ElementType.U1);
            addElement(ElementType.I2);
            addElement(ElementType.U2);

            addElement(ElementType.I4);
            addElement(ElementType.U4);

            addElement(ElementType.I8);
            addElement(ElementType.U8);

            addElement(ElementType.R4);
            addElement(ElementType.R8);

            addElement(ElementType.IntPtr);
            addElement(ElementType.UIntPtr);

            def elementType = stream.ReadByte() :> ElementType;
            when(!supportedElements.Contains(elementType))
            {
                throw NotSupportedException(string.Format("The element type '{0}' is not supported", elementType));    
            }            

            ElementType = elementType;            

            Read(elementType, stream);
        }

        public Write([NotNull] stream : Stream) : void
        {
            def elementType = this.ElementType;
            stream.WriteByte(elementType :> byte);

            Write(elementType, stream);
        }

        protected virtual Read(elementType : ElementType, [NotNull] stream : Stream) : void
        {
        }
        protected virtual Write(elementType : ElementType, [NotNull] stream : Stream) : void
        {
        }
    }
}
