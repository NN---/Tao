using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

namespace Tao
{
    public abstract class ManagedMethodSignatureReader[TSignature] : MethodSignatureReader[TSignature]
        where TSignature : IManagedMethodSignature, new()
    {
        protected override HasAlternateCallingConvention(nextByte : byte) : bool
        {
            // Isolate the calling convention bits
            def conventionByte = (nextByte << 4) >> 4;
            
            conventionByte == (CallingConvention.Generic :> byte);
        }

        protected override ReadAlternateCallingConvention(nextByte : byte, signature : TSignature,  stream : Stream) : void
        {
            // Read the number of generic parameters as a compressed unsigned int                
            def integerReader = CompressedIntegerReader();            
            def genericParamCount = integerReader.ReadInteger(stream);

            signature.IsGeneric = true;
            signature.GenericParameterCount = genericParamCount;
        }
    }
}
