using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

namespace Tao.Metadata.Signatures
{
  public abstract class MethodSignatureElementWriter[TElement] 
    where TElement : IMethodSignatureElement, class
  {
      public virtual Write([NotNull] element : TElement, [NotNull] stream : Stream) : void
        requires !object.ReferenceEquals(element.Type, null)
        requires stream.CanWrite
        requires element.Type != null
      {          
          def elementType = element.Type;
          when(!SupportsWriting(elementType))
          {
              throw NotSupportedException(string.Format("The signature type '{0}' is not supported for write operations", elementType.ElementType));
          }
          
          def writer = BinaryWriter(stream);
          
          // Write the custom mods
          def modWriter = CustomModWriter();
          foreach(mod in element.CustomMods)
          {
              modWriter.Write(mod, stream);
          }
          
          when(element.IsByRef)
          {
              writer.Write(ElementType.ByRef :> byte);
          }
          
          writer.Write(elementType.ElementType :> byte);
      }
      
      protected virtual SupportsWriting([NotNull] type : ITypeSignature) : bool
      {
          true;
      }
  }
}
