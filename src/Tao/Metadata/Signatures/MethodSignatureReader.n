using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

namespace Tao.Metadata.Signatures
{
    public abstract class MethodSignatureReader[TSignature, TSignatureImpl] : IMethodSignatureReader[TSignature]
        where TSignature : IMethodSignature
        where TSignatureImpl : TSignature, new()
    {
        public Read([NotNull] stream : Stream) : TSignature
            requires stream.CanRead
            requires stream.Position < stream.Length otherwise throw InvalidOperationException("Unable to read past the end of the stream. (Did you forget to reset the stream pointer?)")
            ensures !ReferenceEquals(value, null)
        {
            def signature = TSignatureImpl();

            ReadCallingConvention(signature, stream);

            // Read the parameter count
            def integerReader = CompressedIntegerReader();
            def parameterCount = integerReader.ReadInteger(stream);
            signature.ParameterCount = parameterCount;

            def retTypeReader = RetTypeReader();
            signature.ReturnType = retTypeReader.Read(stream);            

            ReadParameters(parameterCount, stream, signature);

            signature;
        }
        protected virtual ReadCallingConvention(signature : TSignature, stream : Stream) : void
        {
            def reader = BinaryReader(stream);

            mutable nextByte = reader.ReadByte();                      
            def hasFlag(currentByte : byte, convention : CallingConvention) : bool
            {
                (currentByte & (convention :> byte)) != 0;
            }

            when(hasFlag(nextByte, CallingConvention.ExplicitThis) && !hasFlag(nextByte, CallingConvention.HasThis))
            {
                throw BadImageFormatException("You can't declare a method as ExplicitThis without first setting the HasThis flag");
            }

            // Read the HasThis -> ExplicitThis [Optional] bytes
            when(hasFlag(nextByte, CallingConvention.HasThis))
            {
                signature.HasThis = true;
                when(hasFlag(nextByte, CallingConvention.ExplicitThis))
                {
                    signature.HasExplicitThis = true;                    
                }                
            }

            if(HasAlternateCallingConvention(nextByte))
            {
                ReadAlternateCallingConvention(nextByte, signature, stream);
            }
            else 
            {
                // Isolate the calling convention bits
                def conventionByte = (nextByte << 4) >> 4;
                if(conventionByte == (CallingConvention.VarArg :> byte))
                {
                    signature.UsesVariableArguments = true;
                }    
                else
                {
                    signature.UsesDefaultCallingConvention = true;    
                }
            }
        }

        protected abstract HasAlternateCallingConvention(nextByte : byte) : bool;       
        protected abstract ReadAlternateCallingConvention(nextByte : byte, signature : TSignatureImpl,  stream : Stream) : void;

        protected virtual ReadParameters(parameterCount : uint, [NotNull] stream : Stream, signature : TSignature) : void
            requires parameterCount == 0 || (parameterCount > 0 && stream.Position < stream.Length) otherwise throw InvalidOperationException("Unable to read past the end of the stream")
        {
            for(mutable i : uint = 0; i < parameterCount; i++)
            {                
                def paramReader = ParamReader();

                def currentParam = paramReader.Read(stream);
                signature.Parameters.Add(currentParam);
            }
        }
    }
}
