using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

namespace Tao
{
  public class ArraySignature : TypeSignature 
  {
      public this()
      {
          ElementType = ElementType.Array;
      }
      public ArrayType : ITypeSignature { get; set; }
      public Shape : ArrayShape {get; set; }      
      
      protected override Read(elementType : ElementType, [NotNull] stream : Stream) : void
        requires elementType == ElementType.Array
      {
          // Read the array type
          ArrayType = TypeSignature.ReadFrom(stream);
                    
          // Read the shape
          def reader = ArrayShapeReader();
          Shape = reader.ReadFrom(stream);          
      }
      
      protected override Write(elementType : ElementType, [NotNull] stream : Stream) : void
        requires elementType == ElementType.Array
        requires ArrayType != null
        requires ArrayShape != null
      {
          // Write the array type
          ArrayType.Write(stream);
          
          def writer = ArrayShapeWriter();
          writer.Write(Shape, stream);
      }
      
      protected override SupportsElement(elementType : ElementType) : bool
      {
          elementType == ElementType.Array;
      }
  }
}
