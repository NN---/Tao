using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

namespace Tao.Metadata.Signatures
{
    public class MVarSignature : TypeSignature
    {
        public this()
        {
            ElementType = ElementType.Mvar;
        }
        public VariableNumber : uint? { get; set; }
        
        protected override SupportsElement(elementType : ElementType) : bool
        {
            elementType == ElementType.Mvar;
        }
        protected override Read(elementType : ElementType, [NotNull] stream : Stream) : void
            requires !stream.AtEnd() otherwise throw ArgumentException("stream", "You can't read an MVarSignature if the stream position is already at the end of the stream")
            requires elementType == ElementType.Mvar otherwise throw InvalidOperationException("You can't read an MVar signature unless the element type is explicity ElementType.MVar")
        {  
            def reader = CompressedIntegerReader();
            VariableNumber = reader.ReadInteger(stream);
        }
        protected override Write(elementType : ElementType, [NotNull] stream : Stream) : void
            requires elementType == ElementType.Mvar otherwise throw InvalidOperationException("You can't write an MVar signature unless the element type is explicity ElementType.MVar")
            requires VariableNumber != null && VariableNumber.HasValue otherwise throw InvalidOperationException("You can't write an MVar signature without assigning it a variable number")
        {
            def number = VariableNumber.Value;
            def writer = CompressedIntegerWriter();
            writer.WriteInteger(number, stream);
        }
    }
}
