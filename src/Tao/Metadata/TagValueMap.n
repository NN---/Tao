using Nemerle;
using Nemerle.Collections;
using Nemerle.Extensions;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Tao
{
  public class TagValueMap : Dictionary[CodedTokenType, IDictionary[TableId, byte]]
  {
    public this() 
    {
      this[CodedTokenType.CustomAttributeType] = Dictionary();
      this[CodedTokenType.CustomAttributeType][TableId.MethodDef] = 2;
      this[CodedTokenType.CustomAttributeType][TableId.MemberRef] = 3;
      
      AddSet(CodedTokenType.HasConstant, TableId.Field, TableId.Param, TableId.Property);    
      AddSet(CodedTokenType.HasCustomAttribute, TableId.MethodDef,
                                                TableId.Field,
                                                TableId.TypeRef,
                                                TableId.TypeDef,
                                                TableId.Param,
                                                TableId.InterfaceImpl,
                                                TableId.MemberRef,
                                                TableId.Module,
                                                TableId.DeclSecurity,
                                                TableId.Property,
                                                TableId.Event,
                                                TableId.StandAloneSig,
                                                TableId.ModuleRef,
                                                TableId.TypeSpec,
                                                TableId.Assembly,
                                                TableId.AssemblyRef,
                                                TableId.File,
                                                TableId.ExportedType,
                                                TableId.ManifestResource);
      
      AddSet(CodedTokenType.HasDeclSecurity, TableId.TypeDef, TableId.MethodDef, TableId.Assembly);      
      AddSet(CodedTokenType.HasFieldMarshall, TableId.Field, TableId.Param);
      AddSet(CodedTokenType.HasSemantics, TableId.Event, TableId.Property);
      AddSet(CodedTokenType.Implementation, TableId.File, TableId.AssemblyRef, TableId.ExportedType);                                           
      AddSet(CodedTokenType.MemberForwarded, TableId.Field, TableId.MethodDef);
      AddSet(CodedTokenType.MemberRefParent, TableId.TypeRef, TableId.ModuleRef, TableId.MethodDef, TableId.TypeSpec);
      AddSet(CodedTokenType.MethodDefOrRef, TableId.MethodDef, TableId.MemberRef);
      AddSet(CodedTokenType.ResolutionScope, TableId.Module, TableId.ModuleRef, TableId.AssemblyRef, TableId.TypeRef);
      AddSet(CodedTokenType.TypeDefOrTypeRef, TableId.TypeDef, TableId.TypeRef, TableId.TypeSpec);
      AddSet(CodedTokenType.TypeOrMethodDef, TableId.TypeDef, TableId.MethodDef);
    }
    private AddSet(tokenType : CodedTokenType, params tableIds : array[TableId]) : void
    {
      mutable index : byte = 0;
      foreach(tableId in tableIds)
      {        
        unless(this.ContainsKey(tokenType))
        {
          this[tokenType] = System.Collections.Generic.Dictionary();
        }
        
        this[tokenType][tableId] = index;
        index++;
      }
    }
  }
}
