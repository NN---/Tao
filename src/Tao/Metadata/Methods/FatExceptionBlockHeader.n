using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

namespace Tao.Metadata
{
    public class FatExceptionBlockHeader : ExceptionBlockHeader
    {
        private _clauses : List.[FatExceptionHandlerClause] = List();
        
        public DataSize : uint 
        { 
            get; 
            set; 
        }
        public Clauses : IList[FatExceptionHandlerClause]
        {
            get
            {
                _clauses;
            }
        }
        public override ReadClausesFrom(stream : Stream, numberOfClauses : uint) : void
        {
            def reader = BinaryReader(stream);
            for(mutable i : uint = 0; i < numberOfClauses; i++)
            {
                def clause = FatExceptionHandlerClause();
                clause.Flags = reader.ReadUInt32();
                clause.TryOffset = reader.ReadUInt32();
                clause.TryLength = reader.ReadUInt32() :> byte;
                clause.HandlerOffset = reader.ReadUInt32();
                clause.HandlerLength = reader.ReadUInt32() :> byte;
                
                def flags = clause.Flags :> ExceptionHandlerClauseFlags;

                def tokenOrFilterValue = reader.ReadUInt32();
                when((flags & ExceptionHandlerClauseFlags.TypedException) != 0)
                {
                    clause.ClassToken = tokenOrFilterValue;                    
                }

                when((flags & ExceptionHandlerClauseFlags.Filter) != 0)
                {
                    clause.FilterOffset = tokenOrFilterValue;                    
                }

                Clauses.Add(clause);
            }
        }
    }
}
