using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

namespace Tao.Metadata
{
    public class FatExceptionBlockHeader : ExceptionBlockHeader
    {
        private _clauses : List.[FatExceptionHandlerClause] = List();
        
        public DataSize : uint 
        { 
            get; 
            set; 
        }
        public Clauses : IList[FatExceptionHandlerClause]
        {
            get
            {
                _clauses;
            }
        }
        public override ReadClausesFrom([NotNull] stream : Stream, numberOfClauses : uint) : void
        {
            def reader = BinaryReader(stream);
            for(mutable i : uint = 0; i < numberOfClauses; i++)
            {                
                def clause = ReadClauseFrom(reader);
                Clauses.Add(clause);
            }
        }
        private ReadClauseFrom([NotNull] reader : BinaryReader) : FatExceptionHandlerClause
            ensures value.ClassToken != null || value.FilterOffset != null
        {
            def clause = FatExceptionHandlerClause();
            clause.Flags = reader.ReadUInt32();
            clause.TryOffset = reader.ReadUInt32();
            clause.TryLength = reader.ReadUInt32() :> byte;
            clause.HandlerOffset = reader.ReadUInt32();
            clause.HandlerLength = reader.ReadUInt32() :> byte;            
            
            ReadClassTokenOrFilterOffsetFrom(reader, clause, clause.Flags :> ExceptionHandlerClauseFlags);
            clause;
        }

        public override WriteClausesTo([NotNull] stream : Stream) : void
        {
            throw NotImplementedException("TODO: Implement this method");
        }
    }
}
