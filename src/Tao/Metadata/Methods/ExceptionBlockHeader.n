using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

namespace Tao.Metadata
{
    public abstract class ExceptionBlockHeader
    {
        public Kind : MethodDataSectionFlags { get; set; }
        public abstract ReadClausesFrom(stream : Stream, numberOfClauses : uint) : void;
        public abstract WriteClausesTo(stream : Stream) : void;
        
        protected ReadClassTokenOrFilterOffsetFrom([NotNull] reader : BinaryReader, [NotNull] clause : ExceptionHandlerClause, flags : ExceptionHandlerClauseFlags) : void
        {
            def tokenOrFilterValue = reader.ReadUInt32();
            when(flags == ExceptionHandlerClauseFlags.TypedException)
            {
                clause.ClassToken = tokenOrFilterValue;                    
            }

            when((flags & ExceptionHandlerClauseFlags.Filter) != 0)
            {
                clause.FilterOffset = tokenOrFilterValue;                    
            }        
        }
        protected WriteClassTokenOrFilterOffsetTo([NotNull] writer : BinaryWriter, [NotNull] clause : ExceptionHandlerClause, flags : ExceptionHandlerClauseFlags) : void
        {
            when(flags == ExceptionHandlerClauseFlags.TypedException)
            {
                writer.Write(clause.ClassToken :> uint);
            }

            when((flags & ExceptionHandlerClauseFlags.Filter) != 0)
            {
                writer.Write(clause.FilterOffset :> uint);
            }
        }
    }
}
