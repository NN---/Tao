using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

namespace Tao.Metadata
{
    public class ThinExceptionBlockHeader : ExceptionBlockHeader
    {
        private _clauses : List.[ThinExceptionHandlerClause] = List();
        public DataSize : byte { get; set; }
        public Clauses : IList[ThinExceptionHandlerClause]
        {
            get
            {
                _clauses;
            }
        }
        public override ReadClausesFrom(stream : Stream, numberOfClauses : uint) : void
        {
            def reader = BinaryReader(stream);
            for(mutable i : uint = 0; i < numberOfClauses; i++)
            {
                def clause = ThinExceptionHandlerClause();
                clause.Flags = reader.ReadUInt16();
                clause.TryOffset = reader.ReadUInt16();
                clause.TryLength = reader.ReadByte() :> byte;
                clause.HandlerOffset = reader.ReadUInt16();
                clause.HandlerLength = reader.ReadByte() :> byte;
                clause.ClassToken = reader.ReadUInt32();
                clause.FilterOffset = reader.ReadUInt32();
                
                Clauses.Add(clause);
            }
        }
    }
}
