using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

namespace Tao.Metadata
{
    public class ThinExceptionBlockHeader : ExceptionBlockHeader
    {
        private _clauses : List.[ThinExceptionHandlerClause] = List();
        public DataSize : byte { get; set; }
        public Clauses : IList[ThinExceptionHandlerClause]
        {
            get
            {
                _clauses;
            }
        }
        public override ReadClausesFrom([NotNull] stream : Stream, numberOfClauses : uint) : void
        {
            def reader = BinaryReader(stream);
            for(mutable i : uint = 0; i < numberOfClauses; i++)
            {
                def clause = ReadClauseFrom(reader);
                Clauses.Add(clause);
            }
        }
        public override WriteClausesTo([NotNull] stream : Stream) : void
        {
            def writer = BinaryWriter(stream);
            writer.Write(Kind :> byte);
            writer.Write(DataSize :> byte);

            // Skip the reserved bytes
            _ = stream.Seek(2, SeekOrigin.Current);
            foreach(clause in Clauses)
            {
                WriteClauseTo(writer, clause);
            }
        }
        private WriteClauseTo([NotNull] writer : BinaryWriter, [NotNull] clause : ThinExceptionHandlerClause) : void
            requires clause.ClassToken != null || clause.FilterOffset != null
        {
            writer.Write(clause.Flags :> ushort);
            writer.Write(clause.TryOffset : ushort);
            writer.Write(clause.TryLength : byte);
            writer.Write(clause.HandlerOffset : ushort);
            writer.Write(clause.HandlerLength : byte); 

            WriteClassTokenOrFilterOffsetTo(writer, clause, clause.Flags :> ExceptionHandlerClauseFlags);
        }
        private ReadClauseFrom([NotNull] reader : BinaryReader) : ThinExceptionHandlerClause
            ensures value.ClassToken != null || value.FilterOffset != null
        {
            def clause = ThinExceptionHandlerClause();
            clause.Flags = reader.ReadUInt16();
            clause.TryOffset = reader.ReadUInt16();
            clause.TryLength = reader.ReadByte() :> byte;
            clause.HandlerOffset = reader.ReadUInt16();
            clause.HandlerLength = reader.ReadByte() :> byte;
            
            ReadClassTokenOrFilterOffsetFrom(reader, clause, clause.Flags :> ExceptionHandlerClauseFlags);
            clause;
        }        
    }
}
