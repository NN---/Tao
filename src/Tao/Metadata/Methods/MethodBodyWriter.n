using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

using Tao.Metadata.Tables;
using Tao.Metadata.Tables.Rows;
using Tao.Metadata.Instructions;
using Tao.Metadata.Instructions.Operands;

namespace Tao.Metadata
{
    public class MethodBodyWriter
    {
        public Write([NotNull] methodBody : MethodBody, [NotNull] stringMap : IStringMap, [NotNull] methodStream : Stream) : void
            requires (methodBody is FatMethodBody) || (methodBody is TinyMethodBody)
            requires methodBody.Instructions.Count() > 0 otherwise throw InvalidOperationException("You can't write a method body with no instructions")
        {            
            when(methodBody is FatMethodBody)
            {
                Write(methodBody :> FatMethodBody, stringMap, methodStream);
            }

            when(methodBody is TinyMethodBody)
            {
                Write(methodBody :> TinyMethodBody, stringMap, methodStream);
            }
        }
        
        private Write([NotNull] methodBody : FatMethodBody, [NotNull] stringMap : IStringMap, [NotNull] methodStream : Stream) : void
        {            
            // Truncate the upper 4 bits since the flags 
            // are only supposed to occupy 12 bits
            mutable flags = methodBody.Flags;
            def bitMask : ushort = 0xFFF;
            flags = flags & bitMask;

            // Add the header size
            def headerSize : ushort = 3;
            flags = (headerSize << 12) + flags;

            def writer = BinaryWriter(methodStream);
            writer.Write(flags);
            
            // Write the MaxStack
            writer.Write(methodBody.MaxStack);
            
            // CodeSize
            writer.Write(methodBody.CodeSize);
            
            // LocalVarSigToken
            writer.Write(methodBody.LocalVarSigToken);
            
            // Write the method body bytes
            def instructionWriter = InstructionWriter();
            instructionWriter.Write(methodBody.Instructions, methodStream, stringMap);            
        }        
        private Write([NotNull] methodBody : TinyMethodBody, [NotNull] stringMap : IStringMap, [NotNull] methodStream : Stream) : void
        {
            throw NotImplementedException("TODO: Implement this method");
        }
    }
}
