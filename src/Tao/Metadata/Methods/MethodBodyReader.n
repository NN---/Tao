using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

using Tao.Metadata.Tables;
using Tao.Metadata.Tables.Rows;
using Tao.Metadata.Instructions;
using Tao.Metadata.Instructions.Operands;

namespace Tao.Metadata
{  
    public class MethodBodyReader
    {
        private _reader : IMethodBodyReader;
        private _instructionReader : IInstructionReader;
        private _userStringHeap : Stream;
        
        public this([NotNull] userStringHeap : Stream)
        {
            this(SimpleMethodBodyReader(), InstructionReader(), userStringHeap);
        }
        
        public this([NotNull] reader : IMethodBodyReader, [NotNull] instructionReader : IInstructionReader, [NotNull] userStringHeap : Stream)
            requires userStringHeap.CanRead
        {
            _reader = reader;
            _userStringHeap = userStringHeap;
            _instructionReader = instructionReader;
        }
        
        public Read([NotNull] methodStream : Stream) : IMethodBody
            requires methodStream.CanRead
            requires _instructionReader != null
            requires _userStringHeap != null && _userStringHeap.CanRead
            ensures value != null
        {
            def body = _reader.Read(methodStream);
            
            // Convert the method bytes into instructions
            def bytes = body.Bytes;
            def instructionStream = MemoryStream(bytes);
            def instructions = _instructionReader.Read(instructionStream, _userStringHeap);
            
            foreach(instruction in instructions)
            {
                body.Instructions.Add(instruction);
            }
            
            body;
        }
    }
}
