using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Tao.Interfaces;

using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

namespace Tao.Metadata
{  
    public class MetadataRootWriter : IMetadataRootWriter
    {
        private _updater : IStreamHeaderUpdater;
        private _headerWriter : IStreamHeaderWriter;

        public this() 
        {
            this(StreamHeaderUpdater(), StreamHeaderWriter());
        }

        public this(updater : IStreamHeaderUpdater) 
        {
            this(updater, StreamHeaderWriter());
        }
        
        public this(updater : IStreamHeaderUpdater, headerWriter : IStreamHeaderWriter) 
        {
            _updater = updater;
            _headerWriter = headerWriter;
        }

        public Write([NotNull] root : IMetadataRoot, [NotNull] outputStream : Stream) : void        
        {
            // Keep track of the metadata root start position 
            def startPosition = outputStream.Position;
            def writer = BinaryWriter(outputStream);
            writer.Write(root.Signature);
            writer.Write(root.MajorVersion);
            writer.Write(root.MinorVersion);

            // Skip the reserved block
            writer.Write(0 : uint);

            // Write the Version string length
            def version =  root.Version;
            when (string.IsNullOrEmpty(version))
                throw BadImageFormatException("The version string in the MetadataRoot header cannot be null");              

            // Write the version string
            def stringStream = MemoryStream();
            def stringWriter = PaddedNullTerminatedStringWriter();
            stringWriter.Write(root.Version, stringStream);

            def length = stringStream.Length;
            writer.Write(length :> uint);

            def versionStringBytes = stringStream.ToArray();
            writer.Write(versionStringBytes);

            // Write the flags field
            writer.Write(0 : ushort);

            def streamCount = root.StreamHeaders.Count;
            writer.Write(streamCount :> ushort);

            // Determine the length of the headers
            // before writing the actual header values
            def headerStartPosition = outputStream.Position; 

            // Recalculate the stream header sizes, if possible
            when(_updater != null)
            {
                _updater.UpdateHeaders(root, startPosition, outputStream);
            }

            // Write the actual header values using
            // the stream info gathered during the 
            // heap writing operations
            when(_headerWriter != null)
            {
                _ = outputStream.Seek(headerStartPosition, SeekOrigin.Begin);
                _headerWriter.Write(root.StreamHeaders, outputStream);
            }
        }
    }
}
