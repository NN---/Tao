using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Tao;
using Tao.Interfaces;
using Tao.Metadata.Tables;
using System;
using System.Collections.Generic;
using System.Linq;

namespace Tao.Metadata
{
  public class CodedTokenConverter
  {
    private _entries : TagMap = TagMap();    
    private _tagValues : TagValueMap = TagValueMap();
    
    public GetTableId(tokenType : CodedTokenType, tag : byte) : TableId
        requires _entries.ContainsKey(tokenType) otherwise throw ArgumentException("tokenType", string.Format("Invalid Token Type: {0}", tokenType))
        requires _entries[tokenType].ContainsKey(tag) otherwise throw ArgumentException("tag", "Invalid Tag Type")
    {
      _entries[tokenType][tag];
    }
    
    public GetTagValue(tokenType : CodedTokenType, tableId : TableId) : byte
        requires _tagValues.ContainsKey(tokenType) otherwise throw ArgumentException("tokenType", string.Format("Invalid Token Type: {0}", tokenType))
        requires _tagValues[tokenType].ContainsKey(tableId) otherwise throw ArgumentException("tableId", string.Format("Invalid TableId: {0}", tableId))
    {
      _tagValues[tokenType][tableId];
    }
  }
}
