using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

using Tao;
using Tao.Interfaces;
using Tao.Metadata.Tables;

namespace Tao.Metadata
{
    public abstract class Index : IIndex
    {
        public class Narrow : Index
        {
            public this(value : ushort)
            {
                Value = value;
            }
            
            public Value : ushort { get; set; }
            
            public override ToUInt16() : ushort
            {
                Value;
            }
            
            public override ToUInt32() : uint
            {
                Value;
            }
        }

        public class Wide : Index
        {
            public this(value : uint)
            {
                Value = value;
            }           
            public Value : uint { get; set; }
            
            public override ToUInt16() : ushort                
            {
                Value :> ushort;
            }
            
            public override ToUInt32() : uint
            {
                Value;
            }
        }
        
        public abstract ToUInt16() : ushort;
        public abstract ToUInt32() : uint;
        
        public static FromSimpleToken(tableId : TableId, row : uint) : Index
        {
            def encoder = SimpleTokenEncoder();
            def token = encoder.Encode(tableId, row);
            
            Index.Wide(token);
        }
        public static FromCodedToken(tokenType : CodedTokenType, tableId : TableId, row : uint) : Index
        {
            def encoder = CodedTokenEncoder();
            def token = encoder.Encode(tokenType, tableId, row);
            
            Index.Wide(token);
        }
        
        public static FromString(text : string, [NotNull] stringHeap : Stream) : Index
        {
            FromString(text, StringHeapWriter(), stringHeap);
        }
        
        public static FromString(text : string, [NotNull] writer : IStringHeapWriter, [NotNull] stringHeap : Stream) : Index
        {
            def value = writer.Write(text, stringHeap);
            
            // Use the appropriate index width
            Index.Auto(value);
        }
        
        public static FromGuid(guid : Guid, [NotNull] guidHeap : Stream) : Index
        {
            FromGuid(guid, GuidWriter(), guidHeap);
        }
        
        public static FromGuid(guid : Guid, [NotNull] writer : IGuidWriter, [NotNull] guidHeap : Stream) : Index
        {
            def value = guidHeap.Position :> uint + 1;
            writer.Write(array[guid], guidHeap);
            
            // Use the appropriate index width
            Index.Auto(value);
        }
        
        public static FromBlob(blob : Stream, [NotNull] blobHeap : Stream) : Index
        {
            FromBlob(blob, BlobWriter(), blobHeap);
        }
        
        public static FromBlob(blob : array[byte], [NotNull] blobHeap : Stream) : Index
        {
            FromBlob(blob, BlobWriter(), blobHeap);
        }
        
        public static FromBlob(blob : array[byte], [NotNull] writer : IBlobWriter, [NotNull] blobHeap : Stream) : Index
        {
            FromBlob(MemoryStream(blob), writer, blobHeap);
        }
        
        public static FromBlob(blob : Stream, [NotNull] writer : IBlobWriter, [NotNull] blobHeap : Stream) : Index
        {
            def value = blobHeap.Position :> uint + 1;
            writer.Write(blob, blobHeap);
            
            // Use the appropriate index width
            Index.Auto(value);
        }
        
        public static Auto(value : uint) : Index
        {
            if(value <= ushort.MaxValue)
            {
                Index.Narrow(value :> ushort);
            }
            else
            {
                Index.Wide(value);
            }
        }
    }  
}
