using Nemerle;
using Nemerle.Assertions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

using Tao.Interfaces;
namespace Tao
{
    public class SectionWriter : ISectionWriter
    {
        public Write([NotNull] sections : IEnumerable[ISection], sectionAlignment : uint, outputStream : Stream) : void
        {
            def writer = BinaryWriter(outputStream);
            foreach(section in sections)
            {
                def sectionData = section.Data;
                _ = sectionData.Seek(0, SeekOrigin.Begin);
                
                def header = section.Header;
                def reader = BinaryReader(sectionData);

                def length = header.SizeOfRawData;                    
                def sectionBytes = reader.ReadBytes(length :> int);

                def startPosition = header.PointerToRawData;
                _ = outputStream.Seek(startPosition, SeekOrigin.Begin);
                writer.Write(sectionBytes);
                
                // Align the sections to the nearest boundary
                outputStream.Align(sectionAlignment :> int);
            }
        }
    }
}
